// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/Disperse.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x3d,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x63, /* [13'0xd] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x60, /* [18'0x12] PUSH1 */
0xe0,/* constant data */
0x60, /* [20'0x14] PUSH1 */
0x02,/* constant data */
0x0a, /* [22'0x16] EXP */
0x60, /* [23'0x17] PUSH1 */
0x00,/* constant data */
0x35, /* [25'0x19] CALLDATALOAD */
0x04, /* [26'0x1a] DIV */
0x16, /* [27'0x1b] AND */
0x63, /* [28'0x1c] PUSH4 */
0x51,0xba,0x16,0x2c,/* constant data */
0x81, /* [33'0x21] DUP2 */
0x14, /* [34'0x22] EQ */
0x61, /* [35'0x23] PUSH2 */
0x00,0x42,/* constant data */
0x57, /* [38'0x26] JUMPI */
0x80, /* [39'0x27] DUP1 */
0x63, /* [40'0x28] PUSH4 */
0xc7,0x3a,0x2d,0x60,/* constant data */
0x14, /* [45'0x2d] EQ */
0x61, /* [46'0x2e] PUSH2 */
0x00,0x7d,/* constant data */
0x57, /* [49'0x31] JUMPI */
0x80, /* [50'0x32] DUP1 */
0x63, /* [51'0x33] PUSH4 */
0xe6,0x3d,0x38,0xed,/* constant data */
0x14, /* [56'0x38] EQ */
0x61, /* [57'0x39] PUSH2 */
0x00,0xb6,/* constant data */
0x57, /* [60'0x3c] JUMPI */
0x5b, /* [61'0x3d] JUMPDEST */
0x60, /* [62'0x3e] PUSH1 */
0x00,/* constant data */
0x80, /* [64'0x40] DUP1 */
0xfd, /* [65'0x41] REVERT */
0x5b, /* [66'0x42] JUMPDEST */
0x34, /* [67'0x43] CALLVALUE */
0x80, /* [68'0x44] DUP1 */
0x15, /* [69'0x45] ISZERO */
0x61, /* [70'0x46] PUSH2 */
0x00,0x4e,/* constant data */
0x57, /* [73'0x49] JUMPI */
0x60, /* [74'0x4a] PUSH1 */
0x00,/* constant data */
0x80, /* [76'0x4c] DUP1 */
0xfd, /* [77'0x4d] REVERT */
0x5b, /* [78'0x4e] JUMPDEST */
0x50, /* [79'0x4f] POP */
0x61, /* [80'0x50] PUSH2 */
0x00,0x7b,/* constant data */
0x60, /* [83'0x53] PUSH1 */
0x04,/* constant data */
0x80, /* [85'0x55] DUP1 */
0x35, /* [86'0x56] CALLDATALOAD */
0x60, /* [87'0x57] PUSH1 */
0x01,/* constant data */
0x60, /* [89'0x59] PUSH1 */
0xa0,/* constant data */
0x60, /* [91'0x5b] PUSH1 */
0x02,/* constant data */
0x0a, /* [93'0x5d] EXP */
0x03, /* [94'0x5e] SUB */
0x16, /* [95'0x5f] AND */
0x90, /* [96'0x60] SWAP1 */
0x60, /* [97'0x61] PUSH1 */
0x24,/* constant data */
0x80, /* [99'0x63] DUP1 */
0x35, /* [100'0x64] CALLDATALOAD */
0x80, /* [101'0x65] DUP1 */
0x82, /* [102'0x66] DUP3 */
0x01, /* [103'0x67] ADD */
0x92, /* [104'0x68] SWAP3 */
0x90, /* [105'0x69] SWAP1 */
0x81, /* [106'0x6a] DUP2 */
0x01, /* [107'0x6b] ADD */
0x35, /* [108'0x6c] CALLDATALOAD */
0x91, /* [109'0x6d] SWAP2 */
0x60, /* [110'0x6e] PUSH1 */
0x44,/* constant data */
0x35, /* [112'0x70] CALLDATALOAD */
0x90, /* [113'0x71] SWAP1 */
0x81, /* [114'0x72] DUP2 */
0x01, /* [115'0x73] ADD */
0x91, /* [116'0x74] SWAP2 */
0x01, /* [117'0x75] ADD */
0x35, /* [118'0x76] CALLDATALOAD */
0x61, /* [119'0x77] PUSH2 */
0x00,0xd5,/* constant data */
0x56, /* [122'0x7a] JUMP */
0x5b, /* [123'0x7b] JUMPDEST */
0x00, /* [124'0x7c] STOP */
0x5b, /* [125'0x7d] JUMPDEST */
0x34, /* [126'0x7e] CALLVALUE */
0x80, /* [127'0x7f] DUP1 */
0x15, /* [128'0x80] ISZERO */
0x61, /* [129'0x81] PUSH2 */
0x00,0x89,/* constant data */
0x57, /* [132'0x84] JUMPI */
0x60, /* [133'0x85] PUSH1 */
0x00,/* constant data */
0x80, /* [135'0x87] DUP1 */
0xfd, /* [136'0x88] REVERT */
0x5b, /* [137'0x89] JUMPDEST */
0x50, /* [138'0x8a] POP */
0x61, /* [139'0x8b] PUSH2 */
0x00,0x7b,/* constant data */
0x60, /* [142'0x8e] PUSH1 */
0x04,/* constant data */
0x80, /* [144'0x90] DUP1 */
0x35, /* [145'0x91] CALLDATALOAD */
0x60, /* [146'0x92] PUSH1 */
0x01,/* constant data */
0x60, /* [148'0x94] PUSH1 */
0xa0,/* constant data */
0x60, /* [150'0x96] PUSH1 */
0x02,/* constant data */
0x0a, /* [152'0x98] EXP */
0x03, /* [153'0x99] SUB */
0x16, /* [154'0x9a] AND */
0x90, /* [155'0x9b] SWAP1 */
0x60, /* [156'0x9c] PUSH1 */
0x24,/* constant data */
0x80, /* [158'0x9e] DUP1 */
0x35, /* [159'0x9f] CALLDATALOAD */
0x80, /* [160'0xa0] DUP1 */
0x82, /* [161'0xa1] DUP3 */
0x01, /* [162'0xa2] ADD */
0x92, /* [163'0xa3] SWAP3 */
0x90, /* [164'0xa4] SWAP1 */
0x81, /* [165'0xa5] DUP2 */
0x01, /* [166'0xa6] ADD */
0x35, /* [167'0xa7] CALLDATALOAD */
0x91, /* [168'0xa8] SWAP2 */
0x60, /* [169'0xa9] PUSH1 */
0x44,/* constant data */
0x35, /* [171'0xab] CALLDATALOAD */
0x90, /* [172'0xac] SWAP1 */
0x81, /* [173'0xad] DUP2 */
0x01, /* [174'0xae] ADD */
0x91, /* [175'0xaf] SWAP2 */
0x01, /* [176'0xb0] ADD */
0x35, /* [177'0xb1] CALLDATALOAD */
0x61, /* [178'0xb2] PUSH2 */
0x01,0xd3,/* constant data */
0x56, /* [181'0xb5] JUMP */
0x5b, /* [182'0xb6] JUMPDEST */
0x61, /* [183'0xb7] PUSH2 */
0x00,0x7b,/* constant data */
0x60, /* [186'0xba] PUSH1 */
0x24,/* constant data */
0x60, /* [188'0xbc] PUSH1 */
0x04,/* constant data */
0x80, /* [190'0xbe] DUP1 */
0x35, /* [191'0xbf] CALLDATALOAD */
0x82, /* [192'0xc0] DUP3 */
0x81, /* [193'0xc1] DUP2 */
0x01, /* [194'0xc2] ADD */
0x92, /* [195'0xc3] SWAP3 */
0x90, /* [196'0xc4] SWAP1 */
0x82, /* [197'0xc5] DUP3 */
0x01, /* [198'0xc6] ADD */
0x35, /* [199'0xc7] CALLDATALOAD */
0x91, /* [200'0xc8] SWAP2 */
0x81, /* [201'0xc9] DUP2 */
0x35, /* [202'0xca] CALLDATALOAD */
0x91, /* [203'0xcb] SWAP2 */
0x82, /* [204'0xcc] DUP3 */
0x01, /* [205'0xcd] ADD */
0x91, /* [206'0xce] SWAP2 */
0x01, /* [207'0xcf] ADD */
0x35, /* [208'0xd0] CALLDATALOAD */
0x61, /* [209'0xd1] PUSH2 */
0x03,0x8c,/* constant data */
0x56, /* [212'0xd4] JUMP */
0x5b, /* [213'0xd5] JUMPDEST */
0x60, /* [214'0xd6] PUSH1 */
0x00,/* constant data */
0x5b, /* [216'0xd8] JUMPDEST */
0x83, /* [217'0xd9] DUP4 */
0x81, /* [218'0xda] DUP2 */
0x10, /* [219'0xdb] LT */
0x15, /* [220'0xdc] ISZERO */
0x61, /* [221'0xdd] PUSH2 */
0x01,0xcb,/* constant data */
0x57, /* [224'0xe0] JUMPI */
0x60, /* [225'0xe1] PUSH1 */
0x01,/* constant data */
0x60, /* [227'0xe3] PUSH1 */
0xa0,/* constant data */
0x60, /* [229'0xe5] PUSH1 */
0x02,/* constant data */
0x0a, /* [231'0xe7] EXP */
0x03, /* [232'0xe8] SUB */
0x86, /* [233'0xe9] DUP7 */
0x16, /* [234'0xea] AND */
0x63, /* [235'0xeb] PUSH4 */
0x23,0xb8,0x72,0xdd,/* constant data */
0x33, /* [240'0xf0] CALLER */
0x87, /* [241'0xf1] DUP8 */
0x87, /* [242'0xf2] DUP8 */
0x85, /* [243'0xf3] DUP6 */
0x81, /* [244'0xf4] DUP2 */
0x81, /* [245'0xf5] DUP2 */
0x10, /* [246'0xf6] LT */
0x61, /* [247'0xf7] PUSH2 */
0x00,0xfc,/* constant data */
0x57, /* [250'0xfa] JUMPI */
0xfe, /* [251'0xfb] INVALID */
0x5b, /* [252'0xfc] JUMPDEST */
0x90, /* [253'0xfd] SWAP1 */
0x50, /* [254'0xfe] POP */
0x60, /* [255'0xff] PUSH1 */
0x20,/* constant data */
0x02, /* [257'0x101] MUL */
0x01, /* [258'0x102] ADD */
0x35, /* [259'0x103] CALLDATALOAD */
0x60, /* [260'0x104] PUSH1 */
0x01,/* constant data */
0x60, /* [262'0x106] PUSH1 */
0xa0,/* constant data */
0x60, /* [264'0x108] PUSH1 */
0x02,/* constant data */
0x0a, /* [266'0x10a] EXP */
0x03, /* [267'0x10b] SUB */
0x16, /* [268'0x10c] AND */
0x86, /* [269'0x10d] DUP7 */
0x86, /* [270'0x10e] DUP7 */
0x86, /* [271'0x10f] DUP7 */
0x81, /* [272'0x110] DUP2 */
0x81, /* [273'0x111] DUP2 */
0x10, /* [274'0x112] LT */
0x15, /* [275'0x113] ISZERO */
0x15, /* [276'0x114] ISZERO */
0x61, /* [277'0x115] PUSH2 */
0x01,0x1a,/* constant data */
0x57, /* [280'0x118] JUMPI */
0xfe, /* [281'0x119] INVALID */
0x5b, /* [282'0x11a] JUMPDEST */
0x90, /* [283'0x11b] SWAP1 */
0x50, /* [284'0x11c] POP */
0x60, /* [285'0x11d] PUSH1 */
0x20,/* constant data */
0x02, /* [287'0x11f] MUL */
0x01, /* [288'0x120] ADD */
0x35, /* [289'0x121] CALLDATALOAD */
0x60, /* [290'0x122] PUSH1 */
0x40,/* constant data */
0x51, /* [292'0x124] MLOAD */
0x84, /* [293'0x125] DUP5 */
0x63, /* [294'0x126] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [299'0x12b] AND */
0x60, /* [300'0x12c] PUSH1 */
0xe0,/* constant data */
0x60, /* [302'0x12e] PUSH1 */
0x02,/* constant data */
0x0a, /* [304'0x130] EXP */
0x02, /* [305'0x131] MUL */
0x81, /* [306'0x132] DUP2 */
0x52, /* [307'0x133] MSTORE */
0x60, /* [308'0x134] PUSH1 */
0x04,/* constant data */
0x01, /* [310'0x136] ADD */
0x80, /* [311'0x137] DUP1 */
0x84, /* [312'0x138] DUP5 */
0x60, /* [313'0x139] PUSH1 */
0x01,/* constant data */
0x60, /* [315'0x13b] PUSH1 */
0xa0,/* constant data */
0x60, /* [317'0x13d] PUSH1 */
0x02,/* constant data */
0x0a, /* [319'0x13f] EXP */
0x03, /* [320'0x140] SUB */
0x16, /* [321'0x141] AND */
0x60, /* [322'0x142] PUSH1 */
0x01,/* constant data */
0x60, /* [324'0x144] PUSH1 */
0xa0,/* constant data */
0x60, /* [326'0x146] PUSH1 */
0x02,/* constant data */
0x0a, /* [328'0x148] EXP */
0x03, /* [329'0x149] SUB */
0x16, /* [330'0x14a] AND */
0x81, /* [331'0x14b] DUP2 */
0x52, /* [332'0x14c] MSTORE */
0x60, /* [333'0x14d] PUSH1 */
0x20,/* constant data */
0x01, /* [335'0x14f] ADD */
0x83, /* [336'0x150] DUP4 */
0x60, /* [337'0x151] PUSH1 */
0x01,/* constant data */
0x60, /* [339'0x153] PUSH1 */
0xa0,/* constant data */
0x60, /* [341'0x155] PUSH1 */
0x02,/* constant data */
0x0a, /* [343'0x157] EXP */
0x03, /* [344'0x158] SUB */
0x16, /* [345'0x159] AND */
0x60, /* [346'0x15a] PUSH1 */
0x01,/* constant data */
0x60, /* [348'0x15c] PUSH1 */
0xa0,/* constant data */
0x60, /* [350'0x15e] PUSH1 */
0x02,/* constant data */
0x0a, /* [352'0x160] EXP */
0x03, /* [353'0x161] SUB */
0x16, /* [354'0x162] AND */
0x81, /* [355'0x163] DUP2 */
0x52, /* [356'0x164] MSTORE */
0x60, /* [357'0x165] PUSH1 */
0x20,/* constant data */
0x01, /* [359'0x167] ADD */
0x82, /* [360'0x168] DUP3 */
0x81, /* [361'0x169] DUP2 */
0x52, /* [362'0x16a] MSTORE */
0x60, /* [363'0x16b] PUSH1 */
0x20,/* constant data */
0x01, /* [365'0x16d] ADD */
0x93, /* [366'0x16e] SWAP4 */
0x50, /* [367'0x16f] POP */
0x50, /* [368'0x170] POP */
0x50, /* [369'0x171] POP */
0x50, /* [370'0x172] POP */
0x60, /* [371'0x173] PUSH1 */
0x20,/* constant data */
0x60, /* [373'0x175] PUSH1 */
0x40,/* constant data */
0x51, /* [375'0x177] MLOAD */
0x80, /* [376'0x178] DUP1 */
0x83, /* [377'0x179] DUP4 */
0x03, /* [378'0x17a] SUB */
0x81, /* [379'0x17b] DUP2 */
0x60, /* [380'0x17c] PUSH1 */
0x00,/* constant data */
0x87, /* [382'0x17e] DUP8 */
0x80, /* [383'0x17f] DUP1 */
0x3b, /* [384'0x180] EXTCODESIZE */
0x15, /* [385'0x181] ISZERO */
0x80, /* [386'0x182] DUP1 */
0x15, /* [387'0x183] ISZERO */
0x61, /* [388'0x184] PUSH2 */
0x01,0x8c,/* constant data */
0x57, /* [391'0x187] JUMPI */
0x60, /* [392'0x188] PUSH1 */
0x00,/* constant data */
0x80, /* [394'0x18a] DUP1 */
0xfd, /* [395'0x18b] REVERT */
0x5b, /* [396'0x18c] JUMPDEST */
0x50, /* [397'0x18d] POP */
0x5a, /* [398'0x18e] GAS */
0xf1, /* [399'0x18f] CALL */
0x15, /* [400'0x190] ISZERO */
0x80, /* [401'0x191] DUP1 */
0x15, /* [402'0x192] ISZERO */
0x61, /* [403'0x193] PUSH2 */
0x01,0xa0,/* constant data */
0x57, /* [406'0x196] JUMPI */
0x3d, /* [407'0x197] RETURNDATASIZE */
0x60, /* [408'0x198] PUSH1 */
0x00,/* constant data */
0x80, /* [410'0x19a] DUP1 */
0x3e, /* [411'0x19b] RETURNDATACOPY */
0x3d, /* [412'0x19c] RETURNDATASIZE */
0x60, /* [413'0x19d] PUSH1 */
0x00,/* constant data */
0xfd, /* [415'0x19f] REVERT */
0x5b, /* [416'0x1a0] JUMPDEST */
0x50, /* [417'0x1a1] POP */
0x50, /* [418'0x1a2] POP */
0x50, /* [419'0x1a3] POP */
0x50, /* [420'0x1a4] POP */
0x60, /* [421'0x1a5] PUSH1 */
0x40,/* constant data */
0x51, /* [423'0x1a7] MLOAD */
0x3d, /* [424'0x1a8] RETURNDATASIZE */
0x60, /* [425'0x1a9] PUSH1 */
0x20,/* constant data */
0x81, /* [427'0x1ab] DUP2 */
0x10, /* [428'0x1ac] LT */
0x15, /* [429'0x1ad] ISZERO */
0x61, /* [430'0x1ae] PUSH2 */
0x01,0xb6,/* constant data */
0x57, /* [433'0x1b1] JUMPI */
0x60, /* [434'0x1b2] PUSH1 */
0x00,/* constant data */
0x80, /* [436'0x1b4] DUP1 */
0xfd, /* [437'0x1b5] REVERT */
0x5b, /* [438'0x1b6] JUMPDEST */
0x50, /* [439'0x1b7] POP */
0x51, /* [440'0x1b8] MLOAD */
0x15, /* [441'0x1b9] ISZERO */
0x15, /* [442'0x1ba] ISZERO */
0x61, /* [443'0x1bb] PUSH2 */
0x01,0xc3,/* constant data */
0x57, /* [446'0x1be] JUMPI */
0x60, /* [447'0x1bf] PUSH1 */
0x00,/* constant data */
0x80, /* [449'0x1c1] DUP1 */
0xfd, /* [450'0x1c2] REVERT */
0x5b, /* [451'0x1c3] JUMPDEST */
0x60, /* [452'0x1c4] PUSH1 */
0x01,/* constant data */
0x01, /* [454'0x1c6] ADD */
0x61, /* [455'0x1c7] PUSH2 */
0x00,0xd8,/* constant data */
0x56, /* [458'0x1ca] JUMP */
0x5b, /* [459'0x1cb] JUMPDEST */
0x50, /* [460'0x1cc] POP */
0x50, /* [461'0x1cd] POP */
0x50, /* [462'0x1ce] POP */
0x50, /* [463'0x1cf] POP */
0x50, /* [464'0x1d0] POP */
0x50, /* [465'0x1d1] POP */
0x56, /* [466'0x1d2] JUMP */
0x5b, /* [467'0x1d3] JUMPDEST */
0x60, /* [468'0x1d4] PUSH1 */
0x00,/* constant data */
0x80, /* [470'0x1d6] DUP1 */
0x5b, /* [471'0x1d7] JUMPDEST */
0x84, /* [472'0x1d8] DUP5 */
0x81, /* [473'0x1d9] DUP2 */
0x10, /* [474'0x1da] LT */
0x15, /* [475'0x1db] ISZERO */
0x61, /* [476'0x1dc] PUSH2 */
0x02,0x01,/* constant data */
0x57, /* [479'0x1df] JUMPI */
0x83, /* [480'0x1e0] DUP4 */
0x83, /* [481'0x1e1] DUP4 */
0x82, /* [482'0x1e2] DUP3 */
0x81, /* [483'0x1e3] DUP2 */
0x81, /* [484'0x1e4] DUP2 */
0x10, /* [485'0x1e5] LT */
0x61, /* [486'0x1e6] PUSH2 */
0x01,0xeb,/* constant data */
0x57, /* [489'0x1e9] JUMPI */
0xfe, /* [490'0x1ea] INVALID */
0x5b, /* [491'0x1eb] JUMPDEST */
0x60, /* [492'0x1ec] PUSH1 */
0x20,/* constant data */
0x02, /* [494'0x1ee] MUL */
0x91, /* [495'0x1ef] SWAP2 */
0x90, /* [496'0x1f0] SWAP1 */
0x91, /* [497'0x1f1] SWAP2 */
0x01, /* [498'0x1f2] ADD */
0x35, /* [499'0x1f3] CALLDATALOAD */
0x92, /* [500'0x1f4] SWAP3 */
0x90, /* [501'0x1f5] SWAP1 */
0x92, /* [502'0x1f6] SWAP3 */
0x01, /* [503'0x1f7] ADD */
0x91, /* [504'0x1f8] SWAP2 */
0x50, /* [505'0x1f9] POP */
0x60, /* [506'0x1fa] PUSH1 */
0x01,/* constant data */
0x01, /* [508'0x1fc] ADD */
0x61, /* [509'0x1fd] PUSH2 */
0x01,0xd7,/* constant data */
0x56, /* [512'0x200] JUMP */
0x5b, /* [513'0x201] JUMPDEST */
0x60, /* [514'0x202] PUSH1 */
0x40,/* constant data */
0x80, /* [516'0x204] DUP1 */
0x51, /* [517'0x205] MLOAD */
0x7f, /* [518'0x206] PUSH32 */
0x23,0xb8,0x72,0xdd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x81, /* [551'0x227] DUP2 */
0x52, /* [552'0x228] MSTORE */
0x33, /* [553'0x229] CALLER */
0x60, /* [554'0x22a] PUSH1 */
0x04,/* constant data */
0x82, /* [556'0x22c] DUP3 */
0x01, /* [557'0x22d] ADD */
0x52, /* [558'0x22e] MSTORE */
0x30, /* [559'0x22f] ADDRESS */
0x60, /* [560'0x230] PUSH1 */
0x24,/* constant data */
0x82, /* [562'0x232] DUP3 */
0x01, /* [563'0x233] ADD */
0x52, /* [564'0x234] MSTORE */
0x60, /* [565'0x235] PUSH1 */
0x44,/* constant data */
0x81, /* [567'0x237] DUP2 */
0x01, /* [568'0x238] ADD */
0x84, /* [569'0x239] DUP5 */
0x90, /* [570'0x23a] SWAP1 */
0x52, /* [571'0x23b] MSTORE */
0x90, /* [572'0x23c] SWAP1 */
0x51, /* [573'0x23d] MLOAD */
0x60, /* [574'0x23e] PUSH1 */
0x01,/* constant data */
0x60, /* [576'0x240] PUSH1 */
0xa0,/* constant data */
0x60, /* [578'0x242] PUSH1 */
0x02,/* constant data */
0x0a, /* [580'0x244] EXP */
0x03, /* [581'0x245] SUB */
0x89, /* [582'0x246] DUP10 */
0x16, /* [583'0x247] AND */
0x91, /* [584'0x248] SWAP2 */
0x63, /* [585'0x249] PUSH4 */
0x23,0xb8,0x72,0xdd,/* constant data */
0x91, /* [590'0x24e] SWAP2 */
0x60, /* [591'0x24f] PUSH1 */
0x64,/* constant data */
0x80, /* [593'0x251] DUP1 */
0x83, /* [594'0x252] DUP4 */
0x01, /* [595'0x253] ADD */
0x92, /* [596'0x254] SWAP3 */
0x60, /* [597'0x255] PUSH1 */
0x20,/* constant data */
0x92, /* [599'0x257] SWAP3 */
0x91, /* [600'0x258] SWAP2 */
0x90, /* [601'0x259] SWAP1 */
0x82, /* [602'0x25a] DUP3 */
0x90, /* [603'0x25b] SWAP1 */
0x03, /* [604'0x25c] SUB */
0x01, /* [605'0x25d] ADD */
0x81, /* [606'0x25e] DUP2 */
0x60, /* [607'0x25f] PUSH1 */
0x00,/* constant data */
0x87, /* [609'0x261] DUP8 */
0x80, /* [610'0x262] DUP1 */
0x3b, /* [611'0x263] EXTCODESIZE */
0x15, /* [612'0x264] ISZERO */
0x80, /* [613'0x265] DUP1 */
0x15, /* [614'0x266] ISZERO */
0x61, /* [615'0x267] PUSH2 */
0x02,0x6f,/* constant data */
0x57, /* [618'0x26a] JUMPI */
0x60, /* [619'0x26b] PUSH1 */
0x00,/* constant data */
0x80, /* [621'0x26d] DUP1 */
0xfd, /* [622'0x26e] REVERT */
0x5b, /* [623'0x26f] JUMPDEST */
0x50, /* [624'0x270] POP */
0x5a, /* [625'0x271] GAS */
0xf1, /* [626'0x272] CALL */
0x15, /* [627'0x273] ISZERO */
0x80, /* [628'0x274] DUP1 */
0x15, /* [629'0x275] ISZERO */
0x61, /* [630'0x276] PUSH2 */
0x02,0x83,/* constant data */
0x57, /* [633'0x279] JUMPI */
0x3d, /* [634'0x27a] RETURNDATASIZE */
0x60, /* [635'0x27b] PUSH1 */
0x00,/* constant data */
0x80, /* [637'0x27d] DUP1 */
0x3e, /* [638'0x27e] RETURNDATACOPY */
0x3d, /* [639'0x27f] RETURNDATASIZE */
0x60, /* [640'0x280] PUSH1 */
0x00,/* constant data */
0xfd, /* [642'0x282] REVERT */
0x5b, /* [643'0x283] JUMPDEST */
0x50, /* [644'0x284] POP */
0x50, /* [645'0x285] POP */
0x50, /* [646'0x286] POP */
0x50, /* [647'0x287] POP */
0x60, /* [648'0x288] PUSH1 */
0x40,/* constant data */
0x51, /* [650'0x28a] MLOAD */
0x3d, /* [651'0x28b] RETURNDATASIZE */
0x60, /* [652'0x28c] PUSH1 */
0x20,/* constant data */
0x81, /* [654'0x28e] DUP2 */
0x10, /* [655'0x28f] LT */
0x15, /* [656'0x290] ISZERO */
0x61, /* [657'0x291] PUSH2 */
0x02,0x99,/* constant data */
0x57, /* [660'0x294] JUMPI */
0x60, /* [661'0x295] PUSH1 */
0x00,/* constant data */
0x80, /* [663'0x297] DUP1 */
0xfd, /* [664'0x298] REVERT */
0x5b, /* [665'0x299] JUMPDEST */
0x50, /* [666'0x29a] POP */
0x51, /* [667'0x29b] MLOAD */
0x15, /* [668'0x29c] ISZERO */
0x15, /* [669'0x29d] ISZERO */
0x61, /* [670'0x29e] PUSH2 */
0x02,0xa6,/* constant data */
0x57, /* [673'0x2a1] JUMPI */
0x60, /* [674'0x2a2] PUSH1 */
0x00,/* constant data */
0x80, /* [676'0x2a4] DUP1 */
0xfd, /* [677'0x2a5] REVERT */
0x5b, /* [678'0x2a6] JUMPDEST */
0x50, /* [679'0x2a7] POP */
0x60, /* [680'0x2a8] PUSH1 */
0x00,/* constant data */
0x5b, /* [682'0x2aa] JUMPDEST */
0x84, /* [683'0x2ab] DUP5 */
0x81, /* [684'0x2ac] DUP2 */
0x10, /* [685'0x2ad] LT */
0x15, /* [686'0x2ae] ISZERO */
0x61, /* [687'0x2af] PUSH2 */
0x03,0x83,/* constant data */
0x57, /* [690'0x2b2] JUMPI */
0x60, /* [691'0x2b3] PUSH1 */
0x01,/* constant data */
0x60, /* [693'0x2b5] PUSH1 */
0xa0,/* constant data */
0x60, /* [695'0x2b7] PUSH1 */
0x02,/* constant data */
0x0a, /* [697'0x2b9] EXP */
0x03, /* [698'0x2ba] SUB */
0x87, /* [699'0x2bb] DUP8 */
0x16, /* [700'0x2bc] AND */
0x63, /* [701'0x2bd] PUSH4 */
0xa9,0x05,0x9c,0xbb,/* constant data */
0x87, /* [706'0x2c2] DUP8 */
0x87, /* [707'0x2c3] DUP8 */
0x84, /* [708'0x2c4] DUP5 */
0x81, /* [709'0x2c5] DUP2 */
0x81, /* [710'0x2c6] DUP2 */
0x10, /* [711'0x2c7] LT */
0x61, /* [712'0x2c8] PUSH2 */
0x02,0xcd,/* constant data */
0x57, /* [715'0x2cb] JUMPI */
0xfe, /* [716'0x2cc] INVALID */
0x5b, /* [717'0x2cd] JUMPDEST */
0x90, /* [718'0x2ce] SWAP1 */
0x50, /* [719'0x2cf] POP */
0x60, /* [720'0x2d0] PUSH1 */
0x20,/* constant data */
0x02, /* [722'0x2d2] MUL */
0x01, /* [723'0x2d3] ADD */
0x35, /* [724'0x2d4] CALLDATALOAD */
0x60, /* [725'0x2d5] PUSH1 */
0x01,/* constant data */
0x60, /* [727'0x2d7] PUSH1 */
0xa0,/* constant data */
0x60, /* [729'0x2d9] PUSH1 */
0x02,/* constant data */
0x0a, /* [731'0x2db] EXP */
0x03, /* [732'0x2dc] SUB */
0x16, /* [733'0x2dd] AND */
0x86, /* [734'0x2de] DUP7 */
0x86, /* [735'0x2df] DUP7 */
0x85, /* [736'0x2e0] DUP6 */
0x81, /* [737'0x2e1] DUP2 */
0x81, /* [738'0x2e2] DUP2 */
0x10, /* [739'0x2e3] LT */
0x15, /* [740'0x2e4] ISZERO */
0x15, /* [741'0x2e5] ISZERO */
0x61, /* [742'0x2e6] PUSH2 */
0x02,0xeb,/* constant data */
0x57, /* [745'0x2e9] JUMPI */
0xfe, /* [746'0x2ea] INVALID */
0x5b, /* [747'0x2eb] JUMPDEST */
0x90, /* [748'0x2ec] SWAP1 */
0x50, /* [749'0x2ed] POP */
0x60, /* [750'0x2ee] PUSH1 */
0x20,/* constant data */
0x02, /* [752'0x2f0] MUL */
0x01, /* [753'0x2f1] ADD */
0x35, /* [754'0x2f2] CALLDATALOAD */
0x60, /* [755'0x2f3] PUSH1 */
0x40,/* constant data */
0x51, /* [757'0x2f5] MLOAD */
0x83, /* [758'0x2f6] DUP4 */
0x63, /* [759'0x2f7] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [764'0x2fc] AND */
0x60, /* [765'0x2fd] PUSH1 */
0xe0,/* constant data */
0x60, /* [767'0x2ff] PUSH1 */
0x02,/* constant data */
0x0a, /* [769'0x301] EXP */
0x02, /* [770'0x302] MUL */
0x81, /* [771'0x303] DUP2 */
0x52, /* [772'0x304] MSTORE */
0x60, /* [773'0x305] PUSH1 */
0x04,/* constant data */
0x01, /* [775'0x307] ADD */
0x80, /* [776'0x308] DUP1 */
0x83, /* [777'0x309] DUP4 */
0x60, /* [778'0x30a] PUSH1 */
0x01,/* constant data */
0x60, /* [780'0x30c] PUSH1 */
0xa0,/* constant data */
0x60, /* [782'0x30e] PUSH1 */
0x02,/* constant data */
0x0a, /* [784'0x310] EXP */
0x03, /* [785'0x311] SUB */
0x16, /* [786'0x312] AND */
0x60, /* [787'0x313] PUSH1 */
0x01,/* constant data */
0x60, /* [789'0x315] PUSH1 */
0xa0,/* constant data */
0x60, /* [791'0x317] PUSH1 */
0x02,/* constant data */
0x0a, /* [793'0x319] EXP */
0x03, /* [794'0x31a] SUB */
0x16, /* [795'0x31b] AND */
0x81, /* [796'0x31c] DUP2 */
0x52, /* [797'0x31d] MSTORE */
0x60, /* [798'0x31e] PUSH1 */
0x20,/* constant data */
0x01, /* [800'0x320] ADD */
0x82, /* [801'0x321] DUP3 */
0x81, /* [802'0x322] DUP2 */
0x52, /* [803'0x323] MSTORE */
0x60, /* [804'0x324] PUSH1 */
0x20,/* constant data */
0x01, /* [806'0x326] ADD */
0x92, /* [807'0x327] SWAP3 */
0x50, /* [808'0x328] POP */
0x50, /* [809'0x329] POP */
0x50, /* [810'0x32a] POP */
0x60, /* [811'0x32b] PUSH1 */
0x20,/* constant data */
0x60, /* [813'0x32d] PUSH1 */
0x40,/* constant data */
0x51, /* [815'0x32f] MLOAD */
0x80, /* [816'0x330] DUP1 */
0x83, /* [817'0x331] DUP4 */
0x03, /* [818'0x332] SUB */
0x81, /* [819'0x333] DUP2 */
0x60, /* [820'0x334] PUSH1 */
0x00,/* constant data */
0x87, /* [822'0x336] DUP8 */
0x80, /* [823'0x337] DUP1 */
0x3b, /* [824'0x338] EXTCODESIZE */
0x15, /* [825'0x339] ISZERO */
0x80, /* [826'0x33a] DUP1 */
0x15, /* [827'0x33b] ISZERO */
0x61, /* [828'0x33c] PUSH2 */
0x03,0x44,/* constant data */
0x57, /* [831'0x33f] JUMPI */
0x60, /* [832'0x340] PUSH1 */
0x00,/* constant data */
0x80, /* [834'0x342] DUP1 */
0xfd, /* [835'0x343] REVERT */
0x5b, /* [836'0x344] JUMPDEST */
0x50, /* [837'0x345] POP */
0x5a, /* [838'0x346] GAS */
0xf1, /* [839'0x347] CALL */
0x15, /* [840'0x348] ISZERO */
0x80, /* [841'0x349] DUP1 */
0x15, /* [842'0x34a] ISZERO */
0x61, /* [843'0x34b] PUSH2 */
0x03,0x58,/* constant data */
0x57, /* [846'0x34e] JUMPI */
0x3d, /* [847'0x34f] RETURNDATASIZE */
0x60, /* [848'0x350] PUSH1 */
0x00,/* constant data */
0x80, /* [850'0x352] DUP1 */
0x3e, /* [851'0x353] RETURNDATACOPY */
0x3d, /* [852'0x354] RETURNDATASIZE */
0x60, /* [853'0x355] PUSH1 */
0x00,/* constant data */
0xfd, /* [855'0x357] REVERT */
0x5b, /* [856'0x358] JUMPDEST */
0x50, /* [857'0x359] POP */
0x50, /* [858'0x35a] POP */
0x50, /* [859'0x35b] POP */
0x50, /* [860'0x35c] POP */
0x60, /* [861'0x35d] PUSH1 */
0x40,/* constant data */
0x51, /* [863'0x35f] MLOAD */
0x3d, /* [864'0x360] RETURNDATASIZE */
0x60, /* [865'0x361] PUSH1 */
0x20,/* constant data */
0x81, /* [867'0x363] DUP2 */
0x10, /* [868'0x364] LT */
0x15, /* [869'0x365] ISZERO */
0x61, /* [870'0x366] PUSH2 */
0x03,0x6e,/* constant data */
0x57, /* [873'0x369] JUMPI */
0x60, /* [874'0x36a] PUSH1 */
0x00,/* constant data */
0x80, /* [876'0x36c] DUP1 */
0xfd, /* [877'0x36d] REVERT */
0x5b, /* [878'0x36e] JUMPDEST */
0x50, /* [879'0x36f] POP */
0x51, /* [880'0x370] MLOAD */
0x15, /* [881'0x371] ISZERO */
0x15, /* [882'0x372] ISZERO */
0x61, /* [883'0x373] PUSH2 */
0x03,0x7b,/* constant data */
0x57, /* [886'0x376] JUMPI */
0x60, /* [887'0x377] PUSH1 */
0x00,/* constant data */
0x80, /* [889'0x379] DUP1 */
0xfd, /* [890'0x37a] REVERT */
0x5b, /* [891'0x37b] JUMPDEST */
0x60, /* [892'0x37c] PUSH1 */
0x01,/* constant data */
0x01, /* [894'0x37e] ADD */
0x61, /* [895'0x37f] PUSH2 */
0x02,0xaa,/* constant data */
0x56, /* [898'0x382] JUMP */
0x5b, /* [899'0x383] JUMPDEST */
0x50, /* [900'0x384] POP */
0x50, /* [901'0x385] POP */
0x50, /* [902'0x386] POP */
0x50, /* [903'0x387] POP */
0x50, /* [904'0x388] POP */
0x50, /* [905'0x389] POP */
0x50, /* [906'0x38a] POP */
0x56, /* [907'0x38b] JUMP */
0x5b, /* [908'0x38c] JUMPDEST */
0x60, /* [909'0x38d] PUSH1 */
0x00,/* constant data */
0x80, /* [911'0x38f] DUP1 */
0x5b, /* [912'0x390] JUMPDEST */
0x84, /* [913'0x391] DUP5 */
0x82, /* [914'0x392] DUP3 */
0x10, /* [915'0x393] LT */
0x15, /* [916'0x394] ISZERO */
0x61, /* [917'0x395] PUSH2 */
0x04,0x0c,/* constant data */
0x57, /* [920'0x398] JUMPI */
0x85, /* [921'0x399] DUP6 */
0x85, /* [922'0x39a] DUP6 */
0x83, /* [923'0x39b] DUP4 */
0x81, /* [924'0x39c] DUP2 */
0x81, /* [925'0x39d] DUP2 */
0x10, /* [926'0x39e] LT */
0x61, /* [927'0x39f] PUSH2 */
0x03,0xa4,/* constant data */
0x57, /* [930'0x3a2] JUMPI */
0xfe, /* [931'0x3a3] INVALID */
0x5b, /* [932'0x3a4] JUMPDEST */
0x90, /* [933'0x3a5] SWAP1 */
0x50, /* [934'0x3a6] POP */
0x60, /* [935'0x3a7] PUSH1 */
0x20,/* constant data */
0x02, /* [937'0x3a9] MUL */
0x01, /* [938'0x3aa] ADD */
0x35, /* [939'0x3ab] CALLDATALOAD */
0x60, /* [940'0x3ac] PUSH1 */
0x01,/* constant data */
0x60, /* [942'0x3ae] PUSH1 */
0xa0,/* constant data */
0x60, /* [944'0x3b0] PUSH1 */
0x02,/* constant data */
0x0a, /* [946'0x3b2] EXP */
0x03, /* [947'0x3b3] SUB */
0x16, /* [948'0x3b4] AND */
0x60, /* [949'0x3b5] PUSH1 */
0x01,/* constant data */
0x60, /* [951'0x3b7] PUSH1 */
0xa0,/* constant data */
0x60, /* [953'0x3b9] PUSH1 */
0x02,/* constant data */
0x0a, /* [955'0x3bb] EXP */
0x03, /* [956'0x3bc] SUB */
0x16, /* [957'0x3bd] AND */
0x61, /* [958'0x3be] PUSH2 */
0x08,0xfc,/* constant data */
0x85, /* [961'0x3c1] DUP6 */
0x85, /* [962'0x3c2] DUP6 */
0x85, /* [963'0x3c3] DUP6 */
0x81, /* [964'0x3c4] DUP2 */
0x81, /* [965'0x3c5] DUP2 */
0x10, /* [966'0x3c6] LT */
0x15, /* [967'0x3c7] ISZERO */
0x15, /* [968'0x3c8] ISZERO */
0x61, /* [969'0x3c9] PUSH2 */
0x03,0xce,/* constant data */
0x57, /* [972'0x3cc] JUMPI */
0xfe, /* [973'0x3cd] INVALID */
0x5b, /* [974'0x3ce] JUMPDEST */
0x90, /* [975'0x3cf] SWAP1 */
0x50, /* [976'0x3d0] POP */
0x60, /* [977'0x3d1] PUSH1 */
0x20,/* constant data */
0x02, /* [979'0x3d3] MUL */
0x01, /* [980'0x3d4] ADD */
0x35, /* [981'0x3d5] CALLDATALOAD */
0x90, /* [982'0x3d6] SWAP1 */
0x81, /* [983'0x3d7] DUP2 */
0x15, /* [984'0x3d8] ISZERO */
0x02, /* [985'0x3d9] MUL */
0x90, /* [986'0x3da] SWAP1 */
0x60, /* [987'0x3db] PUSH1 */
0x40,/* constant data */
0x51, /* [989'0x3dd] MLOAD */
0x60, /* [990'0x3de] PUSH1 */
0x00,/* constant data */
0x60, /* [992'0x3e0] PUSH1 */
0x40,/* constant data */
0x51, /* [994'0x3e2] MLOAD */
0x80, /* [995'0x3e3] DUP1 */
0x83, /* [996'0x3e4] DUP4 */
0x03, /* [997'0x3e5] SUB */
0x81, /* [998'0x3e6] DUP2 */
0x85, /* [999'0x3e7] DUP6 */
0x88, /* [1000'0x3e8] DUP9 */
0x88, /* [1001'0x3e9] DUP9 */
0xf1, /* [1002'0x3ea] CALL */
0x93, /* [1003'0x3eb] SWAP4 */
0x50, /* [1004'0x3ec] POP */
0x50, /* [1005'0x3ed] POP */
0x50, /* [1006'0x3ee] POP */
0x50, /* [1007'0x3ef] POP */
0x15, /* [1008'0x3f0] ISZERO */
0x80, /* [1009'0x3f1] DUP1 */
0x15, /* [1010'0x3f2] ISZERO */
0x61, /* [1011'0x3f3] PUSH2 */
0x04,0x00,/* constant data */
0x57, /* [1014'0x3f6] JUMPI */
0x3d, /* [1015'0x3f7] RETURNDATASIZE */
0x60, /* [1016'0x3f8] PUSH1 */
0x00,/* constant data */
0x80, /* [1018'0x3fa] DUP1 */
0x3e, /* [1019'0x3fb] RETURNDATACOPY */
0x3d, /* [1020'0x3fc] RETURNDATASIZE */
0x60, /* [1021'0x3fd] PUSH1 */
0x00,/* constant data */
0xfd, /* [1023'0x3ff] REVERT */
0x5b, /* [1024'0x400] JUMPDEST */
0x50, /* [1025'0x401] POP */
0x60, /* [1026'0x402] PUSH1 */
0x01,/* constant data */
0x90, /* [1028'0x404] SWAP1 */
0x91, /* [1029'0x405] SWAP2 */
0x01, /* [1030'0x406] ADD */
0x90, /* [1031'0x407] SWAP1 */
0x61, /* [1032'0x408] PUSH2 */
0x03,0x90,/* constant data */
0x56, /* [1035'0x40b] JUMP */
0x5b, /* [1036'0x40c] JUMPDEST */
0x50, /* [1037'0x40d] POP */
0x30, /* [1038'0x40e] ADDRESS */
0x31, /* [1039'0x40f] BALANCE */
0x60, /* [1040'0x410] PUSH1 */
0x00,/* constant data */
0x81, /* [1042'0x412] DUP2 */
0x11, /* [1043'0x413] GT */
0x15, /* [1044'0x414] ISZERO */
0x61, /* [1045'0x415] PUSH2 */
0x01,0xcb,/* constant data */
0x57, /* [1048'0x418] JUMPI */
0x60, /* [1049'0x419] PUSH1 */
0x40,/* constant data */
0x51, /* [1051'0x41b] MLOAD */
0x33, /* [1052'0x41c] CALLER */
0x90, /* [1053'0x41d] SWAP1 */
0x82, /* [1054'0x41e] DUP3 */
0x15, /* [1055'0x41f] ISZERO */
0x61, /* [1056'0x420] PUSH2 */
0x08,0xfc,/* constant data */
0x02, /* [1059'0x423] MUL */
0x90, /* [1060'0x424] SWAP1 */
0x83, /* [1061'0x425] DUP4 */
0x90, /* [1062'0x426] SWAP1 */
0x60, /* [1063'0x427] PUSH1 */
0x00,/* constant data */
0x81, /* [1065'0x429] DUP2 */
0x81, /* [1066'0x42a] DUP2 */
0x81, /* [1067'0x42b] DUP2 */
0x85, /* [1068'0x42c] DUP6 */
0x88, /* [1069'0x42d] DUP9 */
0x88, /* [1070'0x42e] DUP9 */
0xf1, /* [1071'0x42f] CALL */
0x93, /* [1072'0x430] SWAP4 */
0x50, /* [1073'0x431] POP */
0x50, /* [1074'0x432] POP */
0x50, /* [1075'0x433] POP */
0x50, /* [1076'0x434] POP */
0x15, /* [1077'0x435] ISZERO */
0x80, /* [1078'0x436] DUP1 */
0x15, /* [1079'0x437] ISZERO */
0x61, /* [1080'0x438] PUSH2 */
0x03,0x83,/* constant data */
0x57, /* [1083'0x43b] JUMPI */
0x3d, /* [1084'0x43c] RETURNDATASIZE */
0x60, /* [1085'0x43d] PUSH1 */
0x00,/* constant data */
0x80, /* [1087'0x43f] DUP1 */
0x3e, /* [1088'0x440] RETURNDATACOPY */
0x3d, /* [1089'0x441] RETURNDATASIZE */
0x60, /* [1090'0x442] PUSH1 */
0x00,/* constant data */
0xfd, /* [1092'0x444] REVERT */
0x00, /* [1093'0x445] STOP */
0xa1, /* [1094'0x446] LOG1 */
0x65, /* [1095'0x447] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [1102'0x44e] SHA3 */
0xcb, /* [1103'0x44f] INVALID' byte */
0xa0, /* [1104'0x450] LOG0 */
0xb1, /* [1105'0x451] INVALID' byte */
0x43, /* [1106'0x452] NUMBER */
0x9e, /* [1107'0x453] SWAP15 */
0x08, /* [1108'0x454] ADDMOD */
0x7b, /* [1109'0x455] PUSH28 */
0xa1,0xfc,0xad,0x51,0x97,0x35,0x22,0xf4,0x4f,0x03,0x41,0xe3,0x19,0xea,0x47,0x8a,0x41,0x08,0xdf,0xe0,0x4c,0x26,0x19,0xdc,0xce,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_Disperse::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_Disperse::_contract_name = "Disperse";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_Disperse> eevm::EVM2CPP_Disperse::reg{};
const std::string& eevm::EVM2CPP_Disperse::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_3d = 0x3d_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_42 = 0x42_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_4e = 0x4e_u256;
constexpr uint256_t c_64 = 0x64_u256;
constexpr uint256_t c_7b = 0x7b_u256;
constexpr uint256_t c_7d = 0x7d_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_89 = 0x89_u256;
constexpr uint256_t c_a0 = 0xa0_u256;
constexpr uint256_t c_b6 = 0xb6_u256;
constexpr uint256_t c_d5 = 0xd5_u256;
constexpr uint256_t c_d8 = 0xd8_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_fc = 0xfc_u256;
constexpr uint256_t c_11a = 0x11a_u256;
constexpr uint256_t c_18c = 0x18c_u256;
constexpr uint256_t c_1a0 = 0x1a0_u256;
constexpr uint256_t c_1b6 = 0x1b6_u256;
constexpr uint256_t c_1c3 = 0x1c3_u256;
constexpr uint256_t c_1cb = 0x1cb_u256;
constexpr uint256_t c_1d3 = 0x1d3_u256;
constexpr uint256_t c_1d7 = 0x1d7_u256;
constexpr uint256_t c_1eb = 0x1eb_u256;
constexpr uint256_t c_201 = 0x201_u256;
constexpr uint256_t c_26f = 0x26f_u256;
constexpr uint256_t c_283 = 0x283_u256;
constexpr uint256_t c_299 = 0x299_u256;
constexpr uint256_t c_2a6 = 0x2a6_u256;
constexpr uint256_t c_2aa = 0x2aa_u256;
constexpr uint256_t c_2cd = 0x2cd_u256;
constexpr uint256_t c_2eb = 0x2eb_u256;
constexpr uint256_t c_344 = 0x344_u256;
constexpr uint256_t c_358 = 0x358_u256;
constexpr uint256_t c_36e = 0x36e_u256;
constexpr uint256_t c_37b = 0x37b_u256;
constexpr uint256_t c_383 = 0x383_u256;
constexpr uint256_t c_38c = 0x38c_u256;
constexpr uint256_t c_390 = 0x390_u256;
constexpr uint256_t c_3a4 = 0x3a4_u256;
constexpr uint256_t c_3ce = 0x3ce_u256;
constexpr uint256_t c_400 = 0x400_u256;
constexpr uint256_t c_40c = 0x40c_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_23b872dd = 0x23b872dd_u256;
constexpr uint256_t c_51ba162c = 0x51ba162c_u256;
constexpr uint256_t c_a9059cbb = 0xa9059cbb_u256;
constexpr uint256_t c_c73a2d60 = 0xc73a2d60_u256;
constexpr uint256_t c_e63d38ed = 0xe63d38ed_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_61 = 0x627a7a723058_u256;
constexpr uint256_t g_20 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_18 = 0x10000000000000000000000000000000000000000_u256;
constexpr uint256_t g_62 = 0xa1fcad51973522f44f0341e319ea478a4108dfe04c2619dcce0029_u256;
constexpr uint256_t g_7 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_40 = 0x23b872dd00000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_Disperse::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_42,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_7b,
&&__invld,
&&pc_7d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_89,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d5,
&&__invld,
&&__invld,
&&pc_d8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_fc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_11a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_18c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1a0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1b6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1c3,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1cb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1d3,
&&__invld,
&&__invld,
&&__invld,
&&pc_1d7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1eb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_201,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_26f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_283,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_299,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2a6,
&&__invld,
&&__invld,
&&__invld,
&&pc_2aa,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2cd,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2eb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_344,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_358,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_36e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_37b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_383,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_38c,
&&__invld,
&&__invld,
&&__invld,
&&pc_390,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3a4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3ce,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_400,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_40c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [61] */

/* JUMPI */
/* op_0 = Constant((6, 61)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_3d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH4 */
/* val = [4294967295] */

/* PUSH1 */
/* val = [224] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((2, 2)) */
/* op_1 = Constant((1, 224)) */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((4, 0)) */
const uint256_t v_5_0 = calldataload_v(c_0);


/* DIV */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_6_0 = div_v(v_5_0, g_7);


/* AND */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((0, 4294967295)) */
const uint256_t v_7_0 = and_v(v_6_0, c_ffffffff);


/* PUSH4 */
/* val = [1371149868] */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* EQ */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((8, 1371149868)) */
const uint256_t v_10_0 = eq_v(v_7_0, c_51ba162c);


/* PUSH2 */
/* val = [66] */

/* JUMPI */
/* op_0 = Constant((11, 66)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((7, 0))*/
ctxt->s.push(v_7_0);
 
 goto pc_42;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((7, 0))*/
ctxt->s.push(v_7_0);
}pc_27:
{ /* <============ */ 
on_bb_start(39);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3342478688] */

/* EQ */
/* op_0 = Constant((1, 3342478688)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_c73a2d60, s_0_0);


/* PUSH2 */
/* val = [125] */

/* JUMPI */
/* op_0 = Constant((3, 125)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_7d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_32:
{ /* <============ */ 
on_bb_start(50);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3862771949] */

/* EQ */
/* op_0 = Constant((1, 3862771949)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_e63d38ed, s_0_0);


/* PUSH2 */
/* val = [182] */

/* JUMPI */
/* op_0 = Constant((3, 182)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3d:
{ /* <============ */ 
on_bb_start(61);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42:
{ /* <============ */ 
on_bb_start(66);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [78] */

/* JUMPI */
/* op_0 = Constant((4, 78)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_4e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_4a:
{ /* <============ */ 
on_bb_start(74);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4e:
{ /* <============ */ 
on_bb_start(78);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [123] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_5_0 = calldataload_v(c_4);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((8, 2)) */
/* op_1 = Constant((7, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((6, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_11_0 = and_v(g_20, v_5_0);


/* SWAP1 */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [36] */

/* DUP1 */
/* op_0 = Constant((13, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((13, 36)) */
const uint256_t v_15_0 = calldataload_v(c_24);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP3 */
/* op_0 = Constant((13, 36)) */
/* val = [36] */

/* ADD */
/* op_0 = Constant((13, 36)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = add_v(c_24, v_15_0);


/* SWAP3 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((15, 0)) */

/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_22_0 = add_v(c_4, v_15_0);


/* CALLDATALOAD */
/* op_0 = InstructionRef((22, 0)) */
const uint256_t v_23_0 = calldataload_v(v_22_0);


/* SWAP2 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((13, 36)) */

/* PUSH1 */
/* val = [68] */

/* CALLDATALOAD */
/* op_0 = Constant((25, 68)) */
const uint256_t v_26_0 = calldataload_v(c_44);


/* SWAP1 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = Constant((13, 36)) */

/* DUP2 */
/* op_0 = InstructionRef((26, 0)) */

/* ADD */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = Constant((13, 36)) */
const uint256_t v_29_0 = add_v(v_26_0, c_24);


/* SWAP2 */
/* op_0 = InstructionRef((29, 0)) */
/* op_1 = Constant((3, 4)) */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_31_0 = add_v(c_4, v_26_0);


/* CALLDATALOAD */
/* op_0 = InstructionRef((31, 0)) */
const uint256_t v_32_0 = calldataload_v(v_31_0);


/* PUSH2 */
/* val = [213] */

/* JUMP */
/* op_0 = Constant((33, 213)) */
/* BB finalizer */
ctxt->s.set(0, c_7b);
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);
/* BB return 1 InstructionRef((18, 0))*/
ctxt->s.push(v_18_0);
/* BB return 2 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);
/* BB return 3 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
/* BB return 4 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);

goto pc_d5;


}pc_7b:
{ /* <============ */ 
on_bb_start(123);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7d:
{ /* <============ */ 
on_bb_start(125);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [137] */

/* JUMPI */
/* op_0 = Constant((4, 137)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_89;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_85:
{ /* <============ */ 
on_bb_start(133);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_89:
{ /* <============ */ 
on_bb_start(137);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [123] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_5_0 = calldataload_v(c_4);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((8, 2)) */
/* op_1 = Constant((7, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((6, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_11_0 = and_v(g_20, v_5_0);


/* SWAP1 */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [36] */

/* DUP1 */
/* op_0 = Constant((13, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((13, 36)) */
const uint256_t v_15_0 = calldataload_v(c_24);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP3 */
/* op_0 = Constant((13, 36)) */
/* val = [36] */

/* ADD */
/* op_0 = Constant((13, 36)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = add_v(c_24, v_15_0);


/* SWAP3 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((15, 0)) */

/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_22_0 = add_v(c_4, v_15_0);


/* CALLDATALOAD */
/* op_0 = InstructionRef((22, 0)) */
const uint256_t v_23_0 = calldataload_v(v_22_0);


/* SWAP2 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((13, 36)) */

/* PUSH1 */
/* val = [68] */

/* CALLDATALOAD */
/* op_0 = Constant((25, 68)) */
const uint256_t v_26_0 = calldataload_v(c_44);


/* SWAP1 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = Constant((13, 36)) */

/* DUP2 */
/* op_0 = InstructionRef((26, 0)) */

/* ADD */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = Constant((13, 36)) */
const uint256_t v_29_0 = add_v(v_26_0, c_24);


/* SWAP2 */
/* op_0 = InstructionRef((29, 0)) */
/* op_1 = Constant((3, 4)) */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_31_0 = add_v(c_4, v_26_0);


/* CALLDATALOAD */
/* op_0 = InstructionRef((31, 0)) */
const uint256_t v_32_0 = calldataload_v(v_31_0);


/* PUSH2 */
/* val = [467] */

/* JUMP */
/* op_0 = Constant((33, 467)) */
/* BB finalizer */
ctxt->s.set(0, c_7b);
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);
/* BB return 1 InstructionRef((18, 0))*/
ctxt->s.push(v_18_0);
/* BB return 2 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);
/* BB return 3 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
/* BB return 4 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);

goto pc_1d3;


}pc_b6:
{ /* <============ */ 
on_bb_start(182);
/* JUMPDEST */

/* PUSH2 */
/* val = [123] */

/* PUSH1 */
/* val = [36] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_5_0 = calldataload_v(c_4);


/* DUP3 */
/* op_0 = Constant((2, 36)) */
/* val = [36] */

/* DUP2 */
/* op_0 = InstructionRef((5, 0)) */

/* ADD */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((2, 36)) */
const uint256_t v_8_0 = add_v(v_5_0, c_24);


/* SWAP3 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((2, 36)) */

/* SWAP1 */
/* op_0 = Constant((2, 36)) */
/* op_1 = InstructionRef((5, 0)) */

/* DUP3 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_12_0 = add_v(c_4, v_5_0);


/* CALLDATALOAD */
/* op_0 = InstructionRef((12, 0)) */
const uint256_t v_13_0 = calldataload_v(v_12_0);


/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP2 */
/* op_0 = Constant((2, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((2, 36)) */
const uint256_t v_16_0 = calldataload_v(c_24);


/* SWAP2 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((2, 36)) */

/* DUP3 */
/* op_0 = InstructionRef((16, 0)) */

/* ADD */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((2, 36)) */
const uint256_t v_19_0 = add_v(v_16_0, c_24);


/* SWAP2 */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((16, 0)) */

/* ADD */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_21_0 = add_v(v_16_0, c_4);


/* CALLDATALOAD */
/* op_0 = InstructionRef((21, 0)) */
const uint256_t v_22_0 = calldataload_v(v_21_0);


/* PUSH2 */
/* val = [908] */

/* JUMP */
/* op_0 = Constant((23, 908)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 123))*/
ctxt->s.push(c_7b);
/* BB return 1 InstructionRef((8, 0))*/
ctxt->s.push(v_8_0);
/* BB return 2 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 3 InstructionRef((19, 0))*/
ctxt->s.push(v_19_0);
/* BB return 4 InstructionRef((22, 0))*/
ctxt->s.push(v_22_0);

goto pc_38c;


}pc_d5:
{ /* <============ */ 
on_bb_start(213);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
}pc_d8:
{ /* <============ */ 
on_bb_start(216);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_3);
const uint256_t v_3_0 = lt_v(s_0_0, s_0_3);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [459] */

/* JUMPI */
/* op_0 = Constant((5, 459)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1cb;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_e1:
{ /* <============ */ 
on_bb_start(225);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((2, 2)) */
/* op_1 = Constant((1, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((3, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((0, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* DUP7 */
/* op_0 = StackRef((0, 5)) */

/* AND */
/* op_0 = StackRef((0, 5)) */
/* op_1 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
const uint256_t v_6_0 = and_v(s_0_5, g_20);


/* PUSH4 */
/* val = [599290589] */

/* CALLER */
const uint256_t v_8_0 = caller_v();


/* DUP8 */
/* op_0 = StackRef((0, 4)) */

/* DUP8 */
/* op_0 = StackRef((0, 3)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = StackRef((0, 3)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_3);
const uint256_t v_14_0 = lt_v(s_0_0, s_0_3);


/* PUSH2 */
/* val = [252] */

/* JUMPI */
/* op_0 = Constant((15, 252)) */
/* op_1 = InstructionRef((14, 0)) */
if ( v_14_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 Constant((7, 599290589))*/
ctxt->s.push(c_23b872dd);
/* BB return 2 InstructionRef((8, 0))*/
ctxt->s.push(v_8_0);
/* BB return 3 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 4 StackRef((0, 3))*/
ctxt->s.push(s_0_3);
/* BB return 5 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
 
 goto pc_fc;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 Constant((7, 599290589))*/
ctxt->s.push(c_23b872dd);
/* BB return 2 InstructionRef((8, 0))*/
ctxt->s.push(v_8_0);
/* BB return 3 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 4 StackRef((0, 3))*/
ctxt->s.push(s_0_3);
/* BB return 5 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_fb:
{ /* <============ */ 
on_bb_start(251);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_fc:
{ /* <============ */ 
on_bb_start(252);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_6 = ctxt->s.peek(6);
const uint256_t s_0_7 = ctxt->s.peek(7);
const uint256_t s_0_8 = ctxt->s.peek(8);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((9, 2)) */
/* op_1 = Constant((8, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((7, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_12_0 = and_v(g_20, v_6_0);


/* DUP7 */
/* op_0 = StackRef((0, 8)) */

/* DUP7 */
/* op_0 = StackRef((0, 7)) */

/* DUP7 */
/* op_0 = StackRef((0, 6)) */

/* DUP2 */
/* op_0 = StackRef((0, 7)) */

/* DUP2 */
/* op_0 = StackRef((0, 6)) */

/* LT */
/* op_0 = StackRef((0, 6)) */
/* op_1 = StackRef((0, 7)) */
TRACE_COMP(eevm::Opcode::LT, s_0_6, s_0_7);
const uint256_t v_18_0 = lt_v(s_0_6, s_0_7);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* ISZERO */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_20_0 = iszero_v(v_19_0);


/* PUSH2 */
/* val = [282] */

/* JUMPI */
/* op_0 = Constant((21, 282)) */
/* op_1 = InstructionRef((20, 0)) */
if ( v_20_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, s_0_7);

ctxt->s.set(1, s_0_8);

ctxt->s.set(2, v_12_0);
/* no pops at end */
/* BB return 0 StackRef((0, 6))*/
ctxt->s.push(s_0_6);
 
 goto pc_11a;
 
 }

/* BB finalizer */
ctxt->s.set(0, s_0_7);

ctxt->s.set(1, s_0_8);

ctxt->s.set(2, v_12_0);
/* no pops at end */
/* BB return 0 StackRef((0, 6))*/
ctxt->s.push(s_0_6);
}pc_119:
{ /* <============ */ 
on_bb_start(281);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_11a:
{ /* <============ */ 
on_bb_start(282);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((7, 64)) */
const uint256_t v_8_0 = mload_v(c_40);


/* DUP5 */
/* op_0 = StackRef((0, 5)) */

/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((10, 4294967295)) */
/* op_1 = StackRef((0, 5)) */
const uint256_t v_11_0 = and_v(c_ffffffff, s_0_5);


/* PUSH1 */
/* val = [224] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((13, 2)) */
/* op_1 = Constant((12, 224)) */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* MUL */
/* op_0 = Constant((14, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_15_0 = mul_v(g_7, v_11_0);


/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((15, 0)) */
mstore_v(v_8_0, v_15_0);


/* PUSH1 */
/* val = [4] */

/* ADD */
/* op_0 = Constant((18, 4)) */
/* op_1 = InstructionRef((8, 0)) */
const uint256_t v_19_0 = add_v(c_4, v_8_0);


/* DUP1 */
/* op_0 = InstructionRef((19, 0)) */

/* DUP5 */
/* op_0 = StackRef((0, 4)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((24, 2)) */
/* op_1 = Constant((23, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((25, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((22, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((26, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 4)) */
const uint256_t v_27_0 = and_v(g_20, s_0_4);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((30, 2)) */
/* op_1 = Constant((29, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((31, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((28, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((32, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((27, 0)) */
const uint256_t v_33_0 = and_v(g_20, v_27_0);


/* DUP2 */
/* op_0 = InstructionRef((19, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((33, 0)) */
mstore_v(v_19_0, v_33_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((36, 32)) */
/* op_1 = InstructionRef((19, 0)) */
const uint256_t v_37_0 = add_v(c_20, v_19_0);


/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((41, 2)) */
/* op_1 = Constant((40, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((42, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((39, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((43, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_44_0 = and_v(g_20, s_0_3);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((47, 2)) */
/* op_1 = Constant((46, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((48, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((45, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((49, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((44, 0)) */
const uint256_t v_50_0 = and_v(g_20, v_44_0);


/* DUP2 */
/* op_0 = InstructionRef((37, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((50, 0)) */
mstore_v(v_37_0, v_50_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((53, 32)) */
/* op_1 = InstructionRef((37, 0)) */
const uint256_t v_54_0 = add_v(c_20, v_37_0);


/* DUP3 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((54, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((54, 0)) */
/* op_1 = InstructionRef((6, 0)) */
mstore_v(v_54_0, v_6_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((58, 32)) */
/* op_1 = InstructionRef((54, 0)) */
const uint256_t v_59_0 = add_v(c_20, v_54_0);


/* SWAP4 */
/* op_0 = InstructionRef((59, 0)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((66, 64)) */
const uint256_t v_67_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((67, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((59, 0)) */

/* SUB */
/* op_0 = InstructionRef((59, 0)) */
/* op_1 = InstructionRef((67, 0)) */
const uint256_t v_70_0 = sub_v(v_59_0, v_67_0);


/* DUP2 */
/* op_0 = InstructionRef((67, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP8 */
/* op_0 = StackRef((0, 6)) */

/* DUP1 */
/* op_0 = StackRef((0, 6)) */

/* EXTCODESIZE */
/* op_0 = StackRef((0, 6)) */
const uint256_t v_75_0 = extcodesize_v(s_0_6);


/* ISZERO */
/* op_0 = InstructionRef((75, 0)) */
const uint256_t v_76_0 = iszero_v(v_75_0);


/* DUP1 */
/* op_0 = InstructionRef((76, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((76, 0)) */
const uint256_t v_78_0 = iszero_v(v_76_0);


/* PUSH2 */
/* val = [396] */

/* JUMPI */
/* op_0 = Constant((79, 396)) */
/* op_1 = InstructionRef((78, 0)) */
if ( v_78_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_67_0);

ctxt->s.set(1, v_70_0);

ctxt->s.set(2, v_67_0);

ctxt->s.set(3, c_20);

ctxt->s.set(4, v_59_0);
/* no pops at end */
/* BB return 0 Constant((72, 0))*/
ctxt->s.push(c_0);
/* BB return 1 StackRef((0, 6))*/
ctxt->s.push(s_0_6);
/* BB return 2 InstructionRef((76, 0))*/
ctxt->s.push(v_76_0);
 
 goto pc_18c;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_67_0);

ctxt->s.set(1, v_70_0);

ctxt->s.set(2, v_67_0);

ctxt->s.set(3, c_20);

ctxt->s.set(4, v_59_0);
/* no pops at end */
/* BB return 0 Constant((72, 0))*/
ctxt->s.push(c_0);
/* BB return 1 StackRef((0, 6))*/
ctxt->s.push(s_0_6);
/* BB return 2 InstructionRef((76, 0))*/
ctxt->s.push(v_76_0);
}pc_188:
{ /* <============ */ 
on_bb_start(392);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_18c:
{ /* <============ */ 
on_bb_start(396);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* GAS */
const uint256_t v_2_0 = gas_v();


/* CALL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
/* op_4 = StackRef((0, 4)) */
/* op_5 = StackRef((0, 5)) */
/* op_6 = StackRef((0, 6)) */
const uint256_t v_3_0 = call_v(v_2_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5, s_0_6);
if (ctxt->error) goto exit_label;


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [416] */

/* JUMPI */
/* op_0 = Constant((7, 416)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
 
 goto pc_1a0;
 
 }

/* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
}pc_197:
{ /* <============ */ 
on_bb_start(407);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a0:
{ /* <============ */ 
on_bb_start(416);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((5, 64)) */
const uint256_t v_6_0 = mload_v(c_40);


/* RETURNDATASIZE */
const uint256_t v_7_0 = returndatasize_v();


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* LT */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((8, 32)) */
const uint256_t v_10_0 = lt_v(v_7_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = iszero_v(v_10_0);


/* PUSH2 */
/* val = [438] */

/* JUMPI */
/* op_0 = Constant((12, 438)) */
/* op_1 = InstructionRef((11, 0)) */
if ( v_11_0 ) { 
 /* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_1b6;
 
 }

/* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_1b2:
{ /* <============ */ 
on_bb_start(434);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1b6:
{ /* <============ */ 
on_bb_start(438);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* MLOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = mload_v(s_0_1);


/* ISZERO */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = iszero_v(v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [451] */

/* JUMPI */
/* op_0 = Constant((5, 451)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_1c3;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_1bf:
{ /* <============ */ 
on_bb_start(447);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1c3:
{ /* <============ */ 
on_bb_start(451);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* ADD */
/* op_0 = Constant((1, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(c_1, s_0_0);


/* PUSH2 */
/* val = [216] */

/* JUMP */
/* op_0 = Constant((3, 216)) */
/* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */

goto pc_d8;


}pc_1cb:
{ /* <============ */ 
on_bb_start(459);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 6)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(7);
/* no BB returns */

JUMP(s_0_6);


}pc_1d3:
{ /* <============ */ 
on_bb_start(467);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((1, 0))*/
ctxt->s.push(c_0);
}pc_1d7:
{ /* <============ */ 
on_bb_start(471);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* DUP5 */
/* op_0 = StackRef((0, 4)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_4);
const uint256_t v_3_0 = lt_v(s_0_0, s_0_4);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [513] */

/* JUMPI */
/* op_0 = Constant((5, 513)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_201;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1e0:
{ /* <============ */ 
on_bb_start(480);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* DUP4 */
/* op_0 = StackRef((0, 2)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = StackRef((0, 2)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_2);
const uint256_t v_5_0 = lt_v(s_0_0, s_0_2);


/* PUSH2 */
/* val = [491] */

/* JUMPI */
/* op_0 = Constant((6, 491)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 3))*/
ctxt->s.push(s_0_3);
/* BB return 1 StackRef((0, 2))*/
ctxt->s.push(s_0_2);
/* BB return 2 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
 
 goto pc_1eb;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 3))*/
ctxt->s.push(s_0_3);
/* BB return 1 StackRef((0, 2))*/
ctxt->s.push(s_0_2);
/* BB return 2 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_1ea:
{ /* <============ */ 
on_bb_start(490);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1eb:
{ /* <============ */ 
on_bb_start(491);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((1, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = mul_v(c_20, s_0_0);


/* SWAP2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 2)) */

/* SWAP1 */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP2 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((2, 0)) */

/* ADD */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_6_0 = add_v(v_2_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((6, 0)) */
const uint256_t v_7_0 = calldataload_v(v_6_0);


/* SWAP3 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = StackRef((0, 4)) */

/* SWAP1 */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP3 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((7, 0)) */

/* ADD */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = StackRef((0, 4)) */
const uint256_t v_11_0 = add_v(v_7_0, s_0_4);


/* SWAP2 */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [1] */

/* ADD */
/* op_0 = Constant((14, 1)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_15_0 = add_v(c_1, s_0_3);


/* PUSH2 */
/* val = [471] */

/* JUMP */
/* op_0 = Constant((16, 471)) */
/* BB finalizer */
ctxt->s.set(3, v_15_0);

ctxt->s.set(4, v_11_0);
ctxt->s.pop_drop_n(3);
/* no BB returns */

goto pc_1d7;


}pc_201:
{ /* <============ */ 
on_bb_start(513);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((1, 64)) */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_3_0 = mload_v(c_40);


/* PUSH32 */
/* val = [16156842317565293874272834530371880720966471053262404558597773956279093428224] */

/* DUP2 */
/* op_0 = InstructionRef((3, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((4, 16156842317565293874272834530371880720966471053262404558597773956279093428224)) */
mstore_v(v_3_0, g_40);


/* CALLER */
const uint256_t v_7_0 = caller_v();


/* PUSH1 */
/* val = [4] */

/* DUP3 */
/* op_0 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((8, 4)) */
const uint256_t v_10_0 = add_v(v_3_0, c_4);


/* MSTORE */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(v_10_0, v_7_0);


/* ADDRESS */
const uint256_t v_12_0 = address_v();


/* PUSH1 */
/* val = [36] */

/* DUP3 */
/* op_0 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((13, 36)) */
const uint256_t v_15_0 = add_v(v_3_0, c_24);


/* MSTORE */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((12, 0)) */
mstore_v(v_15_0, v_12_0);


/* PUSH1 */
/* val = [68] */

/* DUP2 */
/* op_0 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((17, 68)) */
const uint256_t v_19_0 = add_v(v_3_0, c_44);


/* DUP5 */
/* op_0 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((19, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore_v(v_19_0, s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 64)) */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_24_0 = mload_v(c_40);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((27, 2)) */
/* op_1 = Constant((26, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((28, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((25, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* DUP10 */
/* op_0 = StackRef((0, 6)) */

/* AND */
/* op_0 = StackRef((0, 6)) */
/* op_1 = Constant((29, 1461501637330902918203684832716283019655932542975)) */
const uint256_t v_31_0 = and_v(s_0_6, g_20);


/* SWAP2 */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* PUSH4 */
/* val = [599290589] */

/* SWAP2 */
/* op_0 = Constant((33, 599290589)) */
/* op_1 = InstructionRef((24, 0)) */

/* PUSH1 */
/* val = [100] */

/* DUP1 */
/* op_0 = Constant((35, 100)) */
/* val = [100] */

/* DUP4 */
/* op_0 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((35, 100)) */
const uint256_t v_38_0 = add_v(v_3_0, c_64);


/* SWAP3 */
/* op_0 = InstructionRef((38, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* PUSH1 */
/* val = [32] */

/* SWAP3 */
/* op_0 = Constant((40, 32)) */
/* op_1 = InstructionRef((24, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = Constant((35, 100)) */

/* SWAP1 */
/* op_0 = Constant((35, 100)) */
/* op_1 = InstructionRef((3, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((24, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* SUB */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((24, 0)) */
const uint256_t v_46_0 = sub_v(v_3_0, v_24_0);


/* ADD */
/* op_0 = InstructionRef((46, 0)) */
/* op_1 = Constant((35, 100)) */
const uint256_t v_47_0 = add_v(v_46_0, c_64);


/* DUP2 */
/* op_0 = InstructionRef((24, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP8 */
/* op_0 = InstructionRef((31, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((31, 0)) */

/* EXTCODESIZE */
/* op_0 = InstructionRef((31, 0)) */
const uint256_t v_52_0 = extcodesize_v(v_31_0);


/* ISZERO */
/* op_0 = InstructionRef((52, 0)) */
const uint256_t v_53_0 = iszero_v(v_52_0);


/* DUP1 */
/* op_0 = InstructionRef((53, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((53, 0)) */
const uint256_t v_55_0 = iszero_v(v_53_0);


/* PUSH2 */
/* val = [623] */

/* JUMPI */
/* op_0 = Constant((56, 623)) */
/* op_1 = InstructionRef((55, 0)) */
if ( v_55_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((31, 0))*/
ctxt->s.push(v_31_0);
/* BB return 1 Constant((33, 599290589))*/
ctxt->s.push(c_23b872dd);
/* BB return 2 InstructionRef((38, 0))*/
ctxt->s.push(v_38_0);
/* BB return 3 Constant((40, 32))*/
ctxt->s.push(c_20);
/* BB return 4 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 5 InstructionRef((47, 0))*/
ctxt->s.push(v_47_0);
/* BB return 6 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 7 Constant((49, 0))*/
ctxt->s.push(c_0);
/* BB return 8 InstructionRef((31, 0))*/
ctxt->s.push(v_31_0);
/* BB return 9 InstructionRef((53, 0))*/
ctxt->s.push(v_53_0);
 
 goto pc_26f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((31, 0))*/
ctxt->s.push(v_31_0);
/* BB return 1 Constant((33, 599290589))*/
ctxt->s.push(c_23b872dd);
/* BB return 2 InstructionRef((38, 0))*/
ctxt->s.push(v_38_0);
/* BB return 3 Constant((40, 32))*/
ctxt->s.push(c_20);
/* BB return 4 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 5 InstructionRef((47, 0))*/
ctxt->s.push(v_47_0);
/* BB return 6 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 7 Constant((49, 0))*/
ctxt->s.push(c_0);
/* BB return 8 InstructionRef((31, 0))*/
ctxt->s.push(v_31_0);
/* BB return 9 InstructionRef((53, 0))*/
ctxt->s.push(v_53_0);
}pc_26b:
{ /* <============ */ 
on_bb_start(619);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_26f:
{ /* <============ */ 
on_bb_start(623);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* GAS */
const uint256_t v_2_0 = gas_v();


/* CALL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
/* op_4 = StackRef((0, 4)) */
/* op_5 = StackRef((0, 5)) */
/* op_6 = StackRef((0, 6)) */
const uint256_t v_3_0 = call_v(v_2_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5, s_0_6);
if (ctxt->error) goto exit_label;


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [643] */

/* JUMPI */
/* op_0 = Constant((7, 643)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
 
 goto pc_283;
 
 }

/* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
}pc_27a:
{ /* <============ */ 
on_bb_start(634);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_283:
{ /* <============ */ 
on_bb_start(643);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((5, 64)) */
const uint256_t v_6_0 = mload_v(c_40);


/* RETURNDATASIZE */
const uint256_t v_7_0 = returndatasize_v();


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* LT */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((8, 32)) */
const uint256_t v_10_0 = lt_v(v_7_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = iszero_v(v_10_0);


/* PUSH2 */
/* val = [665] */

/* JUMPI */
/* op_0 = Constant((12, 665)) */
/* op_1 = InstructionRef((11, 0)) */
if ( v_11_0 ) { 
 /* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_299;
 
 }

/* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_295:
{ /* <============ */ 
on_bb_start(661);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_299:
{ /* <============ */ 
on_bb_start(665);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* MLOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = mload_v(s_0_1);


/* ISZERO */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = iszero_v(v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [678] */

/* JUMPI */
/* op_0 = Constant((5, 678)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_2a6;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_2a2:
{ /* <============ */ 
on_bb_start(674);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2a6:
{ /* <============ */ 
on_bb_start(678);
/* JUMPDEST */

/* POP */

/* PUSH1 */
/* val = [0] */

/* BB finalizer */
ctxt->s.set(0, c_0);
/* no pops at end */
/* no BB returns */
}pc_2aa:
{ /* <============ */ 
on_bb_start(682);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* DUP5 */
/* op_0 = StackRef((0, 4)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_4);
const uint256_t v_3_0 = lt_v(s_0_0, s_0_4);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [899] */

/* JUMPI */
/* op_0 = Constant((5, 899)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_383;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2b3:
{ /* <============ */ 
on_bb_start(691);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((2, 2)) */
/* op_1 = Constant((1, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((3, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((0, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* DUP8 */
/* op_0 = StackRef((0, 6)) */

/* AND */
/* op_0 = StackRef((0, 6)) */
/* op_1 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
const uint256_t v_6_0 = and_v(s_0_6, g_20);


/* PUSH4 */
/* val = [2835717307] */

/* DUP8 */
/* op_0 = StackRef((0, 5)) */

/* DUP8 */
/* op_0 = StackRef((0, 4)) */

/* DUP5 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = StackRef((0, 4)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_4);
const uint256_t v_13_0 = lt_v(s_0_0, s_0_4);


/* PUSH2 */
/* val = [717] */

/* JUMPI */
/* op_0 = Constant((14, 717)) */
/* op_1 = InstructionRef((13, 0)) */
if ( v_13_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 Constant((7, 2835717307))*/
ctxt->s.push(c_a9059cbb);
/* BB return 2 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 3 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 4 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
 
 goto pc_2cd;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 Constant((7, 2835717307))*/
ctxt->s.push(c_a9059cbb);
/* BB return 2 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 3 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 4 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_2cc:
{ /* <============ */ 
on_bb_start(716);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2cd:
{ /* <============ */ 
on_bb_start(717);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_7 = ctxt->s.peek(7);
const uint256_t s_0_8 = ctxt->s.peek(8);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((9, 2)) */
/* op_1 = Constant((8, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((7, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_12_0 = and_v(g_20, v_6_0);


/* DUP7 */
/* op_0 = StackRef((0, 8)) */

/* DUP7 */
/* op_0 = StackRef((0, 7)) */

/* DUP6 */
/* op_0 = StackRef((0, 5)) */

/* DUP2 */
/* op_0 = StackRef((0, 7)) */

/* DUP2 */
/* op_0 = StackRef((0, 5)) */

/* LT */
/* op_0 = StackRef((0, 5)) */
/* op_1 = StackRef((0, 7)) */
TRACE_COMP(eevm::Opcode::LT, s_0_5, s_0_7);
const uint256_t v_18_0 = lt_v(s_0_5, s_0_7);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* ISZERO */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_20_0 = iszero_v(v_19_0);


/* PUSH2 */
/* val = [747] */

/* JUMPI */
/* op_0 = Constant((21, 747)) */
/* op_1 = InstructionRef((20, 0)) */
if ( v_20_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, s_0_7);

ctxt->s.set(1, s_0_8);

ctxt->s.set(2, v_12_0);
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
 
 goto pc_2eb;
 
 }

/* BB finalizer */
ctxt->s.set(0, s_0_7);

ctxt->s.set(1, s_0_8);

ctxt->s.set(2, v_12_0);
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
}pc_2ea:
{ /* <============ */ 
on_bb_start(746);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2eb:
{ /* <============ */ 
on_bb_start(747);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((7, 64)) */
const uint256_t v_8_0 = mload_v(c_40);


/* DUP4 */
/* op_0 = StackRef((0, 4)) */

/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((10, 4294967295)) */
/* op_1 = StackRef((0, 4)) */
const uint256_t v_11_0 = and_v(c_ffffffff, s_0_4);


/* PUSH1 */
/* val = [224] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((13, 2)) */
/* op_1 = Constant((12, 224)) */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* MUL */
/* op_0 = Constant((14, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_15_0 = mul_v(g_7, v_11_0);


/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((15, 0)) */
mstore_v(v_8_0, v_15_0);


/* PUSH1 */
/* val = [4] */

/* ADD */
/* op_0 = Constant((18, 4)) */
/* op_1 = InstructionRef((8, 0)) */
const uint256_t v_19_0 = add_v(c_4, v_8_0);


/* DUP1 */
/* op_0 = InstructionRef((19, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((24, 2)) */
/* op_1 = Constant((23, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((25, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((22, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((26, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_27_0 = and_v(g_20, s_0_3);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((30, 2)) */
/* op_1 = Constant((29, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((31, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((28, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((32, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((27, 0)) */
const uint256_t v_33_0 = and_v(g_20, v_27_0);


/* DUP2 */
/* op_0 = InstructionRef((19, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((33, 0)) */
mstore_v(v_19_0, v_33_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((36, 32)) */
/* op_1 = InstructionRef((19, 0)) */
const uint256_t v_37_0 = add_v(c_20, v_19_0);


/* DUP3 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((37, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((6, 0)) */
mstore_v(v_37_0, v_6_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((41, 32)) */
/* op_1 = InstructionRef((37, 0)) */
const uint256_t v_42_0 = add_v(c_20, v_37_0);


/* SWAP3 */
/* op_0 = InstructionRef((42, 0)) */
/* op_1 = StackRef((0, 3)) */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((48, 64)) */
const uint256_t v_49_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((49, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((42, 0)) */

/* SUB */
/* op_0 = InstructionRef((42, 0)) */
/* op_1 = InstructionRef((49, 0)) */
const uint256_t v_52_0 = sub_v(v_42_0, v_49_0);


/* DUP2 */
/* op_0 = InstructionRef((49, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP8 */
/* op_0 = StackRef((0, 5)) */

/* DUP1 */
/* op_0 = StackRef((0, 5)) */

/* EXTCODESIZE */
/* op_0 = StackRef((0, 5)) */
const uint256_t v_57_0 = extcodesize_v(s_0_5);


/* ISZERO */
/* op_0 = InstructionRef((57, 0)) */
const uint256_t v_58_0 = iszero_v(v_57_0);


/* DUP1 */
/* op_0 = InstructionRef((58, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((58, 0)) */
const uint256_t v_60_0 = iszero_v(v_58_0);


/* PUSH2 */
/* val = [836] */

/* JUMPI */
/* op_0 = Constant((61, 836)) */
/* op_1 = InstructionRef((60, 0)) */
if ( v_60_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_52_0);

ctxt->s.set(1, v_49_0);

ctxt->s.set(2, c_20);

ctxt->s.set(3, v_42_0);
/* no pops at end */
/* BB return 0 InstructionRef((49, 0))*/
ctxt->s.push(v_49_0);
/* BB return 1 Constant((54, 0))*/
ctxt->s.push(c_0);
/* BB return 2 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 3 InstructionRef((58, 0))*/
ctxt->s.push(v_58_0);
 
 goto pc_344;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_52_0);

ctxt->s.set(1, v_49_0);

ctxt->s.set(2, c_20);

ctxt->s.set(3, v_42_0);
/* no pops at end */
/* BB return 0 InstructionRef((49, 0))*/
ctxt->s.push(v_49_0);
/* BB return 1 Constant((54, 0))*/
ctxt->s.push(c_0);
/* BB return 2 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 3 InstructionRef((58, 0))*/
ctxt->s.push(v_58_0);
}pc_340:
{ /* <============ */ 
on_bb_start(832);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_344:
{ /* <============ */ 
on_bb_start(836);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* GAS */
const uint256_t v_2_0 = gas_v();


/* CALL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
/* op_4 = StackRef((0, 4)) */
/* op_5 = StackRef((0, 5)) */
/* op_6 = StackRef((0, 6)) */
const uint256_t v_3_0 = call_v(v_2_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5, s_0_6);
if (ctxt->error) goto exit_label;


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [856] */

/* JUMPI */
/* op_0 = Constant((7, 856)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
 
 goto pc_358;
 
 }

/* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
}pc_34f:
{ /* <============ */ 
on_bb_start(847);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_358:
{ /* <============ */ 
on_bb_start(856);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((5, 64)) */
const uint256_t v_6_0 = mload_v(c_40);


/* RETURNDATASIZE */
const uint256_t v_7_0 = returndatasize_v();


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* LT */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((8, 32)) */
const uint256_t v_10_0 = lt_v(v_7_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = iszero_v(v_10_0);


/* PUSH2 */
/* val = [878] */

/* JUMPI */
/* op_0 = Constant((12, 878)) */
/* op_1 = InstructionRef((11, 0)) */
if ( v_11_0 ) { 
 /* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_36e;
 
 }

/* BB finalizer */
ctxt->s.set(2, v_7_0);

ctxt->s.set(3, v_6_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_36a:
{ /* <============ */ 
on_bb_start(874);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_36e:
{ /* <============ */ 
on_bb_start(878);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* MLOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = mload_v(s_0_1);


/* ISZERO */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = iszero_v(v_2_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [891] */

/* JUMPI */
/* op_0 = Constant((5, 891)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
 
 goto pc_37b;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_377:
{ /* <============ */ 
on_bb_start(887);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_37b:
{ /* <============ */ 
on_bb_start(891);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* ADD */
/* op_0 = Constant((1, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(c_1, s_0_0);


/* PUSH2 */
/* val = [682] */

/* JUMP */
/* op_0 = Constant((3, 682)) */
/* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */

goto pc_2aa;


}pc_383:
{ /* <============ */ 
on_bb_start(899);
const uint256_t s_0_7 = ctxt->s.peek(7);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 7)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(8);
/* no BB returns */

JUMP(s_0_7);


}pc_38c:
{ /* <============ */ 
on_bb_start(908);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((1, 0))*/
ctxt->s.push(c_0);
}pc_390:
{ /* <============ */ 
on_bb_start(912);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* DUP5 */
/* op_0 = StackRef((0, 4)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::LT, s_0_1, s_0_4);
const uint256_t v_3_0 = lt_v(s_0_1, s_0_4);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [1036] */

/* JUMPI */
/* op_0 = Constant((5, 1036)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_40c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_399:
{ /* <============ */ 
on_bb_start(921);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* DUP6 */
/* op_0 = StackRef((0, 5)) */

/* DUP6 */
/* op_0 = StackRef((0, 4)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* DUP2 */
/* op_0 = StackRef((0, 4)) */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::LT, s_0_1, s_0_4);
const uint256_t v_5_0 = lt_v(s_0_1, s_0_4);


/* PUSH2 */
/* val = [932] */

/* JUMPI */
/* op_0 = Constant((6, 932)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 1 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
 
 goto pc_3a4;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 1 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
}pc_3a3:
{ /* <============ */ 
on_bb_start(931);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3a4:
{ /* <============ */ 
on_bb_start(932);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((9, 2)) */
/* op_1 = Constant((8, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((7, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_12_0 = and_v(g_20, v_6_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* PUSH1 */
/* val = [2] */

/* EXP */
/* op_0 = Constant((15, 2)) */
/* op_1 = Constant((14, 160)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((13, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((17, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = and_v(g_20, v_12_0);


/* PUSH2 */
/* val = [2300] */

/* DUP6 */
/* op_0 = StackRef((0, 6)) */

/* DUP6 */
/* op_0 = StackRef((0, 5)) */

/* DUP6 */
/* op_0 = StackRef((0, 4)) */

/* DUP2 */
/* op_0 = StackRef((0, 5)) */

/* DUP2 */
/* op_0 = StackRef((0, 4)) */

/* LT */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 5)) */
TRACE_COMP(eevm::Opcode::LT, s_0_4, s_0_5);
const uint256_t v_25_0 = lt_v(s_0_4, s_0_5);


/* ISZERO */
/* op_0 = InstructionRef((25, 0)) */
const uint256_t v_26_0 = iszero_v(v_25_0);


/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_27_0 = iszero_v(v_26_0);


/* PUSH2 */
/* val = [974] */

/* JUMPI */
/* op_0 = Constant((28, 974)) */
/* op_1 = InstructionRef((27, 0)) */
if ( v_27_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, s_0_6);

ctxt->s.set(1, c_8fc);

ctxt->s.set(2, v_18_0);
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 1 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
 
 goto pc_3ce;
 
 }

/* BB finalizer */
ctxt->s.set(0, s_0_6);

ctxt->s.set(1, c_8fc);

ctxt->s.set(2, v_18_0);
/* no pops at end */
/* BB return 0 StackRef((0, 5))*/
ctxt->s.push(s_0_5);
/* BB return 1 StackRef((0, 4))*/
ctxt->s.push(s_0_4);
}pc_3cd:
{ /* <============ */ 
on_bb_start(973);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3ce:
{ /* <============ */ 
on_bb_start(974);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* PUSH1 */
/* val = [32] */

/* MUL */
/* op_0 = Constant((3, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_4_0 = mul_v(c_20, s_0_0);


/* ADD */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_5_0 = add_v(v_4_0, s_0_2);


/* CALLDATALOAD */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = calldataload_v(v_5_0);


/* SWAP1 */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 3)) */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = iszero_v(v_6_0);


/* MUL */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_10_0 = mul_v(v_9_0, s_0_3);


/* SWAP1 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = InstructionRef((6, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((15, 64)) */
const uint256_t v_16_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((16, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((13, 0)) */

/* SUB */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
const uint256_t v_19_0 = sub_v(v_13_0, v_16_0);


/* DUP2 */
/* op_0 = InstructionRef((16, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP9 */
/* op_0 = StackRef((0, 4)) */

/* DUP9 */
/* op_0 = InstructionRef((10, 0)) */

/* CALL */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 4)) */
/* op_2 = InstructionRef((6, 0)) */
/* op_3 = InstructionRef((16, 0)) */
/* op_4 = InstructionRef((19, 0)) */
/* op_5 = InstructionRef((16, 0)) */
/* op_6 = Constant((14, 0)) */
const uint256_t v_24_0 = call_v(v_10_0, s_0_4, v_6_0, v_16_0, v_19_0, v_16_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((24, 0)) */
const uint256_t v_30_0 = iszero_v(v_24_0);


/* DUP1 */
/* op_0 = InstructionRef((30, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((30, 0)) */
const uint256_t v_32_0 = iszero_v(v_30_0);


/* PUSH2 */
/* val = [1024] */

/* JUMPI */
/* op_0 = Constant((33, 1024)) */
/* op_1 = InstructionRef((32, 0)) */
if ( v_32_0 ) { 
 /* BB finalizer */
ctxt->s.set(4, v_30_0);
ctxt->s.pop_drop_n(4);
/* no BB returns */
 
 goto pc_400;
 
 }

/* BB finalizer */
ctxt->s.set(4, v_30_0);
ctxt->s.pop_drop_n(4);
/* no BB returns */
}pc_3f7:
{ /* <============ */ 
on_bb_start(1015);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_400:
{ /* <============ */ 
on_bb_start(1024);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* PUSH1 */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((2, 1)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP2 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 2)) */

/* ADD */
/* op_0 = StackRef((0, 2)) */
/* op_1 = Constant((2, 1)) */
const uint256_t v_5_0 = add_v(s_0_2, c_1);


/* SWAP1 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH2 */
/* val = [912] */

/* JUMP */
/* op_0 = Constant((7, 912)) */
/* BB finalizer */
ctxt->s.set(2, v_5_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_390;


}pc_40c:
{ /* <============ */ 
on_bb_start(1036);
/* JUMPDEST */

/* POP */

/* ADDRESS */
const uint256_t v_2_0 = address_v();


/* BALANCE */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = balance_v(v_2_0);


/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = InstructionRef((3, 0)) */

/* GT */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((4, 0)) */
const uint256_t v_6_0 = gt_v(v_3_0, c_0);


/* ISZERO */
/* op_0 = InstructionRef((6, 0)) */
const uint256_t v_7_0 = iszero_v(v_6_0);


/* PUSH2 */
/* val = [459] */

/* JUMPI */
/* op_0 = Constant((8, 459)) */
/* op_1 = InstructionRef((7, 0)) */
if ( v_7_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_1cb;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
}pc_419:
{ /* <============ */ 
on_bb_start(1049);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((0, 64)) */
const uint256_t v_1_0 = mload_v(c_40);


/* CALLER */
const uint256_t v_2_0 = caller_v();


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_5_0 = iszero_v(s_0_0);


/* PUSH2 */
/* val = [2300] */

/* MUL */
/* op_0 = Constant((6, 2300)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = mul_v(c_8fc, v_5_0);


/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((11, 0)) */
/* val = [0] */

/* DUP2 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((7, 0)) */

/* CALL */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = InstructionRef((2, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((1, 0)) */
/* op_4 = Constant((11, 0)) */
/* op_5 = InstructionRef((1, 0)) */
/* op_6 = Constant((11, 0)) */
const uint256_t v_18_0 = call_v(v_7_0, v_2_0, s_0_0, v_1_0, c_0, v_1_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((2, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_24_0 = iszero_v(v_18_0);


/* DUP1 */
/* op_0 = InstructionRef((24, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((24, 0)) */
const uint256_t v_26_0 = iszero_v(v_24_0);


/* PUSH2 */
/* val = [899] */

/* JUMPI */
/* op_0 = Constant((27, 899)) */
/* op_1 = InstructionRef((26, 0)) */
if ( v_26_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
 
 goto pc_383;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
}pc_43c:
{ /* <============ */ 
on_bb_start(1084);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_445:
{ /* <============ */ 
on_bb_start(1093);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_446:
{ /* <============ */ 
on_bb_start(1094);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_61, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x446 (inst offset 3; byte 0xcb)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_450:
{ /* <============ */ 
on_bb_start(1104);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* LOG0 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
log0_v(s_0_0, s_0_1);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x450 (inst offset 1; byte 0xb1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_452:
{ /* <============ */ 
on_bb_start(1106);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_14 = ctxt->s.peek(14);
/* NUMBER */
const uint256_t v_0_0 = number_v();


/* SWAP15 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 14)) */

/* ADDMOD */
/* op_0 = StackRef((0, 14)) */
/* op_1 = StackRef((0, 0)) */
/* op_2 = StackRef((0, 1)) */
const uint256_t v_2_0 = addmod_v(s_0_14, s_0_0, s_0_1);


/* PUSH28 */
/* val = [66637594758529059011086779820223322003589164428755657434011140137] */

/* BB finalizer */
ctxt->s.set(0, g_62);

ctxt->s.set(1, v_2_0);

ctxt->s.set(14, v_0_0);
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x4,0x71,0x80,0x61,0x0,0x20,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x3d,0x57,0x63,0xff,0xff,0xff,0xff,0x60,0xe0,0x60,0x2,0xa,0x60,0x0,0x35,0x4,0x16,0x63,0x51,0xba,0x16,0x2c,0x81,0x14,0x61,0x0,0x42,0x57,0x80,0x63,0xc7,0x3a,0x2d,0x60,0x14,0x61,0x0,0x7d,0x57,0x80,0x63,0xe6,0x3d,0x38,0xed,0x14,0x61,0x0,0xb6,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x4e,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x7b,0x60,0x4,0x80,0x35,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x90,0x60,0x24,0x80,0x35,0x80,0x82,0x1,0x92,0x90,0x81,0x1,0x35,0x91,0x60,0x44,0x35,0x90,0x81,0x1,0x91,0x1,0x35,0x61,0x0,0xd5,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x89,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x7b,0x60,0x4,0x80,0x35,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x90,0x60,0x24,0x80,0x35,0x80,0x82,0x1,0x92,0x90,0x81,0x1,0x35,0x91,0x60,0x44,0x35,0x90,0x81,0x1,0x91,0x1,0x35,0x61,0x1,0xd3,0x56,0x5b,0x61,0x0,0x7b,0x60,0x24,0x60,0x4,0x80,0x35,0x82,0x81,0x1,0x92,0x90,0x82,0x1,0x35,0x91,0x81,0x35,0x91,0x82,0x1,0x91,0x1,0x35,0x61,0x3,0x8c,0x56,0x5b,0x60,0x0,0x5b,0x83,0x81,0x10,0x15,0x61,0x1,0xcb,0x57,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x86,0x16,0x63,0x23,0xb8,0x72,0xdd,0x33,0x87,0x87,0x85,0x81,0x81,0x10,0x61,0x0,0xfc,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x86,0x86,0x86,0x81,0x81,0x10,0x15,0x15,0x61,0x1,0x1a,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x60,0x40,0x51,0x84,0x63,0xff,0xff,0xff,0xff,0x16,0x60,0xe0,0x60,0x2,0xa,0x2,0x81,0x52,0x60,0x4,0x1,0x80,0x84,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x81,0x52,0x60,0x20,0x1,0x83,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x81,0x52,0x60,0x20,0x1,0x82,0x81,0x52,0x60,0x20,0x1,0x93,0x50,0x50,0x50,0x50,0x60,0x20,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x60,0x0,0x87,0x80,0x3b,0x15,0x80,0x15,0x61,0x1,0x8c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x5a,0xf1,0x15,0x80,0x15,0x61,0x1,0xa0,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x50,0x60,0x40,0x51,0x3d,0x60,0x20,0x81,0x10,0x15,0x61,0x1,0xb6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x51,0x15,0x15,0x61,0x1,0xc3,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x1,0x1,0x61,0x0,0xd8,0x56,0x5b,0x50,0x50,0x50,0x50,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x5b,0x84,0x81,0x10,0x15,0x61,0x2,0x1,0x57,0x83,0x83,0x82,0x81,0x81,0x10,0x61,0x1,0xeb,0x57,0xfe,0x5b,0x60,0x20,0x2,0x91,0x90,0x91,0x1,0x35,0x92,0x90,0x92,0x1,0x91,0x50,0x60,0x1,0x1,0x61,0x1,0xd7,0x56,0x5b,0x60,0x40,0x80,0x51,0x7f,0x23,0xb8,0x72,0xdd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81,0x52,0x33,0x60,0x4,0x82,0x1,0x52,0x30,0x60,0x24,0x82,0x1,0x52,0x60,0x44,0x81,0x1,0x84,0x90,0x52,0x90,0x51,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x89,0x16,0x91,0x63,0x23,0xb8,0x72,0xdd,0x91,0x60,0x64,0x80,0x83,0x1,0x92,0x60,0x20,0x92,0x91,0x90,0x82,0x90,0x3,0x1,0x81,0x60,0x0,0x87,0x80,0x3b,0x15,0x80,0x15,0x61,0x2,0x6f,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x5a,0xf1,0x15,0x80,0x15,0x61,0x2,0x83,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x50,0x60,0x40,0x51,0x3d,0x60,0x20,0x81,0x10,0x15,0x61,0x2,0x99,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x51,0x15,0x15,0x61,0x2,0xa6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x60,0x0,0x5b,0x84,0x81,0x10,0x15,0x61,0x3,0x83,0x57,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x87,0x16,0x63,0xa9,0x5,0x9c,0xbb,0x87,0x87,0x84,0x81,0x81,0x10,0x61,0x2,0xcd,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x86,0x86,0x85,0x81,0x81,0x10,0x15,0x15,0x61,0x2,0xeb,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x60,0x40,0x51,0x83,0x63,0xff,0xff,0xff,0xff,0x16,0x60,0xe0,0x60,0x2,0xa,0x2,0x81,0x52,0x60,0x4,0x1,0x80,0x83,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x81,0x52,0x60,0x20,0x1,0x82,0x81,0x52,0x60,0x20,0x1,0x92,0x50,0x50,0x50,0x60,0x20,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x60,0x0,0x87,0x80,0x3b,0x15,0x80,0x15,0x61,0x3,0x44,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x5a,0xf1,0x15,0x80,0x15,0x61,0x3,0x58,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x50,0x60,0x40,0x51,0x3d,0x60,0x20,0x81,0x10,0x15,0x61,0x3,0x6e,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x51,0x15,0x15,0x61,0x3,0x7b,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x1,0x1,0x61,0x2,0xaa,0x56,0x5b,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x5b,0x84,0x82,0x10,0x15,0x61,0x4,0xc,0x57,0x85,0x85,0x83,0x81,0x81,0x10,0x61,0x3,0xa4,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x60,0x1,0x60,0xa0,0x60,0x2,0xa,0x3,0x16,0x61,0x8,0xfc,0x85,0x85,0x85,0x81,0x81,0x10,0x15,0x15,0x61,0x3,0xce,0x57,0xfe,0x5b,0x90,0x50,0x60,0x20,0x2,0x1,0x35,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x4,0x0,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x60,0x1,0x90,0x91,0x1,0x90,0x61,0x3,0x90,0x56,0x5b,0x50,0x30,0x31,0x60,0x0,0x81,0x11,0x15,0x61,0x1,0xcb,0x57,0x60,0x40,0x51,0x33,0x90,0x82,0x15,0x61,0x8,0xfc,0x2,0x90,0x83,0x90,0x60,0x0,0x81,0x81,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x3,0x83,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0xcb,0xa0,0xb1,0x43,0x9e,0x8,0x7b,0xa1,0xfc,0xad,0x51,0x97,0x35,0x22,0xf4,0x4f,0x3,0x41,0xe3,0x19,0xea,0x47,0x8a,0x41,0x8,0xdf,0xe0,0x4c,0x26,0x19,0xdc,0xce,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_Disperse::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_Disperse::constructor_args() {
    return _constructor_args;
}
