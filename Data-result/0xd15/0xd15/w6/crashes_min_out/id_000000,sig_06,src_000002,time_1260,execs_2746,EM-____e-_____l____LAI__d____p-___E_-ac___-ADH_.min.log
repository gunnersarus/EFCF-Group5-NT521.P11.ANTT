[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(4)] ✔️
[Trimmer Stage: Transactions(3)] ✔️
[Trimmer Stage: Transactions(2)] ✔️
[Trimmer Stage: Transactions(1)] ✔️
[Trimmer Stage: Transactions(0)] ❌
[Trimmer Stage: TransactionWithValue(0)] ✔️
[Trimmer Stage: TransactionHeader(0, CallValue(100000))] ✔️
[Trimmer Stage: TransactionHeader(0, CallValue(100))] ✔️
[Trimmer Stage: TransactionHeader(0, CallValue(1))] ✔️
[Trimmer Stage: TransactionHeader(0, CallValue(0))] ✔️
[Trimmer Stage: TransactionHeader(0, BlockAdvance(0))] ✔️
[Trimmer Stage: Inputs(0, 146)] ✔️
[Trimmer Stage: Inputs(0, 132)] ✔️
[Trimmer Stage: Inputs(0, 100)] ✔️
[Trimmer Stage: Inputs(0, 68)] ✔️
[Trimmer Stage: Inputs(0, 36)] ✔️
[Trimmer Stage: Inputs(0, 4)] ✔️
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(0, 7)] ❌
[Trimmer Stage: Sender(0, 6)] ❌
[Trimmer Stage: Sender(0, 5)] ✔️
[Trimmer Stage: Sender(0, 4)] ✔️
[Trimmer Stage: Sender(0, 3)] ❌
[Trimmer Stage: Sender(0, 2)] ❌
[Trimmer Stage: Sender(0, 1)] ❌
[Trimmer Stage: Sender(0, 0)] ❌
[Trimmer Stage: Receiver(0, 20)] ✔️
[Trimmer Stage: Receiver(0, 19)] ✔️
[Trimmer Stage: Receiver(0, 18)] ✔️
[Trimmer Stage: Receiver(0, 17)] ✔️
[Trimmer Stage: Receiver(0, 16)] ✔️
[Trimmer Stage: Receiver(0, 15)] ✔️
[Trimmer Stage: Receiver(0, 14)] ✔️
[Trimmer Stage: Receiver(0, 13)] ✔️
[Trimmer Stage: Receiver(0, 12)] ✔️
[Trimmer Stage: Receiver(0, 11)] ✔️
[Trimmer Stage: Receiver(0, 10)] ✔️
[Trimmer Stage: Receiver(0, 9)] ✔️
[Trimmer Stage: Receiver(0, 8)] ✔️
[Trimmer Stage: Receiver(0, 7)] ✔️
[Trimmer Stage: Receiver(0, 6)] ✔️
[Trimmer Stage: Receiver(0, 5)] ✔️
[Trimmer Stage: Receiver(0, 4)] ✔️
[Trimmer Stage: Receiver(0, 3)] ✔️
[Trimmer Stage: Receiver(0, 2)] ✔️
[Trimmer Stage: Receiver(0, 1)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(100000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(1))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ we try sorting the transaction list ]
reduced testcases from 2320 to 60 bytes (by 98 %) edit distance 2269
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[101]; tx_receiver[238]; call_value: 0x54a47ff0; length: 292; block+=1; #returns=0
  func: disperseEther(address[],uint256[]) (0xe63d38ed)
  input: { array[0](), array[5](uint(170141183460469231731687303715884105728), uint(3), uint(3342478689), uint(0), uint(0), ),  }
TX[1] with tx_sender[207]; tx_receiver[0]; call_value: 0x0; length: 484; block+=1; #returns=1
  func: disperseTokenSimple(address,address[],uint256[]) (0x51ba162c)
  input: { address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), array[7](address(0xcf7c6611373327e75f8ef1beef8227afb89816dd), address(0xcc079239d48f83be71dbbd18487f4acc279ee929), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), address(0xcc079239d48f83be71dbbd18487f4acc279ee929), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), address(0x0000000000000000000000000000000000000000), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), ), array[3](uint(16156842317565293874272834530371880720966471053262404558597773956279093428225), uint(26), uint(12259964326927110866866776217202473468949912977468817408), ),  }
  returns:
    return val: 1; allows reenter: 3; data: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004
TX[2] with tx_sender[221]; tx_receiver[34]; call_value: 0x7fffffffffffffff; length: 388; block+=1; #returns=0
  func: disperseEther(address[],uint256[]) (0xe63d38ed)
  input: { array[4](address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), address(0xc2018c3f08417e77b94fb541fed2bf1e09093edd), address(0xa2b0e2c57d7a1232a80b59354f5a3d49c19c6c4a), address(0xcc079239d48f83be71dbbd18487f4acc279ee929), ), array[4](uint(1), uint(170141183460469231731687303715884105727), uint(14), uint(1), ),  }
TX[3] with tx_sender[207]; tx_receiver[0]; call_value: 0x0; length: 484; block+=1; #returns=0
  func: disperseTokenSimple(address,address[],uint256[]) (0x51ba162c)
  input: { address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), array[7](address(0xcf7c6611373327e75f8ef1beef8227afb89816dd), address(0xcc079239d48f83be71dbbd18487f4acc279ee929), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), address(0xcc079239d48f83be71dbbd18487f4acc279ee929), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), address(0x0000000000000000000000000000000000000000), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), ), array[3](uint(16156842317565293874272834530371880720966471053262404558597773956279093428225), uint(26), uint(12259964326927110866866776217202473468949912977468817408), ),  }
TX[4] with tx_sender[5]; tx_receiver[0]; call_value: 0x0; length: 484; block+=1; #returns=0
  func: disperseToken(address,address[],uint256[]) (0xc73a2d60)
  input: { address(0xc3cf2af7ea37d6d9d0a23bdf84c71e8c099d03c2), array[4](address(0xc3cf2af7ea37d6d9d0a23bdf84c71e8c099d03c2), address(0x0000000000000000000000000000000000000000), address(0xc5442b23ea5ca66c3441e62bf6456f010646ae94), address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), ), array[6](uint(1371149867), uint(29), uint(1), uint(1126191390575494794348469962577918279797587750548), uint(20), uint(57896044618658097711785492504343953926634992332820282019728792003956564819967), ),  }
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[4]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: disperseEther(address[],uint256[]) (0xe63d38ed)
  input:  [failed to decode]
