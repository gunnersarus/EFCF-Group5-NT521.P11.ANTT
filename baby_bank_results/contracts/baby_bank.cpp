// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/baby_bank.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x55,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x60, /* [16'0x10] PUSH1 */
0xe0,/* constant data */
0x1c, /* [18'0x12] SHR */
0x80, /* [19'0x13] DUP1 */
0x63, /* [20'0x14] PUSH4 */
0x30,0xf3,0x79,0x5c,/* constant data */
0x14, /* [25'0x19] EQ */
0x61, /* [26'0x1a] PUSH2 */
0x00,0x5a,/* constant data */
0x57, /* [29'0x1d] JUMPI */
0x80, /* [30'0x1e] DUP1 */
0x63, /* [31'0x1f] PUSH4 */
0x3c,0xcf,0xd6,0x0b,/* constant data */
0x14, /* [36'0x24] EQ */
0x61, /* [37'0x25] PUSH2 */
0x00,0x9f,/* constant data */
0x57, /* [40'0x28] JUMPI */
0x80, /* [41'0x29] DUP1 */
0x63, /* [42'0x2a] PUSH4 */
0x51,0x9c,0x63,0x77,/* constant data */
0x14, /* [47'0x2f] EQ */
0x61, /* [48'0x30] PUSH2 */
0x00,0xb6,/* constant data */
0x57, /* [51'0x33] JUMPI */
0x80, /* [52'0x34] DUP1 */
0x63, /* [53'0x35] PUSH4 */
0x81,0xe7,0xe2,0x0e,/* constant data */
0x14, /* [58'0x3a] EQ */
0x61, /* [59'0x3b] PUSH2 */
0x01,0x33,/* constant data */
0x57, /* [62'0x3e] JUMPI */
0x80, /* [63'0x3f] DUP1 */
0x63, /* [64'0x40] PUSH4 */
0xd5,0x3d,0x58,0x85,/* constant data */
0x14, /* [69'0x45] EQ */
0x61, /* [70'0x46] PUSH2 */
0x01,0x66,/* constant data */
0x57, /* [73'0x49] JUMPI */
0x80, /* [74'0x4a] DUP1 */
0x63, /* [75'0x4b] PUSH4 */
0xe3,0xd6,0x70,0xd7,/* constant data */
0x14, /* [80'0x50] EQ */
0x61, /* [81'0x51] PUSH2 */
0x01,0xeb,/* constant data */
0x57, /* [84'0x54] JUMPI */
0x5b, /* [85'0x55] JUMPDEST */
0x60, /* [86'0x56] PUSH1 */
0x00,/* constant data */
0x80, /* [88'0x58] DUP1 */
0xfd, /* [89'0x59] REVERT */
0x5b, /* [90'0x5a] JUMPDEST */
0x34, /* [91'0x5b] CALLVALUE */
0x80, /* [92'0x5c] DUP1 */
0x15, /* [93'0x5d] ISZERO */
0x61, /* [94'0x5e] PUSH2 */
0x00,0x66,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x60, /* [98'0x62] PUSH1 */
0x00,/* constant data */
0x80, /* [100'0x64] DUP1 */
0xfd, /* [101'0x65] REVERT */
0x5b, /* [102'0x66] JUMPDEST */
0x50, /* [103'0x67] POP */
0x61, /* [104'0x68] PUSH2 */
0x00,0x8d,/* constant data */
0x60, /* [107'0x6b] PUSH1 */
0x04,/* constant data */
0x80, /* [109'0x6d] DUP1 */
0x36, /* [110'0x6e] CALLDATASIZE */
0x03, /* [111'0x6f] SUB */
0x60, /* [112'0x70] PUSH1 */
0x20,/* constant data */
0x81, /* [114'0x72] DUP2 */
0x10, /* [115'0x73] LT */
0x15, /* [116'0x74] ISZERO */
0x61, /* [117'0x75] PUSH2 */
0x00,0x7d,/* constant data */
0x57, /* [120'0x78] JUMPI */
0x60, /* [121'0x79] PUSH1 */
0x00,/* constant data */
0x80, /* [123'0x7b] DUP1 */
0xfd, /* [124'0x7c] REVERT */
0x5b, /* [125'0x7d] JUMPDEST */
0x50, /* [126'0x7e] POP */
0x35, /* [127'0x7f] CALLDATALOAD */
0x60, /* [128'0x80] PUSH1 */
0x01,/* constant data */
0x60, /* [130'0x82] PUSH1 */
0x01,/* constant data */
0x60, /* [132'0x84] PUSH1 */
0xa0,/* constant data */
0x1b, /* [134'0x86] SHL */
0x03, /* [135'0x87] SUB */
0x16, /* [136'0x88] AND */
0x61, /* [137'0x89] PUSH2 */
0x02,0x1e,/* constant data */
0x56, /* [140'0x8c] JUMP */
0x5b, /* [141'0x8d] JUMPDEST */
0x60, /* [142'0x8e] PUSH1 */
0x40,/* constant data */
0x80, /* [144'0x90] DUP1 */
0x51, /* [145'0x91] MLOAD */
0x91, /* [146'0x92] SWAP2 */
0x82, /* [147'0x93] DUP3 */
0x52, /* [148'0x94] MSTORE */
0x51, /* [149'0x95] MLOAD */
0x90, /* [150'0x96] SWAP1 */
0x81, /* [151'0x97] DUP2 */
0x90, /* [152'0x98] SWAP1 */
0x03, /* [153'0x99] SUB */
0x60, /* [154'0x9a] PUSH1 */
0x20,/* constant data */
0x01, /* [156'0x9c] ADD */
0x90, /* [157'0x9d] SWAP1 */
0xf3, /* [158'0x9e] RETURN */
0x5b, /* [159'0x9f] JUMPDEST */
0x34, /* [160'0xa0] CALLVALUE */
0x80, /* [161'0xa1] DUP1 */
0x15, /* [162'0xa2] ISZERO */
0x61, /* [163'0xa3] PUSH2 */
0x00,0xab,/* constant data */
0x57, /* [166'0xa6] JUMPI */
0x60, /* [167'0xa7] PUSH1 */
0x00,/* constant data */
0x80, /* [169'0xa9] DUP1 */
0xfd, /* [170'0xaa] REVERT */
0x5b, /* [171'0xab] JUMPDEST */
0x50, /* [172'0xac] POP */
0x61, /* [173'0xad] PUSH2 */
0x00,0xb4,/* constant data */
0x61, /* [176'0xb0] PUSH2 */
0x02,0x30,/* constant data */
0x56, /* [179'0xb3] JUMP */
0x5b, /* [180'0xb4] JUMPDEST */
0x00, /* [181'0xb5] STOP */
0x5b, /* [182'0xb6] JUMPDEST */
0x34, /* [183'0xb7] CALLVALUE */
0x80, /* [184'0xb8] DUP1 */
0x15, /* [185'0xb9] ISZERO */
0x61, /* [186'0xba] PUSH2 */
0x00,0xc2,/* constant data */
0x57, /* [189'0xbd] JUMPI */
0x60, /* [190'0xbe] PUSH1 */
0x00,/* constant data */
0x80, /* [192'0xc0] DUP1 */
0xfd, /* [193'0xc1] REVERT */
0x5b, /* [194'0xc2] JUMPDEST */
0x50, /* [195'0xc3] POP */
0x61, /* [196'0xc4] PUSH2 */
0x00,0xb4,/* constant data */
0x60, /* [199'0xc7] PUSH1 */
0x04,/* constant data */
0x80, /* [201'0xc9] DUP1 */
0x36, /* [202'0xca] CALLDATASIZE */
0x03, /* [203'0xcb] SUB */
0x60, /* [204'0xcc] PUSH1 */
0x20,/* constant data */
0x81, /* [206'0xce] DUP2 */
0x10, /* [207'0xcf] LT */
0x15, /* [208'0xd0] ISZERO */
0x61, /* [209'0xd1] PUSH2 */
0x00,0xd9,/* constant data */
0x57, /* [212'0xd4] JUMPI */
0x60, /* [213'0xd5] PUSH1 */
0x00,/* constant data */
0x80, /* [215'0xd7] DUP1 */
0xfd, /* [216'0xd8] REVERT */
0x5b, /* [217'0xd9] JUMPDEST */
0x81, /* [218'0xda] DUP2 */
0x01, /* [219'0xdb] ADD */
0x90, /* [220'0xdc] SWAP1 */
0x60, /* [221'0xdd] PUSH1 */
0x20,/* constant data */
0x81, /* [223'0xdf] DUP2 */
0x01, /* [224'0xe0] ADD */
0x81, /* [225'0xe1] DUP2 */
0x35, /* [226'0xe2] CALLDATALOAD */
0x64, /* [227'0xe3] PUSH5 */
0x01,0x00,0x00,0x00,0x00,/* constant data */
0x81, /* [233'0xe9] DUP2 */
0x11, /* [234'0xea] GT */
0x15, /* [235'0xeb] ISZERO */
0x61, /* [236'0xec] PUSH2 */
0x00,0xf4,/* constant data */
0x57, /* [239'0xef] JUMPI */
0x60, /* [240'0xf0] PUSH1 */
0x00,/* constant data */
0x80, /* [242'0xf2] DUP1 */
0xfd, /* [243'0xf3] REVERT */
0x5b, /* [244'0xf4] JUMPDEST */
0x82, /* [245'0xf5] DUP3 */
0x01, /* [246'0xf6] ADD */
0x83, /* [247'0xf7] DUP4 */
0x60, /* [248'0xf8] PUSH1 */
0x20,/* constant data */
0x82, /* [250'0xfa] DUP3 */
0x01, /* [251'0xfb] ADD */
0x11, /* [252'0xfc] GT */
0x15, /* [253'0xfd] ISZERO */
0x61, /* [254'0xfe] PUSH2 */
0x01,0x06,/* constant data */
0x57, /* [257'0x101] JUMPI */
0x60, /* [258'0x102] PUSH1 */
0x00,/* constant data */
0x80, /* [260'0x104] DUP1 */
0xfd, /* [261'0x105] REVERT */
0x5b, /* [262'0x106] JUMPDEST */
0x80, /* [263'0x107] DUP1 */
0x35, /* [264'0x108] CALLDATALOAD */
0x90, /* [265'0x109] SWAP1 */
0x60, /* [266'0x10a] PUSH1 */
0x20,/* constant data */
0x01, /* [268'0x10c] ADD */
0x91, /* [269'0x10d] SWAP2 */
0x84, /* [270'0x10e] DUP5 */
0x60, /* [271'0x10f] PUSH1 */
0x01,/* constant data */
0x83, /* [273'0x111] DUP4 */
0x02, /* [274'0x112] MUL */
0x84, /* [275'0x113] DUP5 */
0x01, /* [276'0x114] ADD */
0x11, /* [277'0x115] GT */
0x64, /* [278'0x116] PUSH5 */
0x01,0x00,0x00,0x00,0x00,/* constant data */
0x83, /* [284'0x11c] DUP4 */
0x11, /* [285'0x11d] GT */
0x17, /* [286'0x11e] OR */
0x15, /* [287'0x11f] ISZERO */
0x61, /* [288'0x120] PUSH2 */
0x01,0x28,/* constant data */
0x57, /* [291'0x123] JUMPI */
0x60, /* [292'0x124] PUSH1 */
0x00,/* constant data */
0x80, /* [294'0x126] DUP1 */
0xfd, /* [295'0x127] REVERT */
0x5b, /* [296'0x128] JUMPDEST */
0x50, /* [297'0x129] POP */
0x90, /* [298'0x12a] SWAP1 */
0x92, /* [299'0x12b] SWAP3 */
0x50, /* [300'0x12c] POP */
0x90, /* [301'0x12d] SWAP1 */
0x50, /* [302'0x12e] POP */
0x61, /* [303'0x12f] PUSH2 */
0x02,0xff,/* constant data */
0x56, /* [306'0x132] JUMP */
0x5b, /* [307'0x133] JUMPDEST */
0x34, /* [308'0x134] CALLVALUE */
0x80, /* [309'0x135] DUP1 */
0x15, /* [310'0x136] ISZERO */
0x61, /* [311'0x137] PUSH2 */
0x01,0x3f,/* constant data */
0x57, /* [314'0x13a] JUMPI */
0x60, /* [315'0x13b] PUSH1 */
0x00,/* constant data */
0x80, /* [317'0x13d] DUP1 */
0xfd, /* [318'0x13e] REVERT */
0x5b, /* [319'0x13f] JUMPDEST */
0x50, /* [320'0x140] POP */
0x61, /* [321'0x141] PUSH2 */
0x00,0x8d,/* constant data */
0x60, /* [324'0x144] PUSH1 */
0x04,/* constant data */
0x80, /* [326'0x146] DUP1 */
0x36, /* [327'0x147] CALLDATASIZE */
0x03, /* [328'0x148] SUB */
0x60, /* [329'0x149] PUSH1 */
0x20,/* constant data */
0x81, /* [331'0x14b] DUP2 */
0x10, /* [332'0x14c] LT */
0x15, /* [333'0x14d] ISZERO */
0x61, /* [334'0x14e] PUSH2 */
0x01,0x56,/* constant data */
0x57, /* [337'0x151] JUMPI */
0x60, /* [338'0x152] PUSH1 */
0x00,/* constant data */
0x80, /* [340'0x154] DUP1 */
0xfd, /* [341'0x155] REVERT */
0x5b, /* [342'0x156] JUMPDEST */
0x50, /* [343'0x157] POP */
0x35, /* [344'0x158] CALLDATALOAD */
0x60, /* [345'0x159] PUSH1 */
0x01,/* constant data */
0x60, /* [347'0x15b] PUSH1 */
0x01,/* constant data */
0x60, /* [349'0x15d] PUSH1 */
0xa0,/* constant data */
0x1b, /* [351'0x15f] SHL */
0x03, /* [352'0x160] SUB */
0x16, /* [353'0x161] AND */
0x61, /* [354'0x162] PUSH2 */
0x03,0x6b,/* constant data */
0x56, /* [357'0x165] JUMP */
0x5b, /* [358'0x166] JUMPDEST */
0x61, /* [359'0x167] PUSH2 */
0x00,0xb4,/* constant data */
0x60, /* [362'0x16a] PUSH1 */
0x04,/* constant data */
0x80, /* [364'0x16c] DUP1 */
0x36, /* [365'0x16d] CALLDATASIZE */
0x03, /* [366'0x16e] SUB */
0x60, /* [367'0x16f] PUSH1 */
0x60,/* constant data */
0x81, /* [369'0x171] DUP2 */
0x10, /* [370'0x172] LT */
0x15, /* [371'0x173] ISZERO */
0x61, /* [372'0x174] PUSH2 */
0x01,0x7c,/* constant data */
0x57, /* [375'0x177] JUMPI */
0x60, /* [376'0x178] PUSH1 */
0x00,/* constant data */
0x80, /* [378'0x17a] DUP1 */
0xfd, /* [379'0x17b] REVERT */
0x5b, /* [380'0x17c] JUMPDEST */
0x81, /* [381'0x17d] DUP2 */
0x35, /* [382'0x17e] CALLDATALOAD */
0x91, /* [383'0x17f] SWAP2 */
0x60, /* [384'0x180] PUSH1 */
0x01,/* constant data */
0x60, /* [386'0x182] PUSH1 */
0x01,/* constant data */
0x60, /* [388'0x184] PUSH1 */
0xa0,/* constant data */
0x1b, /* [390'0x186] SHL */
0x03, /* [391'0x187] SUB */
0x60, /* [392'0x188] PUSH1 */
0x20,/* constant data */
0x82, /* [394'0x18a] DUP3 */
0x01, /* [395'0x18b] ADD */
0x35, /* [396'0x18c] CALLDATALOAD */
0x16, /* [397'0x18d] AND */
0x91, /* [398'0x18e] SWAP2 */
0x81, /* [399'0x18f] DUP2 */
0x01, /* [400'0x190] ADD */
0x90, /* [401'0x191] SWAP1 */
0x60, /* [402'0x192] PUSH1 */
0x60,/* constant data */
0x81, /* [404'0x194] DUP2 */
0x01, /* [405'0x195] ADD */
0x60, /* [406'0x196] PUSH1 */
0x40,/* constant data */
0x82, /* [408'0x198] DUP3 */
0x01, /* [409'0x199] ADD */
0x35, /* [410'0x19a] CALLDATALOAD */
0x64, /* [411'0x19b] PUSH5 */
0x01,0x00,0x00,0x00,0x00,/* constant data */
0x81, /* [417'0x1a1] DUP2 */
0x11, /* [418'0x1a2] GT */
0x15, /* [419'0x1a3] ISZERO */
0x61, /* [420'0x1a4] PUSH2 */
0x01,0xac,/* constant data */
0x57, /* [423'0x1a7] JUMPI */
0x60, /* [424'0x1a8] PUSH1 */
0x00,/* constant data */
0x80, /* [426'0x1aa] DUP1 */
0xfd, /* [427'0x1ab] REVERT */
0x5b, /* [428'0x1ac] JUMPDEST */
0x82, /* [429'0x1ad] DUP3 */
0x01, /* [430'0x1ae] ADD */
0x83, /* [431'0x1af] DUP4 */
0x60, /* [432'0x1b0] PUSH1 */
0x20,/* constant data */
0x82, /* [434'0x1b2] DUP3 */
0x01, /* [435'0x1b3] ADD */
0x11, /* [436'0x1b4] GT */
0x15, /* [437'0x1b5] ISZERO */
0x61, /* [438'0x1b6] PUSH2 */
0x01,0xbe,/* constant data */
0x57, /* [441'0x1b9] JUMPI */
0x60, /* [442'0x1ba] PUSH1 */
0x00,/* constant data */
0x80, /* [444'0x1bc] DUP1 */
0xfd, /* [445'0x1bd] REVERT */
0x5b, /* [446'0x1be] JUMPDEST */
0x80, /* [447'0x1bf] DUP1 */
0x35, /* [448'0x1c0] CALLDATALOAD */
0x90, /* [449'0x1c1] SWAP1 */
0x60, /* [450'0x1c2] PUSH1 */
0x20,/* constant data */
0x01, /* [452'0x1c4] ADD */
0x91, /* [453'0x1c5] SWAP2 */
0x84, /* [454'0x1c6] DUP5 */
0x60, /* [455'0x1c7] PUSH1 */
0x01,/* constant data */
0x83, /* [457'0x1c9] DUP4 */
0x02, /* [458'0x1ca] MUL */
0x84, /* [459'0x1cb] DUP5 */
0x01, /* [460'0x1cc] ADD */
0x11, /* [461'0x1cd] GT */
0x64, /* [462'0x1ce] PUSH5 */
0x01,0x00,0x00,0x00,0x00,/* constant data */
0x83, /* [468'0x1d4] DUP4 */
0x11, /* [469'0x1d5] GT */
0x17, /* [470'0x1d6] OR */
0x15, /* [471'0x1d7] ISZERO */
0x61, /* [472'0x1d8] PUSH2 */
0x01,0xe0,/* constant data */
0x57, /* [475'0x1db] JUMPI */
0x60, /* [476'0x1dc] PUSH1 */
0x00,/* constant data */
0x80, /* [478'0x1de] DUP1 */
0xfd, /* [479'0x1df] REVERT */
0x5b, /* [480'0x1e0] JUMPDEST */
0x50, /* [481'0x1e1] POP */
0x90, /* [482'0x1e2] SWAP1 */
0x92, /* [483'0x1e3] SWAP3 */
0x50, /* [484'0x1e4] POP */
0x90, /* [485'0x1e5] SWAP1 */
0x50, /* [486'0x1e6] POP */
0x61, /* [487'0x1e7] PUSH2 */
0x03,0x7d,/* constant data */
0x56, /* [490'0x1ea] JUMP */
0x5b, /* [491'0x1eb] JUMPDEST */
0x34, /* [492'0x1ec] CALLVALUE */
0x80, /* [493'0x1ed] DUP1 */
0x15, /* [494'0x1ee] ISZERO */
0x61, /* [495'0x1ef] PUSH2 */
0x01,0xf7,/* constant data */
0x57, /* [498'0x1f2] JUMPI */
0x60, /* [499'0x1f3] PUSH1 */
0x00,/* constant data */
0x80, /* [501'0x1f5] DUP1 */
0xfd, /* [502'0x1f6] REVERT */
0x5b, /* [503'0x1f7] JUMPDEST */
0x50, /* [504'0x1f8] POP */
0x61, /* [505'0x1f9] PUSH2 */
0x00,0x8d,/* constant data */
0x60, /* [508'0x1fc] PUSH1 */
0x04,/* constant data */
0x80, /* [510'0x1fe] DUP1 */
0x36, /* [511'0x1ff] CALLDATASIZE */
0x03, /* [512'0x200] SUB */
0x60, /* [513'0x201] PUSH1 */
0x20,/* constant data */
0x81, /* [515'0x203] DUP2 */
0x10, /* [516'0x204] LT */
0x15, /* [517'0x205] ISZERO */
0x61, /* [518'0x206] PUSH2 */
0x02,0x0e,/* constant data */
0x57, /* [521'0x209] JUMPI */
0x60, /* [522'0x20a] PUSH1 */
0x00,/* constant data */
0x80, /* [524'0x20c] DUP1 */
0xfd, /* [525'0x20d] REVERT */
0x5b, /* [526'0x20e] JUMPDEST */
0x50, /* [527'0x20f] POP */
0x35, /* [528'0x210] CALLDATALOAD */
0x60, /* [529'0x211] PUSH1 */
0x01,/* constant data */
0x60, /* [531'0x213] PUSH1 */
0x01,/* constant data */
0x60, /* [533'0x215] PUSH1 */
0xa0,/* constant data */
0x1b, /* [535'0x217] SHL */
0x03, /* [536'0x218] SUB */
0x16, /* [537'0x219] AND */
0x61, /* [538'0x21a] PUSH2 */
0x04,0x22,/* constant data */
0x56, /* [541'0x21d] JUMP */
0x5b, /* [542'0x21e] JUMPDEST */
0x60, /* [543'0x21f] PUSH1 */
0x01,/* constant data */
0x60, /* [545'0x221] PUSH1 */
0x20,/* constant data */
0x52, /* [547'0x223] MSTORE */
0x60, /* [548'0x224] PUSH1 */
0x00,/* constant data */
0x90, /* [550'0x226] SWAP1 */
0x81, /* [551'0x227] DUP2 */
0x52, /* [552'0x228] MSTORE */
0x60, /* [553'0x229] PUSH1 */
0x40,/* constant data */
0x90, /* [555'0x22b] SWAP1 */
0x20, /* [556'0x22c] SHA3 */
0x54, /* [557'0x22d] SLOAD */
0x81, /* [558'0x22e] DUP2 */
0x56, /* [559'0x22f] JUMP */
0x5b, /* [560'0x230] JUMPDEST */
0x33, /* [561'0x231] CALLER */
0x60, /* [562'0x232] PUSH1 */
0x00,/* constant data */
0x90, /* [564'0x234] SWAP1 */
0x81, /* [565'0x235] DUP2 */
0x52, /* [566'0x236] MSTORE */
0x60, /* [567'0x237] PUSH1 */
0x20,/* constant data */
0x81, /* [569'0x239] DUP2 */
0x90, /* [570'0x23a] SWAP1 */
0x52, /* [571'0x23b] MSTORE */
0x60, /* [572'0x23c] PUSH1 */
0x40,/* constant data */
0x90, /* [574'0x23e] SWAP1 */
0x20, /* [575'0x23f] SHA3 */
0x54, /* [576'0x240] SLOAD */
0x61, /* [577'0x241] PUSH2 */
0x02,0x49,/* constant data */
0x57, /* [580'0x244] JUMPI */
0x61, /* [581'0x245] PUSH2 */
0x02,0xfd,/* constant data */
0x56, /* [584'0x248] JUMP */
0x5b, /* [585'0x249] JUMPDEST */
0x33, /* [586'0x24a] CALLER */
0x60, /* [587'0x24b] PUSH1 */
0x00,/* constant data */
0x90, /* [589'0x24d] SWAP1 */
0x81, /* [590'0x24e] DUP2 */
0x52, /* [591'0x24f] MSTORE */
0x60, /* [592'0x250] PUSH1 */
0x01,/* constant data */
0x60, /* [594'0x252] PUSH1 */
0x20,/* constant data */
0x52, /* [596'0x254] MSTORE */
0x60, /* [597'0x255] PUSH1 */
0x40,/* constant data */
0x81, /* [599'0x257] DUP2 */
0x20, /* [600'0x258] SHA3 */
0x54, /* [601'0x259] SLOAD */
0x81, /* [602'0x25a] DUP2 */
0x90, /* [603'0x25b] SWAP1 */
0x43, /* [604'0x25c] NUMBER */
0x11, /* [605'0x25d] GT */
0x15, /* [606'0x25e] ISZERO */
0x61, /* [607'0x25f] PUSH2 */
0x02,0xb5,/* constant data */
0x57, /* [610'0x262] JUMPI */
0x50, /* [611'0x263] POP */
0x60, /* [612'0x264] PUSH1 */
0x40,/* constant data */
0x80, /* [614'0x266] DUP1 */
0x51, /* [615'0x267] MLOAD */
0x43, /* [616'0x268] NUMBER */
0x60, /* [617'0x269] PUSH1 */
0x20,/* constant data */
0x80, /* [619'0x26b] DUP1 */
0x83, /* [620'0x26c] DUP4 */
0x01, /* [621'0x26d] ADD */
0x91, /* [622'0x26e] SWAP2 */
0x90, /* [623'0x26f] SWAP1 */
0x91, /* [624'0x270] SWAP2 */
0x52, /* [625'0x271] MSTORE */
0x33, /* [626'0x272] CALLER */
0x60, /* [627'0x273] PUSH1 */
0x60,/* constant data */
0x1b, /* [629'0x275] SHL */
0x82, /* [630'0x276] DUP3 */
0x84, /* [631'0x277] DUP5 */
0x01, /* [632'0x278] ADD */
0x52, /* [633'0x279] MSTORE */
0x82, /* [634'0x27a] DUP3 */
0x51, /* [635'0x27b] MLOAD */
0x80, /* [636'0x27c] DUP1 */
0x83, /* [637'0x27d] DUP4 */
0x03, /* [638'0x27e] SUB */
0x60, /* [639'0x27f] PUSH1 */
0x34,/* constant data */
0x01, /* [641'0x281] ADD */
0x81, /* [642'0x282] DUP2 */
0x52, /* [643'0x283] MSTORE */
0x60, /* [644'0x284] PUSH1 */
0x54,/* constant data */
0x90, /* [646'0x286] SWAP1 */
0x92, /* [647'0x287] SWAP3 */
0x01, /* [648'0x288] ADD */
0x90, /* [649'0x289] SWAP1 */
0x92, /* [650'0x28a] SWAP3 */
0x52, /* [651'0x28b] MSTORE */
0x80, /* [652'0x28c] DUP1 */
0x51, /* [653'0x28d] MLOAD */
0x91, /* [654'0x28e] SWAP2 */
0x01, /* [655'0x28f] ADD */
0x20, /* [656'0x290] SHA3 */
0x60, /* [657'0x291] PUSH1 */
0x0a,/* constant data */
0x90, /* [659'0x293] SWAP1 */
0x06, /* [660'0x294] MOD */
0x80, /* [661'0x295] DUP1 */
0x61, /* [662'0x296] PUSH2 */
0x02,0xb5,/* constant data */
0x57, /* [665'0x299] JUMPI */
0x33, /* [666'0x29a] CALLER */
0x60, /* [667'0x29b] PUSH1 */
0x00,/* constant data */
0x90, /* [669'0x29d] SWAP1 */
0x81, /* [670'0x29e] DUP2 */
0x52, /* [671'0x29f] MSTORE */
0x60, /* [672'0x2a0] PUSH1 */
0x01,/* constant data */
0x60, /* [674'0x2a2] PUSH1 */
0x20,/* constant data */
0x52, /* [676'0x2a4] MSTORE */
0x60, /* [677'0x2a5] PUSH1 */
0x40,/* constant data */
0x90, /* [679'0x2a7] SWAP1 */
0x20, /* [680'0x2a8] SHA3 */
0x54, /* [681'0x2a9] SLOAD */
0x66, /* [682'0x2aa] PUSH7 */
0x03,0x8d,0x7e,0xa4,0xc6,0x80,0x00,/* constant data */
0x02, /* [690'0x2b2] MUL */
0x91, /* [691'0x2b3] SWAP2 */
0x50, /* [692'0x2b4] POP */
0x5b, /* [693'0x2b5] JUMPDEST */
0x33, /* [694'0x2b6] CALLER */
0x60, /* [695'0x2b7] PUSH1 */
0x00,/* constant data */
0x81, /* [697'0x2b9] DUP2 */
0x81, /* [698'0x2ba] DUP2 */
0x52, /* [699'0x2bb] MSTORE */
0x60, /* [700'0x2bc] PUSH1 */
0x20,/* constant data */
0x81, /* [702'0x2be] DUP2 */
0x90, /* [703'0x2bf] SWAP1 */
0x52, /* [704'0x2c0] MSTORE */
0x60, /* [705'0x2c1] PUSH1 */
0x40,/* constant data */
0x80, /* [707'0x2c3] DUP1 */
0x82, /* [708'0x2c4] DUP3 */
0x20, /* [709'0x2c5] SHA3 */
0x80, /* [710'0x2c6] DUP1 */
0x54, /* [711'0x2c7] SLOAD */
0x90, /* [712'0x2c8] SWAP1 */
0x83, /* [713'0x2c9] DUP4 */
0x90, /* [714'0x2ca] SWAP1 */
0x55, /* [715'0x2cb] SSTORE */
0x90, /* [716'0x2cc] SWAP1 */
0x51, /* [717'0x2cd] MLOAD */
0x90, /* [718'0x2ce] SWAP1 */
0x85, /* [719'0x2cf] DUP6 */
0x01, /* [720'0x2d0] ADD */
0x92, /* [721'0x2d1] SWAP3 */
0x91, /* [722'0x2d2] SWAP2 */
0x83, /* [723'0x2d3] DUP4 */
0x15, /* [724'0x2d4] ISZERO */
0x61, /* [725'0x2d5] PUSH2 */
0x08,0xfc,/* constant data */
0x02, /* [728'0x2d8] MUL */
0x91, /* [729'0x2d9] SWAP2 */
0x84, /* [730'0x2da] DUP5 */
0x91, /* [731'0x2db] SWAP2 */
0x81, /* [732'0x2dc] DUP2 */
0x81, /* [733'0x2dd] DUP2 */
0x81, /* [734'0x2de] DUP2 */
0x85, /* [735'0x2df] DUP6 */
0x88, /* [736'0x2e0] DUP9 */
0x88, /* [737'0x2e1] DUP9 */
0xf1, /* [738'0x2e2] CALL */
0x93, /* [739'0x2e3] SWAP4 */
0x50, /* [740'0x2e4] POP */
0x50, /* [741'0x2e5] POP */
0x50, /* [742'0x2e6] POP */
0x50, /* [743'0x2e7] POP */
0x15, /* [744'0x2e8] ISZERO */
0x80, /* [745'0x2e9] DUP1 */
0x15, /* [746'0x2ea] ISZERO */
0x61, /* [747'0x2eb] PUSH2 */
0x02,0xf8,/* constant data */
0x57, /* [750'0x2ee] JUMPI */
0x3d, /* [751'0x2ef] RETURNDATASIZE */
0x60, /* [752'0x2f0] PUSH1 */
0x00,/* constant data */
0x80, /* [754'0x2f2] DUP1 */
0x3e, /* [755'0x2f3] RETURNDATACOPY */
0x3d, /* [756'0x2f4] RETURNDATASIZE */
0x60, /* [757'0x2f5] PUSH1 */
0x00,/* constant data */
0xfd, /* [759'0x2f7] REVERT */
0x5b, /* [760'0x2f8] JUMPDEST */
0x50, /* [761'0x2f9] POP */
0x50, /* [762'0x2fa] POP */
0x50, /* [763'0x2fb] POP */
0x50, /* [764'0x2fc] POP */
0x5b, /* [765'0x2fd] JUMPDEST */
0x56, /* [766'0x2fe] JUMP */
0x5b, /* [767'0x2ff] JUMPDEST */
0x33, /* [768'0x300] CALLER */
0x60, /* [769'0x301] PUSH1 */
0x00,/* constant data */
0x90, /* [771'0x303] SWAP1 */
0x81, /* [772'0x304] DUP2 */
0x52, /* [773'0x305] MSTORE */
0x60, /* [774'0x306] PUSH1 */
0x02,/* constant data */
0x60, /* [776'0x308] PUSH1 */
0x20,/* constant data */
0x52, /* [778'0x30a] MSTORE */
0x60, /* [779'0x30b] PUSH1 */
0x40,/* constant data */
0x90, /* [781'0x30d] SWAP1 */
0x20, /* [782'0x30e] SHA3 */
0x54, /* [783'0x30f] SLOAD */
0x15, /* [784'0x310] ISZERO */
0x61, /* [785'0x311] PUSH2 */
0x03,0x19,/* constant data */
0x57, /* [788'0x314] JUMPI */
0x61, /* [789'0x315] PUSH2 */
0x03,0x67,/* constant data */
0x56, /* [792'0x318] JUMP */
0x5b, /* [793'0x319] JUMPDEST */
0x81, /* [794'0x31a] DUP2 */
0x81, /* [795'0x31b] DUP2 */
0x60, /* [796'0x31c] PUSH1 */
0x40,/* constant data */
0x51, /* [798'0x31e] MLOAD */
0x60, /* [799'0x31f] PUSH1 */
0x20,/* constant data */
0x01, /* [801'0x321] ADD */
0x80, /* [802'0x322] DUP1 */
0x83, /* [803'0x323] DUP4 */
0x83, /* [804'0x324] DUP4 */
0x80, /* [805'0x325] DUP1 */
0x82, /* [806'0x326] DUP3 */
0x84, /* [807'0x327] DUP5 */
0x37, /* [808'0x328] CALLDATACOPY */
0x60, /* [809'0x329] PUSH1 */
0x40,/* constant data */
0x80, /* [811'0x32b] DUP1 */
0x51, /* [812'0x32c] MLOAD */
0x91, /* [813'0x32d] SWAP2 */
0x90, /* [814'0x32e] SWAP1 */
0x93, /* [815'0x32f] SWAP4 */
0x01, /* [816'0x330] ADD */
0x81, /* [817'0x331] DUP2 */
0x81, /* [818'0x332] DUP2 */
0x03, /* [819'0x333] SUB */
0x60, /* [820'0x334] PUSH1 */
0x1f,/* constant data */
0x19, /* [822'0x336] NOT */
0x01, /* [823'0x337] ADD */
0x82, /* [824'0x338] DUP3 */
0x52, /* [825'0x339] MSTORE */
0x83, /* [826'0x33a] DUP4 */
0x52, /* [827'0x33b] MSTORE */
0x80, /* [828'0x33c] DUP1 */
0x51, /* [829'0x33d] MLOAD */
0x60, /* [830'0x33e] PUSH1 */
0x20,/* constant data */
0x91, /* [832'0x340] SWAP2 */
0x82, /* [833'0x341] DUP3 */
0x01, /* [834'0x342] ADD */
0x20, /* [835'0x343] SHA3 */
0x33, /* [836'0x344] CALLER */
0x60, /* [837'0x345] PUSH1 */
0x00,/* constant data */
0x90, /* [839'0x347] SWAP1 */
0x81, /* [840'0x348] DUP2 */
0x52, /* [841'0x349] MSTORE */
0x60, /* [842'0x34a] PUSH1 */
0x02,/* constant data */
0x83, /* [844'0x34c] DUP4 */
0x52, /* [845'0x34d] MSTORE */
0x84, /* [846'0x34e] DUP5 */
0x81, /* [847'0x34f] DUP2 */
0x20, /* [848'0x350] SHA3 */
0x91, /* [849'0x351] SWAP2 */
0x90, /* [850'0x352] SWAP1 */
0x91, /* [851'0x353] SWAP2 */
0x55, /* [852'0x354] SSTORE */
0x60, /* [853'0x355] PUSH1 */
0x01,/* constant data */
0x90, /* [855'0x357] SWAP1 */
0x91, /* [856'0x358] SWAP2 */
0x52, /* [857'0x359] MSTORE */
0x91, /* [858'0x35a] SWAP2 */
0x90, /* [859'0x35b] SWAP1 */
0x91, /* [860'0x35c] SWAP2 */
0x20, /* [861'0x35d] SHA3 */
0x60, /* [862'0x35e] PUSH1 */
0x00,/* constant data */
0x19, /* [864'0x360] NOT */
0x90, /* [865'0x361] SWAP1 */
0x55, /* [866'0x362] SSTORE */
0x50, /* [867'0x363] POP */
0x50, /* [868'0x364] POP */
0x50, /* [869'0x365] POP */
0x50, /* [870'0x366] POP */
0x5b, /* [871'0x367] JUMPDEST */
0x50, /* [872'0x368] POP */
0x50, /* [873'0x369] POP */
0x56, /* [874'0x36a] JUMP */
0x5b, /* [875'0x36b] JUMPDEST */
0x60, /* [876'0x36c] PUSH1 */
0x02,/* constant data */
0x60, /* [878'0x36e] PUSH1 */
0x20,/* constant data */
0x52, /* [880'0x370] MSTORE */
0x60, /* [881'0x371] PUSH1 */
0x00,/* constant data */
0x90, /* [883'0x373] SWAP1 */
0x81, /* [884'0x374] DUP2 */
0x52, /* [885'0x375] MSTORE */
0x60, /* [886'0x376] PUSH1 */
0x40,/* constant data */
0x90, /* [888'0x378] SWAP1 */
0x20, /* [889'0x379] SHA3 */
0x54, /* [890'0x37a] SLOAD */
0x81, /* [891'0x37b] DUP2 */
0x56, /* [892'0x37c] JUMP */
0x5b, /* [893'0x37d] JUMPDEST */
0x33, /* [894'0x37e] CALLER */
0x60, /* [895'0x37f] PUSH1 */
0x00,/* constant data */
0x90, /* [897'0x381] SWAP1 */
0x81, /* [898'0x382] DUP2 */
0x52, /* [899'0x383] MSTORE */
0x60, /* [900'0x384] PUSH1 */
0x02,/* constant data */
0x60, /* [902'0x386] PUSH1 */
0x20,/* constant data */
0x52, /* [904'0x388] MSTORE */
0x60, /* [905'0x389] PUSH1 */
0x40,/* constant data */
0x90, /* [907'0x38b] SWAP1 */
0x20, /* [908'0x38c] SHA3 */
0x54, /* [909'0x38d] SLOAD */
0x61, /* [910'0x38e] PUSH2 */
0x03,0x96,/* constant data */
0x57, /* [913'0x391] JUMPI */
0x60, /* [914'0x392] PUSH1 */
0x00,/* constant data */
0x80, /* [916'0x394] DUP1 */
0xfd, /* [917'0x395] REVERT */
0x5b, /* [918'0x396] JUMPDEST */
0x81, /* [919'0x397] DUP2 */
0x81, /* [920'0x398] DUP2 */
0x60, /* [921'0x399] PUSH1 */
0x40,/* constant data */
0x51, /* [923'0x39b] MLOAD */
0x60, /* [924'0x39c] PUSH1 */
0x20,/* constant data */
0x01, /* [926'0x39e] ADD */
0x80, /* [927'0x39f] DUP1 */
0x83, /* [928'0x3a0] DUP4 */
0x83, /* [929'0x3a1] DUP4 */
0x80, /* [930'0x3a2] DUP1 */
0x82, /* [931'0x3a3] DUP3 */
0x84, /* [932'0x3a4] DUP5 */
0x37, /* [933'0x3a5] CALLDATACOPY */
0x80, /* [934'0x3a6] DUP1 */
0x83, /* [935'0x3a7] DUP4 */
0x01, /* [936'0x3a8] ADD */
0x92, /* [937'0x3a9] SWAP3 */
0x50, /* [938'0x3aa] POP */
0x50, /* [939'0x3ab] POP */
0x50, /* [940'0x3ac] POP */
0x92, /* [941'0x3ad] SWAP3 */
0x50, /* [942'0x3ae] POP */
0x50, /* [943'0x3af] POP */
0x50, /* [944'0x3b0] POP */
0x60, /* [945'0x3b1] PUSH1 */
0x40,/* constant data */
0x51, /* [947'0x3b3] MLOAD */
0x60, /* [948'0x3b4] PUSH1 */
0x20,/* constant data */
0x81, /* [950'0x3b6] DUP2 */
0x83, /* [951'0x3b7] DUP4 */
0x03, /* [952'0x3b8] SUB */
0x03, /* [953'0x3b9] SUB */
0x81, /* [954'0x3ba] DUP2 */
0x52, /* [955'0x3bb] MSTORE */
0x90, /* [956'0x3bc] SWAP1 */
0x60, /* [957'0x3bd] PUSH1 */
0x40,/* constant data */
0x52, /* [959'0x3bf] MSTORE */
0x80, /* [960'0x3c0] DUP1 */
0x51, /* [961'0x3c1] MLOAD */
0x90, /* [962'0x3c2] SWAP1 */
0x60, /* [963'0x3c3] PUSH1 */
0x20,/* constant data */
0x01, /* [965'0x3c5] ADD */
0x20, /* [966'0x3c6] SHA3 */
0x60, /* [967'0x3c7] PUSH1 */
0x02,/* constant data */
0x60, /* [969'0x3c9] PUSH1 */
0x00,/* constant data */
0x85, /* [971'0x3cb] DUP6 */
0x60, /* [972'0x3cc] PUSH1 */
0x01,/* constant data */
0x60, /* [974'0x3ce] PUSH1 */
0x01,/* constant data */
0x60, /* [976'0x3d0] PUSH1 */
0xa0,/* constant data */
0x1b, /* [978'0x3d2] SHL */
0x03, /* [979'0x3d3] SUB */
0x16, /* [980'0x3d4] AND */
0x60, /* [981'0x3d5] PUSH1 */
0x01,/* constant data */
0x60, /* [983'0x3d7] PUSH1 */
0x01,/* constant data */
0x60, /* [985'0x3d9] PUSH1 */
0xa0,/* constant data */
0x1b, /* [987'0x3db] SHL */
0x03, /* [988'0x3dc] SUB */
0x16, /* [989'0x3dd] AND */
0x81, /* [990'0x3de] DUP2 */
0x52, /* [991'0x3df] MSTORE */
0x60, /* [992'0x3e0] PUSH1 */
0x20,/* constant data */
0x01, /* [994'0x3e2] ADD */
0x90, /* [995'0x3e3] SWAP1 */
0x81, /* [996'0x3e4] DUP2 */
0x52, /* [997'0x3e5] MSTORE */
0x60, /* [998'0x3e6] PUSH1 */
0x20,/* constant data */
0x01, /* [1000'0x3e8] ADD */
0x60, /* [1001'0x3e9] PUSH1 */
0x00,/* constant data */
0x20, /* [1003'0x3eb] SHA3 */
0x54, /* [1004'0x3ec] SLOAD */
0x14, /* [1005'0x3ed] EQ */
0x61, /* [1006'0x3ee] PUSH2 */
0x03,0xf6,/* constant data */
0x57, /* [1009'0x3f1] JUMPI */
0x60, /* [1010'0x3f2] PUSH1 */
0x00,/* constant data */
0x80, /* [1012'0x3f4] DUP1 */
0xfd, /* [1013'0x3f5] REVERT */
0x5b, /* [1014'0x3f6] JUMPDEST */
0x50, /* [1015'0x3f7] POP */
0x50, /* [1016'0x3f8] POP */
0x60, /* [1017'0x3f9] PUSH1 */
0x01,/* constant data */
0x60, /* [1019'0x3fb] PUSH1 */
0x01,/* constant data */
0x60, /* [1021'0x3fd] PUSH1 */
0xa0,/* constant data */
0x1b, /* [1023'0x3ff] SHL */
0x03, /* [1024'0x400] SUB */
0x16, /* [1025'0x401] AND */
0x60, /* [1026'0x402] PUSH1 */
0x00,/* constant data */
0x90, /* [1028'0x404] SWAP1 */
0x81, /* [1029'0x405] DUP2 */
0x52, /* [1030'0x406] MSTORE */
0x60, /* [1031'0x407] PUSH1 */
0x01,/* constant data */
0x60, /* [1033'0x409] PUSH1 */
0x20,/* constant data */
0x90, /* [1035'0x40b] SWAP1 */
0x81, /* [1036'0x40c] DUP2 */
0x52, /* [1037'0x40d] MSTORE */
0x60, /* [1038'0x40e] PUSH1 */
0x40,/* constant data */
0x80, /* [1040'0x410] DUP1 */
0x83, /* [1041'0x411] DUP4 */
0x20, /* [1042'0x412] SHA3 */
0x43, /* [1043'0x413] NUMBER */
0x90, /* [1044'0x414] SWAP1 */
0x94, /* [1045'0x415] SWAP5 */
0x01, /* [1046'0x416] ADD */
0x90, /* [1047'0x417] SWAP1 */
0x93, /* [1048'0x418] SWAP4 */
0x55, /* [1049'0x419] SSTORE */
0x81, /* [1050'0x41a] DUP2 */
0x90, /* [1051'0x41b] SWAP1 */
0x52, /* [1052'0x41c] MSTORE */
0x20, /* [1053'0x41d] SHA3 */
0x34, /* [1054'0x41e] CALLVALUE */
0x90, /* [1055'0x41f] SWAP1 */
0x55, /* [1056'0x420] SSTORE */
0x56, /* [1057'0x421] JUMP */
0x5b, /* [1058'0x422] JUMPDEST */
0x60, /* [1059'0x423] PUSH1 */
0x00,/* constant data */
0x60, /* [1061'0x425] PUSH1 */
0x20,/* constant data */
0x81, /* [1063'0x427] DUP2 */
0x90, /* [1064'0x428] SWAP1 */
0x52, /* [1065'0x429] MSTORE */
0x90, /* [1066'0x42a] SWAP1 */
0x81, /* [1067'0x42b] DUP2 */
0x52, /* [1068'0x42c] MSTORE */
0x60, /* [1069'0x42d] PUSH1 */
0x40,/* constant data */
0x90, /* [1071'0x42f] SWAP1 */
0x20, /* [1072'0x430] SHA3 */
0x54, /* [1073'0x431] SLOAD */
0x81, /* [1074'0x432] DUP2 */
0x56, /* [1075'0x433] JUMP */
0xfe, /* [1076'0x434] INVALID */
0xa2, /* [1077'0x435] LOG2 */
0x64, /* [1078'0x436] PUSH5 */
0x69,0x70,0x66,0x73,0x58,/* constant data */
0x22, /* [1084'0x43c] INVALID' byte */
0x12, /* [1085'0x43d] SLT */
0x20, /* [1086'0x43e] SHA3 */
0x76, /* [1087'0x43f] PUSH23 */
0x98,0x33,0x52,0xef,0x1b,0xa5,0x3b,0xf7,0x30,0x6c,0xb1,0xa1,0xd0,0xcc,0x54,0x10,0x5e,0x02,0x66,0xe0,0x63,0x94,0x55,/* constant data */
0x81, /* [1111'0x457] DUP2 */
0x54, /* [1112'0x458] SLOAD */
0x52, /* [1113'0x459] MSTORE */
0xb1, /* [1114'0x45a] INVALID' byte */
0x83, /* [1115'0x45b] DUP4 */
0xb5, /* [1116'0x45c] INVALID' byte */
0x53, /* [1117'0x45d] MSTORE8 */
0xa6, /* [1118'0x45e] INVALID' byte */
0x64, /* [1119'0x45f] PUSH5 */
0x73,0x6f,0x6c,0x63,0x43,/* constant data */
0x00, /* [1125'0x465] STOP */
0x07, /* [1126'0x466] SMOD */
0x06, /* [1127'0x467] MOD */
0x00, /* [1128'0x468] STOP */
0x33, /* [1129'0x469] CALLER */
};

const eevm::Code& eevm::EVM2CPP_baby_bank::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_baby_bank::_contract_name = "baby_bank";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_baby_bank> eevm::EVM2CPP_baby_bank::reg{};
const std::string& eevm::EVM2CPP_baby_bank::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_a = 0xa_u256;
constexpr uint256_t c_1f = 0x1f_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_34 = 0x34_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_54 = 0x54_u256;
constexpr uint256_t c_55 = 0x55_u256;
constexpr uint256_t c_5a = 0x5a_u256;
constexpr uint256_t c_60 = 0x60_u256;
constexpr uint256_t c_66 = 0x66_u256;
constexpr uint256_t c_7d = 0x7d_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_8d = 0x8d_u256;
constexpr uint256_t c_9f = 0x9f_u256;
constexpr uint256_t c_a0 = 0xa0_u256;
constexpr uint256_t c_ab = 0xab_u256;
constexpr uint256_t c_b4 = 0xb4_u256;
constexpr uint256_t c_b6 = 0xb6_u256;
constexpr uint256_t c_c2 = 0xc2_u256;
constexpr uint256_t c_d9 = 0xd9_u256;
constexpr uint256_t c_e0 = 0xe0_u256;
constexpr uint256_t c_f4 = 0xf4_u256;
constexpr uint256_t c_106 = 0x106_u256;
constexpr uint256_t c_128 = 0x128_u256;
constexpr uint256_t c_133 = 0x133_u256;
constexpr uint256_t c_13f = 0x13f_u256;
constexpr uint256_t c_156 = 0x156_u256;
constexpr uint256_t c_166 = 0x166_u256;
constexpr uint256_t c_17c = 0x17c_u256;
constexpr uint256_t c_1ac = 0x1ac_u256;
constexpr uint256_t c_1be = 0x1be_u256;
constexpr uint256_t c_1e0 = 0x1e0_u256;
constexpr uint256_t c_1eb = 0x1eb_u256;
constexpr uint256_t c_1f7 = 0x1f7_u256;
constexpr uint256_t c_20e = 0x20e_u256;
constexpr uint256_t c_21e = 0x21e_u256;
constexpr uint256_t c_230 = 0x230_u256;
constexpr uint256_t c_249 = 0x249_u256;
constexpr uint256_t c_2b5 = 0x2b5_u256;
constexpr uint256_t c_2f8 = 0x2f8_u256;
constexpr uint256_t c_2fd = 0x2fd_u256;
constexpr uint256_t c_2ff = 0x2ff_u256;
constexpr uint256_t c_319 = 0x319_u256;
constexpr uint256_t c_367 = 0x367_u256;
constexpr uint256_t c_36b = 0x36b_u256;
constexpr uint256_t c_37d = 0x37d_u256;
constexpr uint256_t c_396 = 0x396_u256;
constexpr uint256_t c_3f6 = 0x3f6_u256;
constexpr uint256_t c_422 = 0x422_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_30f3795c = 0x30f3795c_u256;
constexpr uint256_t c_3ccfd60b = 0x3ccfd60b_u256;
constexpr uint256_t c_519c6377 = 0x519c6377_u256;
constexpr uint256_t c_81e7e20e = 0x81e7e20e_u256;
constexpr uint256_t c_d53d5885 = 0xd53d5885_u256;
constexpr uint256_t c_e3d670d7 = 0xe3d670d7_u256;
constexpr uint256_t g_32 = 0x100000000_u256;
constexpr uint256_t g_67 = 0x736f6c6343_u256;
constexpr uint256_t g_55 = 0x38d7ea4c68000_u256;
constexpr uint256_t g_25 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_24 = 0x10000000000000000000000000000000000000000_u256;
constexpr uint256_t g_66 = 0x983352ef1ba53bf7306cb1a1d0cc54105e0266e0639455_u256;
constexpr uint256_t g_62 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0_u256;
constexpr uint256_t g_63 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff_u256;

// code
void eevm::EVM2CPP_baby_bank::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_55,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_66,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_7d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_8d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_9f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ab,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b4,
&&__invld,
&&pc_b6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_106,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_128,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_133,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_13f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_156,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_166,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_17c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1ac,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1be,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1e0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1eb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1f7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_20e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_21e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_230,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_249,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2b5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2f8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2fd,
&&__invld,
&&pc_2ff,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_319,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_367,
&&__invld,
&&__invld,
&&__invld,
&&pc_36b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_37d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_396,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_422,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [85] */

/* JUMPI */
/* op_0 = Constant((6, 85)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_55;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH1 */
/* val = [224] */

/* SHR */
/* op_0 = Constant((2, 224)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = shr_v(c_e0, v_1_0);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* PUSH4 */
/* val = [821262684] */

/* EQ */
/* op_0 = Constant((5, 821262684)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_6_0 = eq_v(c_30f3795c, v_3_0);


/* PUSH2 */
/* val = [90] */

/* JUMPI */
/* op_0 = Constant((7, 90)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
 
 goto pc_5a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
}pc_1e:
{ /* <============ */ 
on_bb_start(30);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1020253707] */

/* EQ */
/* op_0 = Constant((1, 1020253707)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3ccfd60b, s_0_0);


/* PUSH2 */
/* val = [159] */

/* JUMPI */
/* op_0 = Constant((3, 159)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_9f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_29:
{ /* <============ */ 
on_bb_start(41);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1369203575] */

/* EQ */
/* op_0 = Constant((1, 1369203575)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_519c6377, s_0_0);


/* PUSH2 */
/* val = [182] */

/* JUMPI */
/* op_0 = Constant((3, 182)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_34:
{ /* <============ */ 
on_bb_start(52);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2179457550] */

/* EQ */
/* op_0 = Constant((1, 2179457550)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_81e7e20e, s_0_0);


/* PUSH2 */
/* val = [307] */

/* JUMPI */
/* op_0 = Constant((3, 307)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_133;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f:
{ /* <============ */ 
on_bb_start(63);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3577567365] */

/* EQ */
/* op_0 = Constant((1, 3577567365)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d53d5885, s_0_0);


/* PUSH2 */
/* val = [358] */

/* JUMPI */
/* op_0 = Constant((3, 358)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_166;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4a:
{ /* <============ */ 
on_bb_start(74);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3822481623] */

/* EQ */
/* op_0 = Constant((1, 3822481623)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_e3d670d7, s_0_0);


/* PUSH2 */
/* val = [491] */

/* JUMPI */
/* op_0 = Constant((3, 491)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1eb;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_55:
{ /* <============ */ 
on_bb_start(85);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_5a:
{ /* <============ */ 
on_bb_start(90);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [102] */

/* JUMPI */
/* op_0 = Constant((4, 102)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_66;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_62:
{ /* <============ */ 
on_bb_start(98);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_66:
{ /* <============ */ 
on_bb_start(102);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [141] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [125] */

/* JUMPI */
/* op_0 = Constant((11, 125)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_7d;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_79:
{ /* <============ */ 
on_bb_start(121);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7d:
{ /* <============ */ 
on_bb_start(125);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = calldataload_v(s_0_1);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((5, 160)) */
/* op_1 = Constant((4, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((3, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = and_v(g_25, v_2_0);


/* PUSH2 */
/* val = [542] */

/* JUMP */
/* op_0 = Constant((9, 542)) */
/* BB finalizer */
ctxt->s.set(1, v_8_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_21e;


}pc_8d:
{ /* <============ */ 
on_bb_start(141);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((1, 64)) */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_3_0 = mload_v(c_40);


/* SWAP2 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((3, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_3_0, s_0_0);


/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_7_0 = mload_v(c_40);


/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* SUB */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_11_0 = sub_v(v_3_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((12, 32)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = add_v(c_20, v_11_0);


/* SWAP1 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((7, 0)) */

/* RETURN */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = InstructionRef((13, 0)) */
return_v(v_7_0, v_13_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_9f:
{ /* <============ */ 
on_bb_start(159);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [171] */

/* JUMPI */
/* op_0 = Constant((4, 171)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_ab;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_a7:
{ /* <============ */ 
on_bb_start(167);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ab:
{ /* <============ */ 
on_bb_start(171);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [180] */

/* PUSH2 */
/* val = [560] */

/* JUMP */
/* op_0 = Constant((3, 560)) */
/* BB finalizer */
ctxt->s.set(0, c_b4);
/* no pops at end */
/* no BB returns */

goto pc_230;


}pc_b4:
{ /* <============ */ 
on_bb_start(180);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b6:
{ /* <============ */ 
on_bb_start(182);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [194] */

/* JUMPI */
/* op_0 = Constant((4, 194)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_c2;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_be:
{ /* <============ */ 
on_bb_start(190);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c2:
{ /* <============ */ 
on_bb_start(194);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [180] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [217] */

/* JUMPI */
/* op_0 = Constant((11, 217)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_b4);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_d9;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_b4);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_d5:
{ /* <============ */ 
on_bb_start(213);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d9:
{ /* <============ */ 
on_bb_start(217);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_1, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = add_v(s_0_1, c_20);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_8_0 = calldataload_v(s_0_1);


/* PUSH5 */
/* val = [4294967296] */

/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* GT */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((9, 4294967296)) */
const uint256_t v_11_0 = gt_v(v_8_0, g_32);


/* ISZERO */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = iszero_v(v_11_0);


/* PUSH2 */
/* val = [244] */

/* JUMPI */
/* op_0 = Constant((13, 244)) */
/* op_1 = InstructionRef((12, 0)) */
if ( v_12_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, s_0_1);

ctxt->s.set(1, v_2_0);
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 InstructionRef((8, 0))*/
ctxt->s.push(v_8_0);
 
 goto pc_f4;
 
 }

/* BB finalizer */
ctxt->s.set(0, s_0_1);

ctxt->s.set(1, v_2_0);
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 1 InstructionRef((8, 0))*/
ctxt->s.push(v_8_0);
}pc_f0:
{ /* <============ */ 
on_bb_start(240);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f4:
{ /* <============ */ 
on_bb_start(244);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP3 */
/* op_0 = StackRef((0, 2)) */

/* ADD */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_2, s_0_0);


/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [32] */

/* DUP3 */
/* op_0 = InstructionRef((2, 0)) */

/* ADD */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = add_v(v_2_0, c_20);


/* GT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::GT, v_6_0, s_0_3);
const uint256_t v_7_0 = gt_v(v_6_0, s_0_3);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* PUSH2 */
/* val = [262] */

/* JUMPI */
/* op_0 = Constant((9, 262)) */
/* op_1 = InstructionRef((8, 0)) */
if ( v_8_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_106;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */
}pc_102:
{ /* <============ */ 
on_bb_start(258);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_106:
{ /* <============ */ 
on_bb_start(262);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_2_0 = calldataload_v(s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((4, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_5_0 = add_v(c_20, s_0_0);


/* SWAP2 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = StackRef((0, 1)) */

/* DUP5 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [1] */

/* DUP4 */
/* op_0 = InstructionRef((2, 0)) */

/* MUL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((8, 1)) */
/* val = [] */

/* DUP5 */
/* op_0 = InstructionRef((5, 0)) */

/* ADD */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(v_5_0, v_2_0);


/* GT */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::GT, v_12_0, s_0_3);
const uint256_t v_13_0 = gt_v(v_12_0, s_0_3);


/* PUSH5 */
/* val = [4294967296] */

/* DUP4 */
/* op_0 = InstructionRef((2, 0)) */

/* GT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((14, 4294967296)) */
const uint256_t v_16_0 = gt_v(v_2_0, g_32);


/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_17_0 = or_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* PUSH2 */
/* val = [296] */

/* JUMPI */
/* op_0 = Constant((19, 296)) */
/* op_1 = InstructionRef((18, 0)) */
if ( v_18_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_2_0);

ctxt->s.set(1, v_5_0);
/* no pops at end */
/* BB return 0 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
 
 goto pc_128;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_2_0);

ctxt->s.set(1, v_5_0);
/* no pops at end */
/* BB return 0 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
}pc_124:
{ /* <============ */ 
on_bb_start(292);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_128:
{ /* <============ */ 
on_bb_start(296);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 2)) */

/* SWAP3 */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 3)) */

/* POP */

/* PUSH2 */
/* val = [767] */

/* JUMP */
/* op_0 = Constant((7, 767)) */
/* BB finalizer */
ctxt->s.set(3, s_0_1);

ctxt->s.set(4, s_0_2);
ctxt->s.pop_drop_n(3);
/* no BB returns */

goto pc_2ff;


}pc_133:
{ /* <============ */ 
on_bb_start(307);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [319] */

/* JUMPI */
/* op_0 = Constant((4, 319)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_13f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_13b:
{ /* <============ */ 
on_bb_start(315);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_13f:
{ /* <============ */ 
on_bb_start(319);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [141] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [342] */

/* JUMPI */
/* op_0 = Constant((11, 342)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_156;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_152:
{ /* <============ */ 
on_bb_start(338);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_156:
{ /* <============ */ 
on_bb_start(342);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = calldataload_v(s_0_1);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((5, 160)) */
/* op_1 = Constant((4, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((3, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = and_v(g_25, v_2_0);


/* PUSH2 */
/* val = [875] */

/* JUMP */
/* op_0 = Constant((9, 875)) */
/* BB finalizer */
ctxt->s.set(1, v_8_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_36b;


}pc_166:
{ /* <============ */ 
on_bb_start(358);
/* JUMPDEST */

/* PUSH2 */
/* val = [180] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((2, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 4)) */
const uint256_t v_5_0 = sub_v(v_4_0, c_4);


/* PUSH1 */
/* val = [96] */

/* DUP2 */
/* op_0 = InstructionRef((5, 0)) */

/* LT */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((6, 96)) */
const uint256_t v_8_0 = lt_v(v_5_0, c_60);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [380] */

/* JUMPI */
/* op_0 = Constant((10, 380)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 180))*/
ctxt->s.push(c_b4);
/* BB return 1 Constant((2, 4))*/
ctxt->s.push(c_4);
/* BB return 2 InstructionRef((5, 0))*/
ctxt->s.push(v_5_0);
 
 goto pc_17c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 180))*/
ctxt->s.push(c_b4);
/* BB return 1 Constant((2, 4))*/
ctxt->s.push(c_4);
/* BB return 2 InstructionRef((5, 0))*/
ctxt->s.push(v_5_0);
}pc_178:
{ /* <============ */ 
on_bb_start(376);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_17c:
{ /* <============ */ 
on_bb_start(380);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = calldataload_v(s_0_1);


/* SWAP2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((6, 160)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((4, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* PUSH1 */
/* val = [32] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((9, 32)) */
const uint256_t v_11_0 = add_v(s_0_1, c_20);


/* CALLDATALOAD */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = calldataload_v(v_11_0);


/* AND */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((8, 1461501637330902918203684832716283019655932542975)) */
const uint256_t v_13_0 = and_v(v_12_0, g_25);


/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_16_0 = add_v(s_0_1, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [96] */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((18, 96)) */
const uint256_t v_20_0 = add_v(s_0_1, c_60);


/* PUSH1 */
/* val = [64] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((21, 64)) */
const uint256_t v_23_0 = add_v(s_0_1, c_40);


/* CALLDATALOAD */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_24_0 = calldataload_v(v_23_0);


/* PUSH5 */
/* val = [4294967296] */

/* DUP2 */
/* op_0 = InstructionRef((24, 0)) */

/* GT */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = Constant((25, 4294967296)) */
const uint256_t v_27_0 = gt_v(v_24_0, g_32);


/* ISZERO */
/* op_0 = InstructionRef((27, 0)) */
const uint256_t v_28_0 = iszero_v(v_27_0);


/* PUSH2 */
/* val = [428] */

/* JUMPI */
/* op_0 = Constant((29, 428)) */
/* op_1 = InstructionRef((28, 0)) */
if ( v_28_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_13_0);

ctxt->s.set(1, v_2_0);
/* no pops at end */
/* BB return 0 InstructionRef((16, 0))*/
ctxt->s.push(v_16_0);
/* BB return 1 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
/* BB return 2 InstructionRef((20, 0))*/
ctxt->s.push(v_20_0);
/* BB return 3 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
 
 goto pc_1ac;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_13_0);

ctxt->s.set(1, v_2_0);
/* no pops at end */
/* BB return 0 InstructionRef((16, 0))*/
ctxt->s.push(v_16_0);
/* BB return 1 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
/* BB return 2 InstructionRef((20, 0))*/
ctxt->s.push(v_20_0);
/* BB return 3 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
}pc_1a8:
{ /* <============ */ 
on_bb_start(424);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1ac:
{ /* <============ */ 
on_bb_start(428);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP3 */
/* op_0 = StackRef((0, 2)) */

/* ADD */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_2, s_0_0);


/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [32] */

/* DUP3 */
/* op_0 = InstructionRef((2, 0)) */

/* ADD */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = add_v(v_2_0, c_20);


/* GT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::GT, v_6_0, s_0_3);
const uint256_t v_7_0 = gt_v(v_6_0, s_0_3);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* PUSH2 */
/* val = [446] */

/* JUMPI */
/* op_0 = Constant((9, 446)) */
/* op_1 = InstructionRef((8, 0)) */
if ( v_8_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_1be;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_2_0);
/* no pops at end */
/* no BB returns */
}pc_1ba:
{ /* <============ */ 
on_bb_start(442);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1be:
{ /* <============ */ 
on_bb_start(446);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_2_0 = calldataload_v(s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((4, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_5_0 = add_v(c_20, s_0_0);


/* SWAP2 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = StackRef((0, 1)) */

/* DUP5 */
/* op_0 = StackRef((0, 3)) */

/* PUSH1 */
/* val = [1] */

/* DUP4 */
/* op_0 = InstructionRef((2, 0)) */

/* MUL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((8, 1)) */
/* val = [] */

/* DUP5 */
/* op_0 = InstructionRef((5, 0)) */

/* ADD */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(v_5_0, v_2_0);


/* GT */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::GT, v_12_0, s_0_3);
const uint256_t v_13_0 = gt_v(v_12_0, s_0_3);


/* PUSH5 */
/* val = [4294967296] */

/* DUP4 */
/* op_0 = InstructionRef((2, 0)) */

/* GT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((14, 4294967296)) */
const uint256_t v_16_0 = gt_v(v_2_0, g_32);


/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_17_0 = or_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* PUSH2 */
/* val = [480] */

/* JUMPI */
/* op_0 = Constant((19, 480)) */
/* op_1 = InstructionRef((18, 0)) */
if ( v_18_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_2_0);

ctxt->s.set(1, v_5_0);
/* no pops at end */
/* BB return 0 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
 
 goto pc_1e0;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_2_0);

ctxt->s.set(1, v_5_0);
/* no pops at end */
/* BB return 0 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
}pc_1dc:
{ /* <============ */ 
on_bb_start(476);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1e0:
{ /* <============ */ 
on_bb_start(480);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 2)) */

/* SWAP3 */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 3)) */

/* POP */

/* PUSH2 */
/* val = [893] */

/* JUMP */
/* op_0 = Constant((7, 893)) */
/* BB finalizer */
ctxt->s.set(3, s_0_1);

ctxt->s.set(4, s_0_2);
ctxt->s.pop_drop_n(3);
/* no BB returns */

goto pc_37d;


}pc_1eb:
{ /* <============ */ 
on_bb_start(491);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [503] */

/* JUMPI */
/* op_0 = Constant((4, 503)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_1f7;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_1f3:
{ /* <============ */ 
on_bb_start(499);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1f7:
{ /* <============ */ 
on_bb_start(503);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [141] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* LT */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = Constant((7, 32)) */
const uint256_t v_9_0 = lt_v(v_6_0, c_20);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [526] */

/* JUMPI */
/* op_0 = Constant((11, 526)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_20e;
 
 }

/* BB finalizer */
ctxt->s.set(0, c_8d);
/* no pops at end */
/* BB return 0 Constant((3, 4))*/
ctxt->s.push(c_4);
/* BB return 1 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_20a:
{ /* <============ */ 
on_bb_start(522);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_20e:
{ /* <============ */ 
on_bb_start(526);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* CALLDATALOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = calldataload_v(s_0_1);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((5, 160)) */
/* op_1 = Constant((4, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((3, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = and_v(g_25, v_2_0);


/* PUSH2 */
/* val = [1058] */

/* JUMP */
/* op_0 = Constant((9, 1058)) */
/* BB finalizer */
ctxt->s.set(1, v_8_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

goto pc_422;


}pc_21e:
{ /* <============ */ 
on_bb_start(542);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((2, 32)) */
/* op_1 = Constant((1, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((4, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((4, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(c_0, s_0_0);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((8, 64)) */
/* op_1 = Constant((4, 0)) */

/* SHA3 */
/* op_0 = Constant((4, 0)) */
/* op_1 = Constant((8, 64)) */
const uint256_t v_10_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = sload_v(v_10_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(0, v_11_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_1);


}pc_230:
{ /* <============ */ 
on_bb_start(560);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */
mstore_v(c_0, v_1_0);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((6, 32)) */

/* MSTORE */
/* op_0 = Constant((6, 32)) */
/* op_1 = Constant((2, 0)) */
mstore_v(c_20, c_0);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((10, 64)) */
/* op_1 = Constant((2, 0)) */

/* SHA3 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((10, 64)) */
const uint256_t v_12_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((12, 0)) */
const uint256_t v_13_0 = sload_v(v_12_0);


/* PUSH2 */
/* val = [585] */

/* JUMPI */
/* op_0 = Constant((14, 585)) */
/* op_1 = InstructionRef((13, 0)) */
if ( v_13_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_249;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_245:
{ /* <============ */ 
on_bb_start(581);
/* PUSH2 */
/* val = [765] */

/* JUMP */
/* op_0 = Constant((0, 765)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_2fd;


}pc_249:
{ /* <============ */ 
on_bb_start(585);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */
mstore_v(c_0, v_1_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((7, 32)) */
/* op_1 = Constant((6, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [64] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((9, 64)) */
const uint256_t v_11_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = sload_v(v_11_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* NUMBER */
const uint256_t v_15_0 = number_v();


/* GT */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((12, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_15_0, v_12_0);
const uint256_t v_16_0 = gt_v(v_15_0, v_12_0);


/* ISZERO */
/* op_0 = InstructionRef((16, 0)) */
const uint256_t v_17_0 = iszero_v(v_16_0);


/* PUSH2 */
/* val = [693] */

/* JUMPI */
/* op_0 = Constant((18, 693)) */
/* op_1 = InstructionRef((17, 0)) */
if ( v_17_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((2, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 0))*/
ctxt->s.push(c_0);
 
 goto pc_2b5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((2, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 0))*/
ctxt->s.push(c_0);
}pc_263:
{ /* <============ */ 
on_bb_start(611);
/* POP */

/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((1, 64)) */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_3_0 = mload_v(c_40);


/* NUMBER */
const uint256_t v_4_0 = number_v();


/* PUSH1 */
/* val = [32] */

/* DUP1 */
/* op_0 = Constant((5, 32)) */
/* val = [32] */

/* DUP4 */
/* op_0 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((5, 32)) */
const uint256_t v_8_0 = add_v(v_3_0, c_20);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((4, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((5, 32)) */

/* SWAP2 */
/* op_0 = Constant((5, 32)) */
/* op_1 = InstructionRef((8, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((4, 0)) */
mstore_v(v_8_0, v_4_0);


/* CALLER */
const uint256_t v_13_0 = caller_v();


/* PUSH1 */
/* val = [96] */

/* SHL */
/* op_0 = Constant((14, 96)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_15_0 = shl_v(c_60, v_13_0);


/* DUP3 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP5 */
/* op_0 = Constant((1, 64)) */
/* val = [64] */

/* ADD */
/* op_0 = Constant((1, 64)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_18_0 = add_v(c_40, v_3_0);


/* MSTORE */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((15, 0)) */
mstore_v(v_18_0, v_15_0);


/* DUP3 */
/* op_0 = Constant((1, 64)) */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_21_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((21, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((3, 0)) */

/* SUB */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = InstructionRef((21, 0)) */
const uint256_t v_24_0 = sub_v(v_3_0, v_21_0);


/* PUSH1 */
/* val = [52] */

/* ADD */
/* op_0 = Constant((25, 52)) */
/* op_1 = InstructionRef((24, 0)) */
const uint256_t v_26_0 = add_v(c_34, v_24_0);


/* DUP2 */
/* op_0 = InstructionRef((21, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((26, 0)) */
mstore_v(v_21_0, v_26_0);


/* PUSH1 */
/* val = [84] */

/* SWAP1 */
/* op_0 = Constant((29, 84)) */
/* op_1 = InstructionRef((21, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* ADD */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((29, 84)) */
const uint256_t v_32_0 = add_v(v_3_0, c_54);


/* SWAP1 */
/* op_0 = InstructionRef((32, 0)) */
/* op_1 = Constant((5, 32)) */

/* SWAP3 */
/* op_0 = Constant((5, 32)) */
/* op_1 = Constant((1, 64)) */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = InstructionRef((32, 0)) */
mstore_v(c_40, v_32_0);


/* DUP1 */
/* op_0 = InstructionRef((21, 0)) */

/* MLOAD */
/* op_0 = InstructionRef((21, 0)) */
const uint256_t v_37_0 = mload_v(v_21_0);


/* SWAP2 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = Constant((5, 32)) */

/* ADD */
/* op_0 = Constant((5, 32)) */
/* op_1 = InstructionRef((21, 0)) */
const uint256_t v_39_0 = add_v(c_20, v_21_0);


/* SHA3 */
/* op_0 = InstructionRef((39, 0)) */
/* op_1 = InstructionRef((37, 0)) */
const uint256_t v_40_0 = sha3_v(v_39_0, v_37_0);


/* PUSH1 */
/* val = [10] */

/* SWAP1 */
/* op_0 = Constant((41, 10)) */
/* op_1 = InstructionRef((40, 0)) */

/* MOD */
/* op_0 = InstructionRef((40, 0)) */
/* op_1 = Constant((41, 10)) */
const uint256_t v_43_0 = mod_v(v_40_0, c_a);


/* DUP1 */
/* op_0 = InstructionRef((43, 0)) */

/* PUSH2 */
/* val = [693] */

/* JUMPI */
/* op_0 = Constant((45, 693)) */
/* op_1 = InstructionRef((43, 0)) */
if ( v_43_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_43_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_2b5;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_43_0);
/* no pops at end */
/* no BB returns */
}pc_29a:
{ /* <============ */ 
on_bb_start(666);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* CALLER */
const uint256_t v_0_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = InstructionRef((0, 0)) */

/* DUP2 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((1, 0)) */
/* op_1 = InstructionRef((0, 0)) */
mstore_v(c_0, v_0_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((6, 32)) */
/* op_1 = Constant((5, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((8, 64)) */
/* op_1 = Constant((1, 0)) */

/* SHA3 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((8, 64)) */
const uint256_t v_10_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = sload_v(v_10_0);


/* PUSH7 */
/* val = [1000000000000000] */

/* MUL */
/* op_0 = Constant((12, 1000000000000000)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = mul_v(g_55, v_11_0);


/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* BB finalizer */
ctxt->s.set(1, v_13_0);
/* no pops at end */
/* no BB returns */
}pc_2b5:
{ /* <============ */ 
on_bb_start(693);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */
mstore_v(c_0, v_1_0);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((6, 32)) */

/* MSTORE */
/* op_0 = Constant((6, 32)) */
/* op_1 = Constant((2, 0)) */
mstore_v(c_20, c_0);


/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((10, 64)) */
/* val = [64] */

/* DUP3 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((10, 64)) */
const uint256_t v_13_0 = sha3_v(c_0, c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((13, 0)) */
const uint256_t v_15_0 = sload_v(v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* DUP4 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = Constant((2, 0)) */
sstore_v(v_13_0, c_0);


/* SWAP1 */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = Constant((10, 64)) */

/* MLOAD */
/* op_0 = Constant((10, 64)) */
const uint256_t v_21_0 = mload_v(c_40);


/* SWAP1 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((15, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_24_0 = add_v(s_0_1, v_15_0);


/* SWAP3 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((24, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((24, 0)) */
const uint256_t v_28_0 = iszero_v(v_24_0);


/* PUSH2 */
/* val = [2300] */

/* MUL */
/* op_0 = Constant((29, 2300)) */
/* op_1 = InstructionRef((28, 0)) */
const uint256_t v_30_0 = mul_v(c_8fc, v_28_0);


/* SWAP2 */
/* op_0 = InstructionRef((30, 0)) */
/* op_1 = InstructionRef((21, 0)) */

/* DUP5 */
/* op_0 = InstructionRef((24, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = Constant((2, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((21, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* DUP2 */
/* op_0 = InstructionRef((21, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((24, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((30, 0)) */

/* CALL */
/* op_0 = InstructionRef((30, 0)) */
/* op_1 = InstructionRef((1, 0)) */
/* op_2 = InstructionRef((24, 0)) */
/* op_3 = InstructionRef((21, 0)) */
/* op_4 = Constant((2, 0)) */
/* op_5 = InstructionRef((21, 0)) */
/* op_6 = Constant((2, 0)) */
const uint256_t v_40_0 = call_v(v_30_0, v_1_0, v_24_0, v_21_0, c_0, v_21_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((40, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((40, 0)) */
const uint256_t v_46_0 = iszero_v(v_40_0);


/* DUP1 */
/* op_0 = InstructionRef((46, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((46, 0)) */
const uint256_t v_48_0 = iszero_v(v_46_0);


/* PUSH2 */
/* val = [760] */

/* JUMPI */
/* op_0 = Constant((49, 760)) */
/* op_1 = InstructionRef((48, 0)) */
if ( v_48_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 1 InstructionRef((46, 0))*/
ctxt->s.push(v_46_0);
 
 goto pc_2f8;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((24, 0))*/
ctxt->s.push(v_24_0);
/* BB return 1 InstructionRef((46, 0))*/
ctxt->s.push(v_46_0);
}pc_2ef:
{ /* <============ */ 
on_bb_start(751);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2f8:
{ /* <============ */ 
on_bb_start(760);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(4);
/* no BB returns */
}pc_2fd:
{ /* <============ */ 
on_bb_start(765);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_2ff:
{ /* <============ */ 
on_bb_start(767);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */
mstore_v(c_0, v_1_0);


/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((7, 32)) */
/* op_1 = Constant((6, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((9, 64)) */
/* op_1 = Constant((2, 0)) */

/* SHA3 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((9, 64)) */
const uint256_t v_11_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = sload_v(v_11_0);


/* ISZERO */
/* op_0 = InstructionRef((12, 0)) */
const uint256_t v_13_0 = iszero_v(v_12_0);


/* PUSH2 */
/* val = [793] */

/* JUMPI */
/* op_0 = Constant((14, 793)) */
/* op_1 = InstructionRef((13, 0)) */
if ( v_13_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_319;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_315:
{ /* <============ */ 
on_bb_start(789);
/* PUSH2 */
/* val = [871] */

/* JUMP */
/* op_0 = Constant((0, 871)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_367;


}pc_319:
{ /* <============ */ 
on_bb_start(793);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((3, 64)) */
const uint256_t v_4_0 = mload_v(c_40);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((5, 32)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = add_v(c_20, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* DUP5 */
/* op_0 = InstructionRef((6, 0)) */

/* CALLDATACOPY */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 0)) */
calldatacopy_v(v_6_0, s_0_1, s_0_0);


/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((14, 64)) */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_16_0 = mload_v(c_40);


/* SWAP2 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((14, 64)) */

/* SWAP4 */
/* op_0 = Constant((14, 64)) */
/* op_1 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_20_0 = add_v(v_6_0, s_0_0);


/* DUP2 */
/* op_0 = InstructionRef((16, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((20, 0)) */

/* SUB */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((16, 0)) */
const uint256_t v_23_0 = sub_v(v_20_0, v_16_0);


/* PUSH1 */
/* val = [31] */

/* NOT */
/* op_0 = Constant((24, 31)) */
/* val = [115792089237316195423570985008687907853269984665640564039457584007913129639904] */

/* ADD */
/* op_0 = Constant((25, 115792089237316195423570985008687907853269984665640564039457584007913129639904)) */
/* op_1 = InstructionRef((23, 0)) */
const uint256_t v_26_0 = add_v(g_62, v_23_0);


/* DUP3 */
/* op_0 = InstructionRef((16, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((26, 0)) */
mstore_v(v_16_0, v_26_0);


/* DUP4 */
/* op_0 = Constant((14, 64)) */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((14, 64)) */
/* op_1 = InstructionRef((20, 0)) */
mstore_v(c_40, v_20_0);


/* DUP1 */
/* op_0 = InstructionRef((16, 0)) */

/* MLOAD */
/* op_0 = InstructionRef((16, 0)) */
const uint256_t v_32_0 = mload_v(v_16_0);


/* PUSH1 */
/* val = [32] */

/* SWAP2 */
/* op_0 = Constant((33, 32)) */
/* op_1 = InstructionRef((16, 0)) */

/* DUP3 */
/* op_0 = Constant((33, 32)) */
/* val = [32] */

/* ADD */
/* op_0 = Constant((33, 32)) */
/* op_1 = InstructionRef((16, 0)) */
const uint256_t v_36_0 = add_v(c_20, v_16_0);


/* SHA3 */
/* op_0 = InstructionRef((36, 0)) */
/* op_1 = InstructionRef((32, 0)) */
const uint256_t v_37_0 = sha3_v(v_36_0, v_32_0);


/* CALLER */
const uint256_t v_38_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((39, 0)) */
/* op_1 = InstructionRef((38, 0)) */

/* DUP2 */
/* op_0 = Constant((39, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((39, 0)) */
/* op_1 = InstructionRef((38, 0)) */
mstore_v(c_0, v_38_0);


/* PUSH1 */
/* val = [2] */

/* DUP4 */
/* op_0 = Constant((33, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((33, 32)) */
/* op_1 = Constant((43, 2)) */
mstore_v(c_20, c_2);


/* DUP5 */
/* op_0 = Constant((14, 64)) */
/* val = [64] */

/* DUP2 */
/* op_0 = Constant((39, 0)) */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((39, 0)) */
/* op_1 = Constant((14, 64)) */
const uint256_t v_48_0 = sha3_v(c_0, c_40);


/* SWAP2 */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((37, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = Constant((39, 0)) */

/* SWAP2 */
/* op_0 = Constant((39, 0)) */
/* op_1 = InstructionRef((48, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((37, 0)) */
sstore_v(v_48_0, v_37_0);


/* PUSH1 */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((53, 1)) */
/* op_1 = Constant((39, 0)) */

/* SWAP2 */
/* op_0 = Constant((39, 0)) */
/* op_1 = Constant((33, 32)) */

/* MSTORE */
/* op_0 = Constant((33, 32)) */
/* op_1 = Constant((53, 1)) */
mstore_v(c_20, c_1);


/* SWAP2 */
/* op_0 = Constant((39, 0)) */
/* op_1 = Constant((14, 64)) */

/* SWAP1 */
/* op_0 = Constant((14, 64)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP2 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((39, 0)) */

/* SHA3 */
/* op_0 = Constant((39, 0)) */
/* op_1 = Constant((14, 64)) */
const uint256_t v_60_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* NOT */
/* op_0 = Constant((61, 0)) */
/* val = [115792089237316195423570985008687907853269984665640564039457584007913129639935] */

/* SWAP1 */
/* op_0 = Constant((62, 115792089237316195423570985008687907853269984665640564039457584007913129639935)) */
/* op_1 = InstructionRef((60, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((60, 0)) */
/* op_1 = Constant((62, 115792089237316195423570985008687907853269984665640564039457584007913129639935)) */
sstore_v(v_60_0, g_63);


/* POP */

/* POP */

/* POP */

/* POP */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_367:
{ /* <============ */ 
on_bb_start(871);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_36b:
{ /* <============ */ 
on_bb_start(875);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((2, 32)) */
/* op_1 = Constant((1, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((4, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((4, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(c_0, s_0_0);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((8, 64)) */
/* op_1 = Constant((4, 0)) */

/* SHA3 */
/* op_0 = Constant((4, 0)) */
/* op_1 = Constant((8, 64)) */
const uint256_t v_10_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((10, 0)) */
const uint256_t v_11_0 = sload_v(v_10_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(0, v_11_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_1);


}pc_37d:
{ /* <============ */ 
on_bb_start(893);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((1, 0)) */
mstore_v(c_0, v_1_0);


/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((7, 32)) */
/* op_1 = Constant((6, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((9, 64)) */
/* op_1 = Constant((2, 0)) */

/* SHA3 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((9, 64)) */
const uint256_t v_11_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = sload_v(v_11_0);


/* PUSH2 */
/* val = [918] */

/* JUMPI */
/* op_0 = Constant((13, 918)) */
/* op_1 = InstructionRef((12, 0)) */
if ( v_12_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_396;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_392:
{ /* <============ */ 
on_bb_start(914);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_396:
{ /* <============ */ 
on_bb_start(918);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((3, 64)) */
const uint256_t v_4_0 = mload_v(c_40);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((5, 32)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = add_v(c_20, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* DUP5 */
/* op_0 = InstructionRef((6, 0)) */

/* CALLDATACOPY */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 0)) */
calldatacopy_v(v_6_0, s_0_1, s_0_0);


/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_16_0 = add_v(v_6_0, s_0_0);


/* SWAP3 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((6, 0)) */

/* POP */

/* POP */

/* POP */

/* SWAP3 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((25, 64)) */
const uint256_t v_26_0 = mload_v(c_40);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = InstructionRef((26, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((16, 0)) */

/* SUB */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_30_0 = sub_v(v_16_0, v_26_0);


/* SUB */
/* op_0 = InstructionRef((30, 0)) */
/* op_1 = Constant((27, 32)) */
const uint256_t v_31_0 = sub_v(v_30_0, c_20);


/* DUP2 */
/* op_0 = InstructionRef((26, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((31, 0)) */
mstore_v(v_26_0, v_31_0);


/* SWAP1 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((16, 0)) */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((35, 64)) */
/* op_1 = InstructionRef((16, 0)) */
mstore_v(c_40, v_16_0);


/* DUP1 */
/* op_0 = InstructionRef((26, 0)) */

/* MLOAD */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_38_0 = mload_v(v_26_0);


/* SWAP1 */
/* op_0 = InstructionRef((38, 0)) */
/* op_1 = InstructionRef((26, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((40, 32)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_41_0 = add_v(c_20, v_26_0);


/* SHA3 */
/* op_0 = InstructionRef((41, 0)) */
/* op_1 = InstructionRef((38, 0)) */
const uint256_t v_42_0 = sha3_v(v_41_0, v_38_0);


/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [0] */

/* DUP6 */
/* op_0 = StackRef((0, 2)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((48, 160)) */
/* op_1 = Constant((47, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((49, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((46, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((50, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_51_0 = and_v(g_25, s_0_2);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((54, 160)) */
/* op_1 = Constant((53, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((55, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((52, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((56, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((51, 0)) */
const uint256_t v_57_0 = and_v(g_25, v_51_0);


/* DUP2 */
/* op_0 = Constant((44, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((44, 0)) */
/* op_1 = InstructionRef((57, 0)) */
mstore_v(c_0, v_57_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((60, 32)) */
/* op_1 = Constant((44, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((61, 32)) */
/* op_1 = Constant((43, 2)) */

/* DUP2 */
/* op_0 = Constant((61, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((61, 32)) */
/* op_1 = Constant((43, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((65, 32)) */
/* op_1 = Constant((61, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((67, 0)) */
/* op_1 = Constant((66, 64)) */
const uint256_t v_68_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((68, 0)) */
const uint256_t v_69_0 = sload_v(v_68_0);


/* EQ */
/* op_0 = InstructionRef((69, 0)) */
/* op_1 = InstructionRef((42, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_69_0, v_42_0);
const uint256_t v_70_0 = eq_v(v_69_0, v_42_0);


/* PUSH2 */
/* val = [1014] */

/* JUMPI */
/* op_0 = Constant((71, 1014)) */
/* op_1 = InstructionRef((70, 0)) */
if ( v_70_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_3f6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f2:
{ /* <============ */ 
on_bb_start(1010);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f6:
{ /* <============ */ 
on_bb_start(1014);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* POP */

/* POP */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [160] */

/* SHL */
/* op_0 = Constant((5, 160)) */
/* op_1 = Constant((4, 1)) */
/* val = [1461501637330902918203684832716283019655932542976] */

/* SUB */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542976)) */
/* op_1 = Constant((3, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_8_0 = and_v(g_25, s_0_2);


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((9, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* DUP2 */
/* op_0 = Constant((9, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((9, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(c_0, v_8_0);


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((13, 1)) */

/* DUP2 */
/* op_0 = Constant((14, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((13, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [64] */

/* DUP1 */
/* op_0 = Constant((18, 64)) */
/* val = [64] */

/* DUP4 */
/* op_0 = Constant((9, 0)) */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((9, 0)) */
/* op_1 = Constant((18, 64)) */
const uint256_t v_21_0 = sha3_v(c_0, c_40);


/* NUMBER */
const uint256_t v_22_0 = number_v();


/* SWAP1 */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((21, 0)) */

/* SWAP5 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = StackRef((0, 3)) */

/* ADD */
/* op_0 = StackRef((0, 3)) */
/* op_1 = InstructionRef((22, 0)) */
const uint256_t v_25_0 = add_v(s_0_3, v_22_0);


/* SWAP1 */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = Constant((18, 64)) */

/* SWAP4 */
/* op_0 = Constant((18, 64)) */
/* op_1 = InstructionRef((21, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((25, 0)) */
sstore_v(v_21_0, v_25_0);


/* DUP2 */
/* op_0 = Constant((9, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((9, 0)) */
/* op_1 = Constant((14, 32)) */

/* MSTORE */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((9, 0)) */
mstore_v(c_20, c_0);


/* SHA3 */
/* op_0 = Constant((9, 0)) */
/* op_1 = Constant((18, 64)) */
const uint256_t v_32_0 = sha3_v(c_0, c_40);


/* CALLVALUE */
const uint256_t v_33_0 = callvalue_v();


/* SWAP1 */
/* op_0 = InstructionRef((33, 0)) */
/* op_1 = InstructionRef((32, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((32, 0)) */
/* op_1 = InstructionRef((33, 0)) */
sstore_v(v_32_0, v_33_0);


/* JUMP */
/* op_0 = StackRef((0, 4)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */

JUMP(s_0_4);


}pc_422:
{ /* <============ */ 
on_bb_start(1058);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((2, 32)) */

/* MSTORE */
/* op_0 = Constant((2, 32)) */
/* op_1 = Constant((1, 0)) */
mstore_v(c_20, c_0);


/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((1, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(c_0, s_0_0);


/* PUSH1 */
/* val = [64] */

/* SWAP1 */
/* op_0 = Constant((9, 64)) */
/* op_1 = Constant((1, 0)) */

/* SHA3 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((9, 64)) */
const uint256_t v_11_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = sload_v(v_11_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(0, v_12_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_1);


}pc_434:
{ /* <============ */ 
on_bb_start(1076);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_435:
{ /* <============ */ 
on_bb_start(1077);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG2 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
log2_v(s_0_0, s_0_1, s_0_2, s_0_3);


/* PUSH5 */
/* val = [452857328472] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x435 (inst offset 2; byte 0x22)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_43d:
{ /* <============ */ 
on_bb_start(1085);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* SLT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);


/* SHA3 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);


/* PUSH23 */
/* val = [14577910211802505836610768443654412044077011207649989717] */

/* DUP2 */
/* op_0 = InstructionRef((1, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_4_0 = sload_v(v_1_0);


/* MSTORE */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 14577910211802505836610768443654412044077011207649989717)) */
mstore_v(v_4_0, g_66);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x43d (inst offset 6; byte 0xb1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_45b:
{ /* <============ */ 
on_bb_start(1115);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* DUP4 */
/* op_0 = StackRef((0, 3)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x45b (inst offset 1; byte 0xb5)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_45d:
{ /* <============ */ 
on_bb_start(1117);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* MSTORE8 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore8_v(s_0_0, s_0_1);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x45d (inst offset 1; byte 0xa6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_45f:
{ /* <============ */ 
on_bb_start(1119);
/* PUSH5 */
/* val = [495790613315] */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((0, 495790613315))*/
ctxt->s.push(g_67);
}pc_466:
{ /* <============ */ 
on_bb_start(1126);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* SMOD */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = smod_v(s_0_0, s_0_1);


/* MOD */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = mod_v(v_0_0, s_0_2);


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(2, v_1_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_469:
{ /* <============ */ 
on_bb_start(1129);
/* CALLER */
const uint256_t v_0_0 = caller_v();


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((0, 0))*/
ctxt->s.push(v_0_0);
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x61,0x4,0x6a,0x80,0x61,0x0,0x13,0x60,0x0,0x39,0x60,0x0,0xf3,0xfe,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x55,0x57,0x60,0x0,0x35,0x60,0xe0,0x1c,0x80,0x63,0x30,0xf3,0x79,0x5c,0x14,0x61,0x0,0x5a,0x57,0x80,0x63,0x3c,0xcf,0xd6,0xb,0x14,0x61,0x0,0x9f,0x57,0x80,0x63,0x51,0x9c,0x63,0x77,0x14,0x61,0x0,0xb6,0x57,0x80,0x63,0x81,0xe7,0xe2,0xe,0x14,0x61,0x1,0x33,0x57,0x80,0x63,0xd5,0x3d,0x58,0x85,0x14,0x61,0x1,0x66,0x57,0x80,0x63,0xe3,0xd6,0x70,0xd7,0x14,0x61,0x1,0xeb,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x66,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x8d,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x0,0x7d,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x35,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x61,0x2,0x1e,0x56,0x5b,0x60,0x40,0x80,0x51,0x91,0x82,0x52,0x51,0x90,0x81,0x90,0x3,0x60,0x20,0x1,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x0,0xab,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xb4,0x61,0x2,0x30,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xc2,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xb4,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x0,0xd9,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x1,0x90,0x60,0x20,0x81,0x1,0x81,0x35,0x64,0x1,0x0,0x0,0x0,0x0,0x81,0x11,0x15,0x61,0x0,0xf4,0x57,0x60,0x0,0x80,0xfd,0x5b,0x82,0x1,0x83,0x60,0x20,0x82,0x1,0x11,0x15,0x61,0x1,0x6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x35,0x90,0x60,0x20,0x1,0x91,0x84,0x60,0x1,0x83,0x2,0x84,0x1,0x11,0x64,0x1,0x0,0x0,0x0,0x0,0x83,0x11,0x17,0x15,0x61,0x1,0x28,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x90,0x92,0x50,0x90,0x50,0x61,0x2,0xff,0x56,0x5b,0x34,0x80,0x15,0x61,0x1,0x3f,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x8d,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x1,0x56,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x35,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x61,0x3,0x6b,0x56,0x5b,0x61,0x0,0xb4,0x60,0x4,0x80,0x36,0x3,0x60,0x60,0x81,0x10,0x15,0x61,0x1,0x7c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x35,0x91,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x60,0x20,0x82,0x1,0x35,0x16,0x91,0x81,0x1,0x90,0x60,0x60,0x81,0x1,0x60,0x40,0x82,0x1,0x35,0x64,0x1,0x0,0x0,0x0,0x0,0x81,0x11,0x15,0x61,0x1,0xac,0x57,0x60,0x0,0x80,0xfd,0x5b,0x82,0x1,0x83,0x60,0x20,0x82,0x1,0x11,0x15,0x61,0x1,0xbe,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x35,0x90,0x60,0x20,0x1,0x91,0x84,0x60,0x1,0x83,0x2,0x84,0x1,0x11,0x64,0x1,0x0,0x0,0x0,0x0,0x83,0x11,0x17,0x15,0x61,0x1,0xe0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x90,0x92,0x50,0x90,0x50,0x61,0x3,0x7d,0x56,0x5b,0x34,0x80,0x15,0x61,0x1,0xf7,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x8d,0x60,0x4,0x80,0x36,0x3,0x60,0x20,0x81,0x10,0x15,0x61,0x2,0xe,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x35,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x61,0x4,0x22,0x56,0x5b,0x60,0x1,0x60,0x20,0x52,0x60,0x0,0x90,0x81,0x52,0x60,0x40,0x90,0x20,0x54,0x81,0x56,0x5b,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x20,0x81,0x90,0x52,0x60,0x40,0x90,0x20,0x54,0x61,0x2,0x49,0x57,0x61,0x2,0xfd,0x56,0x5b,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x1,0x60,0x20,0x52,0x60,0x40,0x81,0x20,0x54,0x81,0x90,0x43,0x11,0x15,0x61,0x2,0xb5,0x57,0x50,0x60,0x40,0x80,0x51,0x43,0x60,0x20,0x80,0x83,0x1,0x91,0x90,0x91,0x52,0x33,0x60,0x60,0x1b,0x82,0x84,0x1,0x52,0x82,0x51,0x80,0x83,0x3,0x60,0x34,0x1,0x81,0x52,0x60,0x54,0x90,0x92,0x1,0x90,0x92,0x52,0x80,0x51,0x91,0x1,0x20,0x60,0xa,0x90,0x6,0x80,0x61,0x2,0xb5,0x57,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x1,0x60,0x20,0x52,0x60,0x40,0x90,0x20,0x54,0x66,0x3,0x8d,0x7e,0xa4,0xc6,0x80,0x0,0x2,0x91,0x50,0x5b,0x33,0x60,0x0,0x81,0x81,0x52,0x60,0x20,0x81,0x90,0x52,0x60,0x40,0x80,0x82,0x20,0x80,0x54,0x90,0x83,0x90,0x55,0x90,0x51,0x90,0x85,0x1,0x92,0x91,0x83,0x15,0x61,0x8,0xfc,0x2,0x91,0x84,0x91,0x81,0x81,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x2,0xf8,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x50,0x5b,0x56,0x5b,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x2,0x60,0x20,0x52,0x60,0x40,0x90,0x20,0x54,0x15,0x61,0x3,0x19,0x57,0x61,0x3,0x67,0x56,0x5b,0x81,0x81,0x60,0x40,0x51,0x60,0x20,0x1,0x80,0x83,0x83,0x80,0x82,0x84,0x37,0x60,0x40,0x80,0x51,0x91,0x90,0x93,0x1,0x81,0x81,0x3,0x60,0x1f,0x19,0x1,0x82,0x52,0x83,0x52,0x80,0x51,0x60,0x20,0x91,0x82,0x1,0x20,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x2,0x83,0x52,0x84,0x81,0x20,0x91,0x90,0x91,0x55,0x60,0x1,0x90,0x91,0x52,0x91,0x90,0x91,0x20,0x60,0x0,0x19,0x90,0x55,0x50,0x50,0x50,0x50,0x5b,0x50,0x50,0x56,0x5b,0x60,0x2,0x60,0x20,0x52,0x60,0x0,0x90,0x81,0x52,0x60,0x40,0x90,0x20,0x54,0x81,0x56,0x5b,0x33,0x60,0x0,0x90,0x81,0x52,0x60,0x2,0x60,0x20,0x52,0x60,0x40,0x90,0x20,0x54,0x61,0x3,0x96,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x81,0x60,0x40,0x51,0x60,0x20,0x1,0x80,0x83,0x83,0x80,0x82,0x84,0x37,0x80,0x83,0x1,0x92,0x50,0x50,0x50,0x92,0x50,0x50,0x50,0x60,0x40,0x51,0x60,0x20,0x81,0x83,0x3,0x3,0x81,0x52,0x90,0x60,0x40,0x52,0x80,0x51,0x90,0x60,0x20,0x1,0x20,0x60,0x2,0x60,0x0,0x85,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x14,0x61,0x3,0xf6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x50,0x60,0x1,0x60,0x1,0x60,0xa0,0x1b,0x3,0x16,0x60,0x0,0x90,0x81,0x52,0x60,0x1,0x60,0x20,0x90,0x81,0x52,0x60,0x40,0x80,0x83,0x20,0x43,0x90,0x94,0x1,0x90,0x93,0x55,0x81,0x90,0x52,0x20,0x34,0x90,0x55,0x56,0x5b,0x60,0x0,0x60,0x20,0x81,0x90,0x52,0x90,0x81,0x52,0x60,0x40,0x90,0x20,0x54,0x81,0x56,0xfe,0xa2,0x64,0x69,0x70,0x66,0x73,0x58,0x22,0x12,0x20,0x76,0x98,0x33,0x52,0xef,0x1b,0xa5,0x3b,0xf7,0x30,0x6c,0xb1,0xa1,0xd0,0xcc,0x54,0x10,0x5e,0x2,0x66,0xe0,0x63,0x94,0x55,0x81,0x54,0x52,0xb1,0x83,0xb5,0x53,0xa6,0x64,0x73,0x6f,0x6c,0x63,0x43,0x0,0x7,0x6,0x0,0x33,};


const eevm::Code& eevm::EVM2CPP_baby_bank::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_baby_bank::constructor_args() {
    return _constructor_args;
}
