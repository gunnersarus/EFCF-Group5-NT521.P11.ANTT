[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(5)] ❌
[Trimmer Stage: Transactions(4)] ❌
[Trimmer Stage: Transactions(3)] ❌
[Trimmer Stage: Transactions(2)] ❌
[Trimmer Stage: Transactions(1)] ❌
[Trimmer Stage: Transactions(0)] ❌
[Trimmer Stage: TransactionHeader(5, BlockAdvance(0))] ✔️
[Trimmer Stage: TransactionHeader(4, BlockAdvance(0))] ✔️
[Trimmer Stage: Returns(4, 4)] ✔️
[Trimmer Stage: Returns(4, 3)] ✔️
[Trimmer Stage: Returns(4, 2)] ✔️
[Trimmer Stage: Returns(4, 1)] ✔️
[Trimmer Stage: Returns(4, 0)] ✔️
[Trimmer Stage: Returns(3, 1)] ✔️
[Trimmer Stage: Returns(3, 0)] ✔️
[Trimmer Stage: Returns(2, 0)] ✔️
[Trimmer Stage: Inputs(5, 0)] ❌
[Trimmer Stage: Inputs(4, 68)] ❌
[Trimmer Stage: Inputs(4, 36)] ❌
[Trimmer Stage: Inputs(4, 4)] ❌
[Trimmer Stage: Inputs(4, 0)] ❌
[Trimmer Stage: Inputs(3, 164)] ❌
[Trimmer Stage: Inputs(3, 132)] ❌
[Trimmer Stage: Inputs(3, 100)] ❌
[Trimmer Stage: Inputs(3, 68)] ❌
[Trimmer Stage: Inputs(3, 36)] ❌
[Trimmer Stage: Inputs(3, 4)] ❌
[Trimmer Stage: Inputs(3, 0)] ❌
[Trimmer Stage: Inputs(2, 36)] ❌
[Trimmer Stage: Inputs(2, 4)] ❌
[Trimmer Stage: Inputs(2, 0)] ❌
[Trimmer Stage: Inputs(1, 100)] ❌
[Trimmer Stage: Inputs(1, 68)] ❌
[Trimmer Stage: Inputs(1, 36)] ❌
[Trimmer Stage: Inputs(1, 4)] ❌
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(5, 7)] ✔️
[Trimmer Stage: Sender(5, 6)] ✔️
[Trimmer Stage: Sender(5, 5)] ✔️
[Trimmer Stage: Sender(5, 4)] ✔️
[Trimmer Stage: Sender(5, 3)] ✔️
[Trimmer Stage: Sender(5, 2)] ✔️
[Trimmer Stage: Sender(5, 1)] ✔️
[Trimmer Stage: Sender(5, 0)] ✔️
[Trimmer Stage: Sender(4, 7)] ✔️
[Trimmer Stage: Sender(4, 6)] ✔️
[Trimmer Stage: Sender(4, 5)] ✔️
[Trimmer Stage: Sender(4, 4)] ✔️
[Trimmer Stage: Sender(4, 3)] ✔️
[Trimmer Stage: Sender(4, 2)] ✔️
[Trimmer Stage: Sender(4, 1)] ✔️
[Trimmer Stage: Sender(4, 0)] ✔️
[Trimmer Stage: Sender(3, 0)] ✔️
[Trimmer Stage: Sender(2, 0)] ✔️
[Trimmer Stage: Sender(1, 0)] ✔️
[Trimmer Stage: Sender(0, 0)] ✔️
[Trimmer Stage: Receiver(5, 20)] ✔️
[Trimmer Stage: Receiver(5, 19)] ✔️
[Trimmer Stage: Receiver(5, 18)] ✔️
[Trimmer Stage: Receiver(5, 17)] ✔️
[Trimmer Stage: Receiver(5, 16)] ✔️
[Trimmer Stage: Receiver(5, 15)] ✔️
[Trimmer Stage: Receiver(5, 14)] ✔️
[Trimmer Stage: Receiver(5, 13)] ✔️
[Trimmer Stage: Receiver(5, 12)] ✔️
[Trimmer Stage: Receiver(5, 11)] ✔️
[Trimmer Stage: Receiver(5, 10)] ✔️
[Trimmer Stage: Receiver(5, 9)] ✔️
[Trimmer Stage: Receiver(5, 8)] ✔️
[Trimmer Stage: Receiver(5, 7)] ✔️
[Trimmer Stage: Receiver(5, 6)] ✔️
[Trimmer Stage: Receiver(5, 5)] ✔️
[Trimmer Stage: Receiver(5, 4)] ✔️
[Trimmer Stage: Receiver(5, 3)] ✔️
[Trimmer Stage: Receiver(5, 2)] ✔️
[Trimmer Stage: Receiver(5, 1)] ✔️
[Trimmer Stage: Receiver(5, 0)] ✔️
[Trimmer Stage: Receiver(4, 0)] ✔️
[Trimmer Stage: Receiver(3, 0)] ✔️
[Trimmer Stage: Receiver(2, 0)] ✔️
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ sender/receiver selector TX[2] ]
[ sender/receiver selector TX[3] ]
[ sender/receiver selector TX[4] ]
[ sender/receiver selector TX[5] ]
[ we try sorting the transaction list ]
reduced testcases from 1312 to 672 bytes (by 49 %) edit distance 788
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 0

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: f1(uint256) (0x9adbf691)
  input: { uint(1),  }
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 132; block+=0; #returns=0
  func: f2(uint256,uint256,uint256,uint256) (0x13f7c893)
  input: { uint(1), uint(1184535273276491012240132663725956120921595451100), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935),  }
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 68; block+=0; #returns=1
  func: f3(uint256,uint256) (0xf6ad660b)
  input: { uint(9223372036854775808), uint(10000),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000001
TX[3] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 196; block+=0; #returns=2
  func: f4(uint256,uint256,uint256,uint256,uint256,uint256) (0x350cc2cc)
  input: { uint(1), uint(1), uint(115792089237316195423570985008687907853269984665640564039457584007913129639934), uint(1), uint(1), uint(1),  }
  returns:
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000001
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf7c6611373327e75f8ef1beef8227afb89816dd
TX[4] with tx_sender[182]; tx_receiver[0]; call_value: 0x0; length: 100; block+=1; #returns=5
  func: f5(uint256,uint256,uint256) (0xbd239c5c)
  input: { uint(0), uint(7), uint(115792089237316195423570985008687907853269984665640564039457584007913129639934),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000000
    return val: 1; allows reenter: 1; data: 0x
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000001
    return val: 1; allows reenter: 1; data: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000007fffffff0000000000000000000000000000000000000000000000000000000100000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcaf33d34ffffffffffffffffffffffffffffffffffffffffffffffffffffffffec08376d
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000000
TX[5] with tx_sender[103]; tx_receiver[225]; call_value: 0x0; length: 4; block+=1; #returns=0
  func: ether_oracle() (0x729ebef3)
  input: {  }
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 0

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: f1(uint256) (0x9adbf691)
  input: { uint(1),  }
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 132; block+=0; #returns=0
  func: f2(uint256,uint256,uint256,uint256) (0x13f7c893)
  input: { uint(1), uint(1184535273276491012240132663725956120921595451100), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935),  }
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 68; block+=0; #returns=0
  func: f3(uint256,uint256) (0xf6ad660b)
  input: { uint(9223372036854775808), uint(10000),  }
TX[3] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 196; block+=0; #returns=0
  func: f4(uint256,uint256,uint256,uint256,uint256,uint256) (0x350cc2cc)
  input: { uint(1), uint(1), uint(115792089237316195423570985008687907853269984665640564039457584007913129639934), uint(1), uint(1), uint(1),  }
TX[4] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 100; block+=0; #returns=0
  func: f5(uint256,uint256,uint256) (0xbd239c5c)
  input: { uint(0), uint(7), uint(115792089237316195423570985008687907853269984665640564039457584007913129639934),  }
TX[5] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: ether_oracle() (0x729ebef3)
  input: {  }
