// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/arbitrary_location_write_simple.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x62,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x4f,0x79,0x8d,0xa7,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x64,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x7a,0xdd,0xe4,0xef,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x9b,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0xf5,0x8f,0xef,0x8e,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xb2,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0xfd,0x10,0xd6,0x55,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x00,0xc9,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x5b, /* [98'0x62] JUMPDEST */
0x00, /* [99'0x63] STOP */
0x5b, /* [100'0x64] JUMPDEST */
0x34, /* [101'0x65] CALLVALUE */
0x80, /* [102'0x66] DUP1 */
0x15, /* [103'0x67] ISZERO */
0x61, /* [104'0x68] PUSH2 */
0x00,0x70,/* constant data */
0x57, /* [107'0x6b] JUMPI */
0x60, /* [108'0x6c] PUSH1 */
0x00,/* constant data */
0x80, /* [110'0x6e] DUP1 */
0xfd, /* [111'0x6f] REVERT */
0x5b, /* [112'0x70] JUMPDEST */
0x50, /* [113'0x71] POP */
0x61, /* [114'0x72] PUSH2 */
0x00,0x99,/* constant data */
0x60, /* [117'0x75] PUSH1 */
0x04,/* constant data */
0x80, /* [119'0x77] DUP1 */
0x36, /* [120'0x78] CALLDATASIZE */
0x03, /* [121'0x79] SUB */
0x81, /* [122'0x7a] DUP2 */
0x01, /* [123'0x7b] ADD */
0x90, /* [124'0x7c] SWAP1 */
0x80, /* [125'0x7d] DUP1 */
0x80, /* [126'0x7e] DUP1 */
0x35, /* [127'0x7f] CALLDATALOAD */
0x90, /* [128'0x80] SWAP1 */
0x60, /* [129'0x81] PUSH1 */
0x20,/* constant data */
0x01, /* [131'0x83] ADD */
0x90, /* [132'0x84] SWAP1 */
0x92, /* [133'0x85] SWAP3 */
0x91, /* [134'0x86] SWAP2 */
0x90, /* [135'0x87] SWAP1 */
0x80, /* [136'0x88] DUP1 */
0x35, /* [137'0x89] CALLDATALOAD */
0x90, /* [138'0x8a] SWAP1 */
0x60, /* [139'0x8b] PUSH1 */
0x20,/* constant data */
0x01, /* [141'0x8d] ADD */
0x90, /* [142'0x8e] SWAP1 */
0x92, /* [143'0x8f] SWAP3 */
0x91, /* [144'0x90] SWAP2 */
0x90, /* [145'0x91] SWAP1 */
0x50, /* [146'0x92] POP */
0x50, /* [147'0x93] POP */
0x50, /* [148'0x94] POP */
0x61, /* [149'0x95] PUSH2 */
0x00,0xf6,/* constant data */
0x56, /* [152'0x98] JUMP */
0x5b, /* [153'0x99] JUMPDEST */
0x00, /* [154'0x9a] STOP */
0x5b, /* [155'0x9b] JUMPDEST */
0x34, /* [156'0x9c] CALLVALUE */
0x80, /* [157'0x9d] DUP1 */
0x15, /* [158'0x9e] ISZERO */
0x61, /* [159'0x9f] PUSH2 */
0x00,0xa7,/* constant data */
0x57, /* [162'0xa2] JUMPI */
0x60, /* [163'0xa3] PUSH1 */
0x00,/* constant data */
0x80, /* [165'0xa5] DUP1 */
0xfd, /* [166'0xa6] REVERT */
0x5b, /* [167'0xa7] JUMPDEST */
0x50, /* [168'0xa8] POP */
0x61, /* [169'0xa9] PUSH2 */
0x00,0xb0,/* constant data */
0x61, /* [172'0xac] PUSH2 */
0x01,0x2b,/* constant data */
0x56, /* [175'0xaf] JUMP */
0x5b, /* [176'0xb0] JUMPDEST */
0x00, /* [177'0xb1] STOP */
0x5b, /* [178'0xb2] JUMPDEST */
0x34, /* [179'0xb3] CALLVALUE */
0x80, /* [180'0xb4] DUP1 */
0x15, /* [181'0xb5] ISZERO */
0x61, /* [182'0xb6] PUSH2 */
0x00,0xbe,/* constant data */
0x57, /* [185'0xb9] JUMPI */
0x60, /* [186'0xba] PUSH1 */
0x00,/* constant data */
0x80, /* [188'0xbc] DUP1 */
0xfd, /* [189'0xbd] REVERT */
0x5b, /* [190'0xbe] JUMPDEST */
0x50, /* [191'0xbf] POP */
0x61, /* [192'0xc0] PUSH2 */
0x00,0xc7,/* constant data */
0x61, /* [195'0xc3] PUSH2 */
0x01,0x58,/* constant data */
0x56, /* [198'0xc6] JUMP */
0x5b, /* [199'0xc7] JUMPDEST */
0x00, /* [200'0xc8] STOP */
0x5b, /* [201'0xc9] JUMPDEST */
0x34, /* [202'0xca] CALLVALUE */
0x80, /* [203'0xcb] DUP1 */
0x15, /* [204'0xcc] ISZERO */
0x61, /* [205'0xcd] PUSH2 */
0x00,0xd5,/* constant data */
0x57, /* [208'0xd0] JUMPI */
0x60, /* [209'0xd1] PUSH1 */
0x00,/* constant data */
0x80, /* [211'0xd3] DUP1 */
0xfd, /* [212'0xd4] REVERT */
0x5b, /* [213'0xd5] JUMPDEST */
0x50, /* [214'0xd6] POP */
0x61, /* [215'0xd7] PUSH2 */
0x00,0xf4,/* constant data */
0x60, /* [218'0xda] PUSH1 */
0x04,/* constant data */
0x80, /* [220'0xdc] DUP1 */
0x36, /* [221'0xdd] CALLDATASIZE */
0x03, /* [222'0xde] SUB */
0x81, /* [223'0xdf] DUP2 */
0x01, /* [224'0xe0] ADD */
0x90, /* [225'0xe1] SWAP1 */
0x80, /* [226'0xe2] DUP1 */
0x80, /* [227'0xe3] DUP1 */
0x35, /* [228'0xe4] CALLDATALOAD */
0x90, /* [229'0xe5] SWAP1 */
0x60, /* [230'0xe6] PUSH1 */
0x20,/* constant data */
0x01, /* [232'0xe8] ADD */
0x90, /* [233'0xe9] SWAP1 */
0x92, /* [234'0xea] SWAP3 */
0x91, /* [235'0xeb] SWAP2 */
0x90, /* [236'0xec] SWAP1 */
0x50, /* [237'0xed] POP */
0x50, /* [238'0xee] POP */
0x50, /* [239'0xef] POP */
0x61, /* [240'0xf0] PUSH2 */
0x01,0xcd,/* constant data */
0x56, /* [243'0xf3] JUMP */
0x5b, /* [244'0xf4] JUMPDEST */
0x00, /* [245'0xf5] STOP */
0x5b, /* [246'0xf6] JUMPDEST */
0x60, /* [247'0xf7] PUSH1 */
0x00,/* constant data */
0x80, /* [249'0xf9] DUP1 */
0x54, /* [250'0xfa] SLOAD */
0x90, /* [251'0xfb] SWAP1 */
0x50, /* [252'0xfc] POP */
0x82, /* [253'0xfd] DUP3 */
0x10, /* [254'0xfe] LT */
0x15, /* [255'0xff] ISZERO */
0x15, /* [256'0x100] ISZERO */
0x61, /* [257'0x101] PUSH2 */
0x01,0x09,/* constant data */
0x57, /* [260'0x104] JUMPI */
0x60, /* [261'0x105] PUSH1 */
0x00,/* constant data */
0x80, /* [263'0x107] DUP1 */
0xfd, /* [264'0x108] REVERT */
0x5b, /* [265'0x109] JUMPDEST */
0x80, /* [266'0x10a] DUP1 */
0x60, /* [267'0x10b] PUSH1 */
0x00,/* constant data */
0x83, /* [269'0x10d] DUP4 */
0x81, /* [270'0x10e] DUP2 */
0x54, /* [271'0x10f] SLOAD */
0x81, /* [272'0x110] DUP2 */
0x10, /* [273'0x111] LT */
0x15, /* [274'0x112] ISZERO */
0x15, /* [275'0x113] ISZERO */
0x61, /* [276'0x114] PUSH2 */
0x01,0x19,/* constant data */
0x57, /* [279'0x117] JUMPI */
0xfe, /* [280'0x118] INVALID */
0x5b, /* [281'0x119] JUMPDEST */
0x90, /* [282'0x11a] SWAP1 */
0x60, /* [283'0x11b] PUSH1 */
0x00,/* constant data */
0x52, /* [285'0x11d] MSTORE */
0x60, /* [286'0x11e] PUSH1 */
0x20,/* constant data */
0x60, /* [288'0x120] PUSH1 */
0x00,/* constant data */
0x20, /* [290'0x122] SHA3 */
0x01, /* [291'0x123] ADD */
0x81, /* [292'0x124] DUP2 */
0x90, /* [293'0x125] SWAP1 */
0x55, /* [294'0x126] SSTORE */
0x50, /* [295'0x127] POP */
0x50, /* [296'0x128] POP */
0x50, /* [297'0x129] POP */
0x56, /* [298'0x12a] JUMP */
0x5b, /* [299'0x12b] JUMPDEST */
0x60, /* [300'0x12c] PUSH1 */
0x00,/* constant data */
0x80, /* [302'0x12e] DUP1 */
0x54, /* [303'0x12f] SLOAD */
0x90, /* [304'0x130] SWAP1 */
0x50, /* [305'0x131] POP */
0x60, /* [306'0x132] PUSH1 */
0x00,/* constant data */
0x11, /* [308'0x134] GT */
0x15, /* [309'0x135] ISZERO */
0x15, /* [310'0x136] ISZERO */
0x15, /* [311'0x137] ISZERO */
0x61, /* [312'0x138] PUSH2 */
0x01,0x40,/* constant data */
0x57, /* [315'0x13b] JUMPI */
0x60, /* [316'0x13c] PUSH1 */
0x00,/* constant data */
0x80, /* [318'0x13e] DUP1 */
0xfd, /* [319'0x13f] REVERT */
0x5b, /* [320'0x140] JUMPDEST */
0x60, /* [321'0x141] PUSH1 */
0x00,/* constant data */
0x80, /* [323'0x143] DUP1 */
0x54, /* [324'0x144] SLOAD */
0x80, /* [325'0x145] DUP1 */
0x91, /* [326'0x146] SWAP2 */
0x90, /* [327'0x147] SWAP1 */
0x60, /* [328'0x148] PUSH1 */
0x01,/* constant data */
0x90, /* [330'0x14a] SWAP1 */
0x03, /* [331'0x14b] SUB */
0x61, /* [332'0x14c] PUSH2 */
0x01,0x55,/* constant data */
0x91, /* [335'0x14f] SWAP2 */
0x90, /* [336'0x150] SWAP1 */
0x61, /* [337'0x151] PUSH2 */
0x01,0xfc,/* constant data */
0x56, /* [340'0x154] JUMP */
0x5b, /* [341'0x155] JUMPDEST */
0x50, /* [342'0x156] POP */
0x56, /* [343'0x157] JUMP */
0x5b, /* [344'0x158] JUMPDEST */
0x60, /* [345'0x159] PUSH1 */
0x01,/* constant data */
0x60, /* [347'0x15b] PUSH1 */
0x00,/* constant data */
0x90, /* [349'0x15d] SWAP1 */
0x54, /* [350'0x15e] SLOAD */
0x90, /* [351'0x15f] SWAP1 */
0x61, /* [352'0x160] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [355'0x163] EXP */
0x90, /* [356'0x164] SWAP1 */
0x04, /* [357'0x165] DIV */
0x73, /* [358'0x166] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [379'0x17b] AND */
0x73, /* [380'0x17c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [401'0x191] AND */
0x33, /* [402'0x192] CALLER */
0x73, /* [403'0x193] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [424'0x1a8] AND */
0x14, /* [425'0x1a9] EQ */
0x15, /* [426'0x1aa] ISZERO */
0x15, /* [427'0x1ab] ISZERO */
0x61, /* [428'0x1ac] PUSH2 */
0x01,0xb4,/* constant data */
0x57, /* [431'0x1af] JUMPI */
0x60, /* [432'0x1b0] PUSH1 */
0x00,/* constant data */
0x80, /* [434'0x1b2] DUP1 */
0xfd, /* [435'0x1b3] REVERT */
0x5b, /* [436'0x1b4] JUMPDEST */
0x33, /* [437'0x1b5] CALLER */
0x73, /* [438'0x1b6] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [459'0x1cb] AND */
0xff, /* [460'0x1cc] SELFDESTRUCT */
0x5b, /* [461'0x1cd] JUMPDEST */
0x60, /* [462'0x1ce] PUSH1 */
0x00,/* constant data */
0x81, /* [464'0x1d0] DUP2 */
0x90, /* [465'0x1d1] SWAP1 */
0x80, /* [466'0x1d2] DUP1 */
0x60, /* [467'0x1d3] PUSH1 */
0x01,/* constant data */
0x81, /* [469'0x1d5] DUP2 */
0x54, /* [470'0x1d6] SLOAD */
0x01, /* [471'0x1d7] ADD */
0x80, /* [472'0x1d8] DUP1 */
0x82, /* [473'0x1d9] DUP3 */
0x55, /* [474'0x1da] SSTORE */
0x80, /* [475'0x1db] DUP1 */
0x91, /* [476'0x1dc] SWAP2 */
0x50, /* [477'0x1dd] POP */
0x50, /* [478'0x1de] POP */
0x90, /* [479'0x1df] SWAP1 */
0x60, /* [480'0x1e0] PUSH1 */
0x01,/* constant data */
0x82, /* [482'0x1e2] DUP3 */
0x03, /* [483'0x1e3] SUB */
0x90, /* [484'0x1e4] SWAP1 */
0x60, /* [485'0x1e5] PUSH1 */
0x00,/* constant data */
0x52, /* [487'0x1e7] MSTORE */
0x60, /* [488'0x1e8] PUSH1 */
0x20,/* constant data */
0x60, /* [490'0x1ea] PUSH1 */
0x00,/* constant data */
0x20, /* [492'0x1ec] SHA3 */
0x01, /* [493'0x1ed] ADD */
0x60, /* [494'0x1ee] PUSH1 */
0x00,/* constant data */
0x90, /* [496'0x1f0] SWAP1 */
0x91, /* [497'0x1f1] SWAP2 */
0x92, /* [498'0x1f2] SWAP3 */
0x90, /* [499'0x1f3] SWAP1 */
0x91, /* [500'0x1f4] SWAP2 */
0x90, /* [501'0x1f5] SWAP1 */
0x91, /* [502'0x1f6] SWAP2 */
0x50, /* [503'0x1f7] POP */
0x55, /* [504'0x1f8] SSTORE */
0x50, /* [505'0x1f9] POP */
0x50, /* [506'0x1fa] POP */
0x56, /* [507'0x1fb] JUMP */
0x5b, /* [508'0x1fc] JUMPDEST */
0x81, /* [509'0x1fd] DUP2 */
0x54, /* [510'0x1fe] SLOAD */
0x81, /* [511'0x1ff] DUP2 */
0x83, /* [512'0x200] DUP4 */
0x55, /* [513'0x201] SSTORE */
0x81, /* [514'0x202] DUP2 */
0x81, /* [515'0x203] DUP2 */
0x11, /* [516'0x204] GT */
0x15, /* [517'0x205] ISZERO */
0x61, /* [518'0x206] PUSH2 */
0x02,0x23,/* constant data */
0x57, /* [521'0x209] JUMPI */
0x81, /* [522'0x20a] DUP2 */
0x83, /* [523'0x20b] DUP4 */
0x60, /* [524'0x20c] PUSH1 */
0x00,/* constant data */
0x52, /* [526'0x20e] MSTORE */
0x60, /* [527'0x20f] PUSH1 */
0x20,/* constant data */
0x60, /* [529'0x211] PUSH1 */
0x00,/* constant data */
0x20, /* [531'0x213] SHA3 */
0x91, /* [532'0x214] SWAP2 */
0x82, /* [533'0x215] DUP3 */
0x01, /* [534'0x216] ADD */
0x91, /* [535'0x217] SWAP2 */
0x01, /* [536'0x218] ADD */
0x61, /* [537'0x219] PUSH2 */
0x02,0x22,/* constant data */
0x91, /* [540'0x21c] SWAP2 */
0x90, /* [541'0x21d] SWAP1 */
0x61, /* [542'0x21e] PUSH2 */
0x02,0x28,/* constant data */
0x56, /* [545'0x221] JUMP */
0x5b, /* [546'0x222] JUMPDEST */
0x5b, /* [547'0x223] JUMPDEST */
0x50, /* [548'0x224] POP */
0x50, /* [549'0x225] POP */
0x50, /* [550'0x226] POP */
0x56, /* [551'0x227] JUMP */
0x5b, /* [552'0x228] JUMPDEST */
0x61, /* [553'0x229] PUSH2 */
0x02,0x4a,/* constant data */
0x91, /* [556'0x22c] SWAP2 */
0x90, /* [557'0x22d] SWAP1 */
0x5b, /* [558'0x22e] JUMPDEST */
0x80, /* [559'0x22f] DUP1 */
0x82, /* [560'0x230] DUP3 */
0x11, /* [561'0x231] GT */
0x15, /* [562'0x232] ISZERO */
0x61, /* [563'0x233] PUSH2 */
0x02,0x46,/* constant data */
0x57, /* [566'0x236] JUMPI */
0x60, /* [567'0x237] PUSH1 */
0x00,/* constant data */
0x81, /* [569'0x239] DUP2 */
0x60, /* [570'0x23a] PUSH1 */
0x00,/* constant data */
0x90, /* [572'0x23c] SWAP1 */
0x55, /* [573'0x23d] SSTORE */
0x50, /* [574'0x23e] POP */
0x60, /* [575'0x23f] PUSH1 */
0x01,/* constant data */
0x01, /* [577'0x241] ADD */
0x61, /* [578'0x242] PUSH2 */
0x02,0x2e,/* constant data */
0x56, /* [581'0x245] JUMP */
0x5b, /* [582'0x246] JUMPDEST */
0x50, /* [583'0x247] POP */
0x90, /* [584'0x248] SWAP1 */
0x56, /* [585'0x249] JUMP */
0x5b, /* [586'0x24a] JUMPDEST */
0x90, /* [587'0x24b] SWAP1 */
0x56, /* [588'0x24c] JUMP */
0x00, /* [589'0x24d] STOP */
0xa1, /* [590'0x24e] LOG1 */
0x65, /* [591'0x24f] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [598'0x256] SHA3 */
0xaa, /* [599'0x257] INVALID' byte */
0xf5, /* [600'0x258] CREATE2 */
0x1e, /* [601'0x259] INVALID' byte */
0x1c, /* [602'0x25a] SHR */
0x1b, /* [603'0x25b] SHL */
0xb0, /* [604'0x25c] INVALID' byte */
0xe1, /* [605'0x25d] INVALID' byte */
0x71, /* [606'0x25e] PUSH18 */
0xd7,0xff,0x93,0x01,0x88,0xac,0x12,0x15,0x5e,0x05,0x12,0x4e,0xae,0x63,0xbc,0xa6,0x7a,0x63,/* constant data */
0xdb, /* [625'0x271] INVALID' byte */
0x03, /* [626'0x272] SUB */
0x52, /* [627'0x273] MSTORE */
0x09, /* [628'0x274] MULMOD */
0xf5, /* [629'0x275] CREATE2 */
0x13, /* [630'0x276] SGT */
0x00, /* [631'0x277] STOP */
0x29, /* [632'0x278] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_arbitrary_location_write_simple::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_arbitrary_location_write_simple::_contract_name = "arbitrary_location_write_simple";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_arbitrary_location_write_simple> eevm::EVM2CPP_arbitrary_location_write_simple::reg{};
const std::string& eevm::EVM2CPP_arbitrary_location_write_simple::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_62 = 0x62_u256;
constexpr uint256_t c_64 = 0x64_u256;
constexpr uint256_t c_70 = 0x70_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_99 = 0x99_u256;
constexpr uint256_t c_9b = 0x9b_u256;
constexpr uint256_t c_a7 = 0xa7_u256;
constexpr uint256_t c_b0 = 0xb0_u256;
constexpr uint256_t c_b2 = 0xb2_u256;
constexpr uint256_t c_be = 0xbe_u256;
constexpr uint256_t c_c7 = 0xc7_u256;
constexpr uint256_t c_c9 = 0xc9_u256;
constexpr uint256_t c_d5 = 0xd5_u256;
constexpr uint256_t c_f4 = 0xf4_u256;
constexpr uint256_t c_f6 = 0xf6_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_109 = 0x109_u256;
constexpr uint256_t c_119 = 0x119_u256;
constexpr uint256_t c_12b = 0x12b_u256;
constexpr uint256_t c_140 = 0x140_u256;
constexpr uint256_t c_155 = 0x155_u256;
constexpr uint256_t c_158 = 0x158_u256;
constexpr uint256_t c_1b4 = 0x1b4_u256;
constexpr uint256_t c_1cd = 0x1cd_u256;
constexpr uint256_t c_1fc = 0x1fc_u256;
constexpr uint256_t c_222 = 0x222_u256;
constexpr uint256_t c_223 = 0x223_u256;
constexpr uint256_t c_228 = 0x228_u256;
constexpr uint256_t c_22e = 0x22e_u256;
constexpr uint256_t c_246 = 0x246_u256;
constexpr uint256_t c_24a = 0x24a_u256;
constexpr uint256_t c_4f798da7 = 0x4f798da7_u256;
constexpr uint256_t c_7adde4ef = 0x7adde4ef_u256;
constexpr uint256_t c_f58fef8e = 0xf58fef8e_u256;
constexpr uint256_t c_fd10d655 = 0xfd10d655_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_45 = 0x627a7a723058_u256;
constexpr uint256_t g_37 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_arbitrary_location_write_simple::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_62,
&&__invld,
&&pc_64,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_70,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_99,
&&__invld,
&&pc_9b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_a7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b0,
&&__invld,
&&pc_b2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_be,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c7,
&&__invld,
&&pc_c9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f4,
&&__invld,
&&pc_f6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_109,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_119,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_12b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_140,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_155,
&&__invld,
&&__invld,
&&pc_158,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1b4,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1cd,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1fc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_222,
&&pc_223,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_228,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_22e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_246,
&&__invld,
&&__invld,
&&__invld,
&&pc_24a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [98] */

/* JUMPI */
/* op_0 = Constant((6, 98)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_62;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [1333366183] */

/* EQ */
/* op_0 = Constant((8, 1333366183)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_4f798da7, v_6_0);


/* PUSH2 */
/* val = [100] */

/* JUMPI */
/* op_0 = Constant((10, 100)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_64;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2061362415] */

/* EQ */
/* op_0 = Constant((1, 2061362415)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_7adde4ef, s_0_0);


/* PUSH2 */
/* val = [155] */

/* JUMPI */
/* op_0 = Constant((3, 155)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_9b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4119850894] */

/* EQ */
/* op_0 = Constant((1, 4119850894)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_f58fef8e, s_0_0);


/* PUSH2 */
/* val = [178] */

/* JUMPI */
/* op_0 = Constant((3, 178)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b2;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4245739093] */

/* EQ */
/* op_0 = Constant((1, 4245739093)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_fd10d655, s_0_0);


/* PUSH2 */
/* val = [201] */

/* JUMPI */
/* op_0 = Constant((3, 201)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_c9;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_64:
{ /* <============ */ 
on_bb_start(100);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [112] */

/* JUMPI */
/* op_0 = Constant((4, 112)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_70;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_6c:
{ /* <============ */ 
on_bb_start(108);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_70:
{ /* <============ */ 
on_bb_start(112);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [153] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* DUP1 */
/* op_0 = Constant((15, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((15, 36)) */
const uint256_t v_21_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = Constant((15, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((23, 32)) */
/* op_1 = Constant((15, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((24, 68)) */
/* op_1 = InstructionRef((21, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((24, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [246] */

/* JUMP */
/* op_0 = Constant((32, 246)) */
/* BB finalizer */
ctxt->s.set(0, c_99);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);
/* BB return 1 InstructionRef((21, 0))*/
ctxt->s.push(v_21_0);

goto pc_f6;


}pc_99:
{ /* <============ */ 
on_bb_start(153);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_9b:
{ /* <============ */ 
on_bb_start(155);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [167] */

/* JUMPI */
/* op_0 = Constant((4, 167)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_a7;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_a3:
{ /* <============ */ 
on_bb_start(163);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_a7:
{ /* <============ */ 
on_bb_start(167);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [176] */

/* PUSH2 */
/* val = [299] */

/* JUMP */
/* op_0 = Constant((3, 299)) */
/* BB finalizer */
ctxt->s.set(0, c_b0);
/* no pops at end */
/* no BB returns */

goto pc_12b;


}pc_b0:
{ /* <============ */ 
on_bb_start(176);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b2:
{ /* <============ */ 
on_bb_start(178);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [190] */

/* JUMPI */
/* op_0 = Constant((4, 190)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_be;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_ba:
{ /* <============ */ 
on_bb_start(186);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_be:
{ /* <============ */ 
on_bb_start(190);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [199] */

/* PUSH2 */
/* val = [344] */

/* JUMP */
/* op_0 = Constant((3, 344)) */
/* BB finalizer */
ctxt->s.set(0, c_c7);
/* no pops at end */
/* no BB returns */

goto pc_158;


}pc_c7:
{ /* <============ */ 
on_bb_start(199);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c9:
{ /* <============ */ 
on_bb_start(201);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [213] */

/* JUMPI */
/* op_0 = Constant((4, 213)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_d5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_d1:
{ /* <============ */ 
on_bb_start(209);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d5:
{ /* <============ */ 
on_bb_start(213);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [244] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [461] */

/* JUMP */
/* op_0 = Constant((23, 461)) */
/* BB finalizer */
ctxt->s.set(0, c_f4);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);

goto pc_1cd;


}pc_f4:
{ /* <============ */ 
on_bb_start(244);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f6:
{ /* <============ */ 
on_bb_start(246);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_3_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* POP */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((3, 0)) */
TRACE_COMP(eevm::Opcode::LT, s_0_1, v_3_0);
const uint256_t v_7_0 = lt_v(s_0_1, v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [265] */

/* JUMPI */
/* op_0 = Constant((10, 265)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_109;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_105:
{ /* <============ */ 
on_bb_start(261);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_109:
{ /* <============ */ 
on_bb_start(265);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((2, 0)) */
const uint256_t v_5_0 = sload_v(c_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((5, 0)) */
TRACE_COMP(eevm::Opcode::LT, s_0_1, v_5_0);
const uint256_t v_7_0 = lt_v(s_0_1, v_5_0);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [281] */

/* JUMPI */
/* op_0 = Constant((10, 281)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
/* BB return 1 Constant((2, 0))*/
ctxt->s.push(c_0);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
 
 goto pc_119;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
/* BB return 1 Constant((2, 0))*/
ctxt->s.push(c_0);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
}pc_118:
{ /* <============ */ 
on_bb_start(280);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_119:
{ /* <============ */ 
on_bb_start(281);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore_v(c_0, s_0_1);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((5, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = sha3_v(c_0, c_20);


/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = add_v(v_6_0, s_0_0);


/* DUP2 */
/* op_0 = StackRef((0, 2)) */

/* SWAP1 */
/* op_0 = StackRef((0, 2)) */
/* op_1 = InstructionRef((7, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = StackRef((0, 2)) */
sstore_v(v_7_0, s_0_2);


/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 5)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(6);
/* no BB returns */

JUMP(s_0_5);


}pc_12b:
{ /* <============ */ 
on_bb_start(299);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_3_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* POP */

/* PUSH1 */
/* val = [0] */

/* GT */
/* op_0 = Constant((6, 0)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_7_0 = gt_v(c_0, v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* ISZERO */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_10_0 = iszero_v(v_9_0);


/* PUSH2 */
/* val = [320] */

/* JUMPI */
/* op_0 = Constant((11, 320)) */
/* op_1 = InstructionRef((10, 0)) */
if ( v_10_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_140;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_13c:
{ /* <============ */ 
on_bb_start(316);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_140:
{ /* <============ */ 
on_bb_start(320);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_3_0 = sload_v(c_0);


/* DUP1 */
/* op_0 = InstructionRef((3, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* PUSH1 */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((3, 0)) */

/* SUB */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((7, 1)) */
const uint256_t v_9_0 = sub_v(v_3_0, c_1);


/* PUSH2 */
/* val = [341] */

/* SWAP2 */
/* op_0 = Constant((10, 341)) */
/* op_1 = Constant((1, 0)) */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = InstructionRef((9, 0)) */

/* PUSH2 */
/* val = [508] */

/* JUMP */
/* op_0 = Constant((13, 508)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
/* BB return 1 Constant((10, 341))*/
ctxt->s.push(c_155);
/* BB return 2 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 3 InstructionRef((9, 0))*/
ctxt->s.push(v_9_0);

goto pc_1fc;


}pc_155:
{ /* <============ */ 
on_bb_start(341);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_158:
{ /* <============ */ 
on_bb_start(344);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((1, 1)) */

/* SLOAD */
/* op_0 = Constant((1, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_37, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_37, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_37, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [436] */

/* JUMPI */
/* op_0 = Constant((20, 436)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1b4;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1b0:
{ /* <============ */ 
on_bb_start(432);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1b4:
{ /* <============ */ 
on_bb_start(436);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_37, v_1_0);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((3, 0)) */
selfdestruct_v(v_3_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1cd:
{ /* <============ */ 
on_bb_start(461);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((1, 0)) */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* PUSH1 */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* ADD */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((5, 1)) */
const uint256_t v_8_0 = add_v(v_7_0, c_1);


/* DUP1 */
/* op_0 = InstructionRef((8, 0)) */

/* DUP3 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SSTORE */
/* op_0 = Constant((1, 0)) */
/* op_1 = InstructionRef((8, 0)) */
sstore_v(c_0, v_8_0);


/* DUP1 */
/* op_0 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((1, 0)) */

/* POP */

/* POP */

/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH1 */
/* val = [1] */

/* DUP3 */
/* op_0 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((17, 1)) */
const uint256_t v_19_0 = sub_v(v_8_0, c_1);


/* SWAP1 */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((21, 0)) */
/* op_1 = Constant((1, 0)) */
mstore_v(c_0, c_0);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((24, 0)) */
/* op_1 = Constant((23, 32)) */
const uint256_t v_25_0 = sha3_v(c_0, c_20);


/* ADD */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = InstructionRef((19, 0)) */
const uint256_t v_26_0 = add_v(v_25_0, v_19_0);


/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((27, 0)) */
/* op_1 = InstructionRef((26, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((27, 0)) */

/* SWAP2 */
/* op_0 = Constant((27, 0)) */
/* op_1 = InstructionRef((26, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = StackRef((0, 0)) */

/* SWAP2 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((27, 0)) */

/* POP */

/* SSTORE */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(v_26_0, s_0_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_1fc:
{ /* <============ */ 
on_bb_start(508);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* SLOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = sload_v(s_0_1);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* SSTORE */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(s_0_1, s_0_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* GT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_2_0, s_0_0);
const uint256_t v_8_0 = gt_v(v_2_0, s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [547] */

/* JUMPI */
/* op_0 = Constant((10, 547)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);
 
 goto pc_223;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);
}pc_20a:
{ /* <============ */ 
on_bb_start(522);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 2)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 2)) */
mstore_v(c_0, s_0_2);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((5, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = sha3_v(c_0, c_20);


/* SWAP2 */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_9_0 = add_v(v_6_0, s_0_0);


/* SWAP2 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_11_0 = add_v(v_6_0, s_0_1);


/* PUSH2 */
/* val = [546] */

/* SWAP2 */
/* op_0 = Constant((12, 546)) */
/* op_1 = InstructionRef((9, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((11, 0)) */

/* PUSH2 */
/* val = [552] */

/* JUMP */
/* op_0 = Constant((15, 552)) */
/* BB finalizer */
ctxt->s.set(0, c_222);
/* no pops at end */
/* BB return 0 InstructionRef((9, 0))*/
ctxt->s.push(v_9_0);
/* BB return 1 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

goto pc_228;


}pc_222:
{ /* <============ */ 
on_bb_start(546);
/* JUMPDEST */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_223:
{ /* <============ */ 
on_bb_start(547);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 3)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(4);
/* no BB returns */

JUMP(s_0_3);


}pc_228:
{ /* <============ */ 
on_bb_start(552);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH2 */
/* val = [586] */

/* SWAP2 */
/* op_0 = Constant((1, 586)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */

/* BB finalizer */
ctxt->s.set(0, s_0_1);

ctxt->s.set(1, c_24a);
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_22e:
{ /* <============ */ 
on_bb_start(558);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* GT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
TRACE_COMP(eevm::Opcode::GT, s_0_1, s_0_0);
const uint256_t v_3_0 = gt_v(s_0_1, s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [582] */

/* JUMPI */
/* op_0 = Constant((5, 582)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_246;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_237:
{ /* <============ */ 
on_bb_start(567);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 0)) */

/* SSTORE */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((2, 0)) */
sstore_v(s_0_0, c_0);


/* POP */

/* PUSH1 */
/* val = [1] */

/* ADD */
/* op_0 = Constant((6, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = add_v(c_1, s_0_0);


/* PUSH2 */
/* val = [558] */

/* JUMP */
/* op_0 = Constant((8, 558)) */
/* BB finalizer */
ctxt->s.set(0, v_7_0);
/* no pops at end */
/* no BB returns */

goto pc_22e;


}pc_246:
{ /* <============ */ 
on_bb_start(582);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 2)) */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
ctxt->s.set(2, s_0_1);
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_2);


}pc_24a:
{ /* <============ */ 
on_bb_start(586);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(1, s_0_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_1);


}pc_24d:
{ /* <============ */ 
on_bb_start(589);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_24e:
{ /* <============ */ 
on_bb_start(590);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_45, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x24e (inst offset 3; byte 0xaa)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_258:
{ /* <============ */ 
on_bb_start(600);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* CREATE2 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
const uint256_t v_0_0 = create2_v(s_0_0, s_0_1, s_0_2, s_0_3);
if (ctxt->error) goto exit_label;


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x258 (inst offset 1; byte 0x1e)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_25a:
{ /* <============ */ 
on_bb_start(602);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* SHR */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = shr_v(s_0_0, s_0_1);


/* SHL */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = shl_v(v_0_0, s_0_2);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x25a (inst offset 2; byte 0xb0)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_25d:
{ /* <============ */ 
on_bb_start(605);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x25d (inst offset 0; byte 0xe1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_25e:
{ /* <============ */ 
on_bb_start(606);
/* PUSH18 */
/* val = [18816108883373010124986139048242945695578723] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x25e (inst offset 1; byte 0xdb)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_272:
{ /* <============ */ 
on_bb_start(626);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
const uint256_t s_0_7 = ctxt->s.peek(7);
const uint256_t s_0_8 = ctxt->s.peek(8);
const uint256_t s_0_9 = ctxt->s.peek(9);
/* SUB */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = sub_v(s_0_0, s_0_1);


/* MSTORE */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
mstore_v(v_0_0, s_0_2);


/* MULMOD */
/* op_0 = StackRef((0, 3)) */
/* op_1 = StackRef((0, 4)) */
/* op_2 = StackRef((0, 5)) */
const uint256_t v_2_0 = mulmod_v(s_0_3, s_0_4, s_0_5);


/* CREATE2 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 6)) */
/* op_2 = StackRef((0, 7)) */
/* op_3 = StackRef((0, 8)) */
const uint256_t v_3_0 = create2_v(v_2_0, s_0_6, s_0_7, s_0_8);
if (ctxt->error) goto exit_label;


/* SGT */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = StackRef((0, 9)) */
TRACE_COMP(eevm::Opcode::SGT, v_3_0, s_0_9);
const uint256_t v_4_0 = sgt_v(v_3_0, s_0_9);


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(9, v_4_0);
ctxt->s.pop_drop_n(9);
/* no BB returns */
}pc_278:
{ /* <============ */ 
on_bb_start(632);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x278 (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x60,0x0,0x60,0x40,0x51,0x90,0x80,0x82,0x52,0x80,0x60,0x20,0x2,0x60,0x20,0x1,0x82,0x1,0x60,0x40,0x52,0x80,0x15,0x61,0x0,0x41,0x57,0x81,0x60,0x20,0x1,0x60,0x20,0x82,0x2,0x80,0x38,0x83,0x39,0x80,0x82,0x1,0x91,0x50,0x50,0x90,0x50,0x5b,0x50,0x60,0x0,0x90,0x80,0x51,0x90,0x60,0x20,0x1,0x90,0x61,0x0,0x57,0x92,0x91,0x90,0x61,0x0,0x9e,0x56,0x5b,0x50,0x33,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x1,0x10,0x56,0x5b,0x82,0x80,0x54,0x82,0x82,0x55,0x90,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x90,0x81,0x1,0x92,0x82,0x15,0x61,0x0,0xda,0x57,0x91,0x60,0x20,0x2,0x82,0x1,0x5b,0x82,0x81,0x11,0x15,0x61,0x0,0xd9,0x57,0x82,0x51,0x82,0x55,0x91,0x60,0x20,0x1,0x91,0x90,0x60,0x1,0x1,0x90,0x61,0x0,0xbe,0x56,0x5b,0x5b,0x50,0x90,0x50,0x61,0x0,0xe7,0x91,0x90,0x61,0x0,0xeb,0x56,0x5b,0x50,0x90,0x56,0x5b,0x61,0x1,0xd,0x91,0x90,0x5b,0x80,0x82,0x11,0x15,0x61,0x1,0x9,0x57,0x60,0x0,0x81,0x60,0x0,0x90,0x55,0x50,0x60,0x1,0x1,0x61,0x0,0xf1,0x56,0x5b,0x50,0x90,0x56,0x5b,0x90,0x56,0x5b,0x61,0x2,0x79,0x80,0x61,0x1,0x1f,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x62,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x4f,0x79,0x8d,0xa7,0x14,0x61,0x0,0x64,0x57,0x80,0x63,0x7a,0xdd,0xe4,0xef,0x14,0x61,0x0,0x9b,0x57,0x80,0x63,0xf5,0x8f,0xef,0x8e,0x14,0x61,0x0,0xb2,0x57,0x80,0x63,0xfd,0x10,0xd6,0x55,0x14,0x61,0x0,0xc9,0x57,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x70,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x99,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x0,0xf6,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xa7,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xb0,0x61,0x1,0x2b,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xbe,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xc7,0x61,0x1,0x58,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xd5,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xf4,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xcd,0x56,0x5b,0x0,0x5b,0x60,0x0,0x80,0x54,0x90,0x50,0x82,0x10,0x15,0x15,0x61,0x1,0x9,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x60,0x0,0x83,0x81,0x54,0x81,0x10,0x15,0x15,0x61,0x1,0x19,0x57,0xfe,0x5b,0x90,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x1,0x81,0x90,0x55,0x50,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x54,0x90,0x50,0x60,0x0,0x11,0x15,0x15,0x15,0x61,0x1,0x40,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x80,0x54,0x80,0x91,0x90,0x60,0x1,0x90,0x3,0x61,0x1,0x55,0x91,0x90,0x61,0x1,0xfc,0x56,0x5b,0x50,0x56,0x5b,0x60,0x1,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x1,0xb4,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x60,0x0,0x81,0x90,0x80,0x60,0x1,0x81,0x54,0x1,0x80,0x82,0x55,0x80,0x91,0x50,0x50,0x90,0x60,0x1,0x82,0x3,0x90,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x1,0x60,0x0,0x90,0x91,0x92,0x90,0x91,0x90,0x91,0x50,0x55,0x50,0x50,0x56,0x5b,0x81,0x54,0x81,0x83,0x55,0x81,0x81,0x11,0x15,0x61,0x2,0x23,0x57,0x81,0x83,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x91,0x82,0x1,0x91,0x1,0x61,0x2,0x22,0x91,0x90,0x61,0x2,0x28,0x56,0x5b,0x5b,0x50,0x50,0x50,0x56,0x5b,0x61,0x2,0x4a,0x91,0x90,0x5b,0x80,0x82,0x11,0x15,0x61,0x2,0x46,0x57,0x60,0x0,0x81,0x60,0x0,0x90,0x55,0x50,0x60,0x1,0x1,0x61,0x2,0x2e,0x56,0x5b,0x50,0x90,0x56,0x5b,0x90,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0xaa,0xf5,0x1e,0x1c,0x1b,0xb0,0xe1,0x71,0xd7,0xff,0x93,0x1,0x88,0xac,0x12,0x15,0x5e,0x5,0x12,0x4e,0xae,0x63,0xbc,0xa6,0x7a,0x63,0xdb,0x3,0x52,0x9,0xf5,0x13,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_arbitrary_location_write_simple::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_arbitrary_location_write_simple::constructor_args() {
    return _constructor_args;
}
