// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/incorrect_constructor_name2.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x4c,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x24,0x23,0x31,0x04,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x4e,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x3c,0xcf,0xd6,0x0b,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x65,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x5b, /* [76'0x4c] JUMPDEST */
0x00, /* [77'0x4d] STOP */
0x5b, /* [78'0x4e] JUMPDEST */
0x34, /* [79'0x4f] CALLVALUE */
0x80, /* [80'0x50] DUP1 */
0x15, /* [81'0x51] ISZERO */
0x61, /* [82'0x52] PUSH2 */
0x00,0x5a,/* constant data */
0x57, /* [85'0x55] JUMPI */
0x60, /* [86'0x56] PUSH1 */
0x00,/* constant data */
0x80, /* [88'0x58] DUP1 */
0xfd, /* [89'0x59] REVERT */
0x5b, /* [90'0x5a] JUMPDEST */
0x50, /* [91'0x5b] POP */
0x61, /* [92'0x5c] PUSH2 */
0x00,0x63,/* constant data */
0x61, /* [95'0x5f] PUSH2 */
0x00,0x7c,/* constant data */
0x56, /* [98'0x62] JUMP */
0x5b, /* [99'0x63] JUMPDEST */
0x00, /* [100'0x64] STOP */
0x5b, /* [101'0x65] JUMPDEST */
0x34, /* [102'0x66] CALLVALUE */
0x80, /* [103'0x67] DUP1 */
0x15, /* [104'0x68] ISZERO */
0x61, /* [105'0x69] PUSH2 */
0x00,0x71,/* constant data */
0x57, /* [108'0x6c] JUMPI */
0x60, /* [109'0x6d] PUSH1 */
0x00,/* constant data */
0x80, /* [111'0x6f] DUP1 */
0xfd, /* [112'0x70] REVERT */
0x5b, /* [113'0x71] JUMPDEST */
0x50, /* [114'0x72] POP */
0x61, /* [115'0x73] PUSH2 */
0x00,0x7a,/* constant data */
0x61, /* [118'0x76] PUSH2 */
0x00,0xbe,/* constant data */
0x56, /* [121'0x79] JUMP */
0x5b, /* [122'0x7a] JUMPDEST */
0x00, /* [123'0x7b] STOP */
0x5b, /* [124'0x7c] JUMPDEST */
0x33, /* [125'0x7d] CALLER */
0x60, /* [126'0x7e] PUSH1 */
0x00,/* constant data */
0x80, /* [128'0x80] DUP1 */
0x61, /* [129'0x81] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [132'0x84] EXP */
0x81, /* [133'0x85] DUP2 */
0x54, /* [134'0x86] SLOAD */
0x81, /* [135'0x87] DUP2 */
0x73, /* [136'0x88] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [157'0x9d] MUL */
0x19, /* [158'0x9e] NOT */
0x16, /* [159'0x9f] AND */
0x90, /* [160'0xa0] SWAP1 */
0x83, /* [161'0xa1] DUP4 */
0x73, /* [162'0xa2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [183'0xb7] AND */
0x02, /* [184'0xb8] MUL */
0x17, /* [185'0xb9] OR */
0x90, /* [186'0xba] SWAP1 */
0x55, /* [187'0xbb] SSTORE */
0x50, /* [188'0xbc] POP */
0x56, /* [189'0xbd] JUMP */
0x5b, /* [190'0xbe] JUMPDEST */
0x60, /* [191'0xbf] PUSH1 */
0x00,/* constant data */
0x80, /* [193'0xc1] DUP1 */
0x90, /* [194'0xc2] SWAP1 */
0x54, /* [195'0xc3] SLOAD */
0x90, /* [196'0xc4] SWAP1 */
0x61, /* [197'0xc5] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [200'0xc8] EXP */
0x90, /* [201'0xc9] SWAP1 */
0x04, /* [202'0xca] DIV */
0x73, /* [203'0xcb] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [224'0xe0] AND */
0x73, /* [225'0xe1] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [246'0xf6] AND */
0x33, /* [247'0xf7] CALLER */
0x73, /* [248'0xf8] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [269'0x10d] AND */
0x14, /* [270'0x10e] EQ */
0x15, /* [271'0x10f] ISZERO */
0x15, /* [272'0x110] ISZERO */
0x61, /* [273'0x111] PUSH2 */
0x01,0x19,/* constant data */
0x57, /* [276'0x114] JUMPI */
0x60, /* [277'0x115] PUSH1 */
0x00,/* constant data */
0x80, /* [279'0x117] DUP1 */
0xfd, /* [280'0x118] REVERT */
0x5b, /* [281'0x119] JUMPDEST */
0x60, /* [282'0x11a] PUSH1 */
0x00,/* constant data */
0x80, /* [284'0x11c] DUP1 */
0x90, /* [285'0x11d] SWAP1 */
0x54, /* [286'0x11e] SLOAD */
0x90, /* [287'0x11f] SWAP1 */
0x61, /* [288'0x120] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [291'0x123] EXP */
0x90, /* [292'0x124] SWAP1 */
0x04, /* [293'0x125] DIV */
0x73, /* [294'0x126] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [315'0x13b] AND */
0x73, /* [316'0x13c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [337'0x151] AND */
0x61, /* [338'0x152] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [341'0x155] ADDRESS */
0x73, /* [342'0x156] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [363'0x16b] AND */
0x31, /* [364'0x16c] BALANCE */
0x90, /* [365'0x16d] SWAP1 */
0x81, /* [366'0x16e] DUP2 */
0x15, /* [367'0x16f] ISZERO */
0x02, /* [368'0x170] MUL */
0x90, /* [369'0x171] SWAP1 */
0x60, /* [370'0x172] PUSH1 */
0x40,/* constant data */
0x51, /* [372'0x174] MLOAD */
0x60, /* [373'0x175] PUSH1 */
0x00,/* constant data */
0x60, /* [375'0x177] PUSH1 */
0x40,/* constant data */
0x51, /* [377'0x179] MLOAD */
0x80, /* [378'0x17a] DUP1 */
0x83, /* [379'0x17b] DUP4 */
0x03, /* [380'0x17c] SUB */
0x81, /* [381'0x17d] DUP2 */
0x85, /* [382'0x17e] DUP6 */
0x88, /* [383'0x17f] DUP9 */
0x88, /* [384'0x180] DUP9 */
0xf1, /* [385'0x181] CALL */
0x93, /* [386'0x182] SWAP4 */
0x50, /* [387'0x183] POP */
0x50, /* [388'0x184] POP */
0x50, /* [389'0x185] POP */
0x50, /* [390'0x186] POP */
0x15, /* [391'0x187] ISZERO */
0x80, /* [392'0x188] DUP1 */
0x15, /* [393'0x189] ISZERO */
0x61, /* [394'0x18a] PUSH2 */
0x01,0x97,/* constant data */
0x57, /* [397'0x18d] JUMPI */
0x3d, /* [398'0x18e] RETURNDATASIZE */
0x60, /* [399'0x18f] PUSH1 */
0x00,/* constant data */
0x80, /* [401'0x191] DUP1 */
0x3e, /* [402'0x192] RETURNDATACOPY */
0x3d, /* [403'0x193] RETURNDATASIZE */
0x60, /* [404'0x194] PUSH1 */
0x00,/* constant data */
0xfd, /* [406'0x196] REVERT */
0x5b, /* [407'0x197] JUMPDEST */
0x50, /* [408'0x198] POP */
0x56, /* [409'0x199] JUMP */
0x00, /* [410'0x19a] STOP */
0xa1, /* [411'0x19b] LOG1 */
0x65, /* [412'0x19c] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [419'0x1a3] SHA3 */
0x9c, /* [420'0x1a4] SWAP13 */
0x21, /* [421'0x1a5] INVALID' byte */
0xf8, /* [422'0x1a6] INVALID' byte */
0xaf, /* [423'0x1a7] INVALID' byte */
0x24, /* [424'0x1a8] INVALID' byte */
0xb7, /* [425'0x1a9] INVALID' byte */
0xaf, /* [426'0x1aa] INVALID' byte */
0xa0, /* [427'0x1ab] LOG0 */
0x86, /* [428'0x1ac] DUP7 */
0xb6, /* [429'0x1ad] INVALID' byte */
0x03, /* [430'0x1ae] SUB */
0x7f, /* [431'0x1af] PUSH32 */
0x68,0x00,0x8c,0x15,0x97,0x52,0x09,0x5f,0xbd,0xec,0x2a,0x0a,0xfc,0xfa,0x62,0x7a,0x0f,0x96,0x6c,0x8b,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_incorrect_constructor_name2::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_incorrect_constructor_name2::_contract_name = "incorrect_constructor_name2";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_incorrect_constructor_name2> eevm::EVM2CPP_incorrect_constructor_name2::reg{};
const std::string& eevm::EVM2CPP_incorrect_constructor_name2::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_4c = 0x4c_u256;
constexpr uint256_t c_4e = 0x4e_u256;
constexpr uint256_t c_5a = 0x5a_u256;
constexpr uint256_t c_63 = 0x63_u256;
constexpr uint256_t c_65 = 0x65_u256;
constexpr uint256_t c_71 = 0x71_u256;
constexpr uint256_t c_7a = 0x7a_u256;
constexpr uint256_t c_7c = 0x7c_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_be = 0xbe_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_119 = 0x119_u256;
constexpr uint256_t c_197 = 0x197_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_24233104 = 0x24233104_u256;
constexpr uint256_t c_3ccfd60b = 0x3ccfd60b_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_24 = 0x627a7a723058_u256;
constexpr uint256_t g_19 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_25 = 0x68008c159752095fbdec2a0afcfa627a0f966c8b0029_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_20 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_incorrect_constructor_name2::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4c,
&&__invld,
&&pc_4e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_63,
&&__invld,
&&pc_65,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_71,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_7a,
&&__invld,
&&pc_7c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_be,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_119,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_197,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [76] */

/* JUMPI */
/* op_0 = Constant((6, 76)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_4c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [606286084] */

/* EQ */
/* op_0 = Constant((8, 606286084)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_24233104, v_6_0);


/* PUSH2 */
/* val = [78] */

/* JUMPI */
/* op_0 = Constant((10, 78)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_4e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1020253707] */

/* EQ */
/* op_0 = Constant((1, 1020253707)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3ccfd60b, s_0_0);


/* PUSH2 */
/* val = [101] */

/* JUMPI */
/* op_0 = Constant((3, 101)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_65;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4e:
{ /* <============ */ 
on_bb_start(78);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [90] */

/* JUMPI */
/* op_0 = Constant((4, 90)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_5a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_56:
{ /* <============ */ 
on_bb_start(86);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_5a:
{ /* <============ */ 
on_bb_start(90);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [99] */

/* PUSH2 */
/* val = [124] */

/* JUMP */
/* op_0 = Constant((3, 124)) */
/* BB finalizer */
ctxt->s.set(0, c_63);
/* no pops at end */
/* no BB returns */

goto pc_7c;


}pc_63:
{ /* <============ */ 
on_bb_start(99);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_65:
{ /* <============ */ 
on_bb_start(101);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [113] */

/* JUMPI */
/* op_0 = Constant((4, 113)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_71;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_71:
{ /* <============ */ 
on_bb_start(113);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [122] */

/* PUSH2 */
/* val = [190] */

/* JUMP */
/* op_0 = Constant((3, 190)) */
/* BB finalizer */
ctxt->s.set(0, c_7a);
/* no pops at end */
/* no BB returns */

goto pc_be;


}pc_7a:
{ /* <============ */ 
on_bb_start(122);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7c:
{ /* <============ */ 
on_bb_start(124);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((2, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_20, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_19, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 0)) */

/* SSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_0, v_18_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_be:
{ /* <============ */ 
on_bb_start(190);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_19, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_19, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_19, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [281] */

/* JUMPI */
/* op_0 = Constant((20, 281)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_119;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_115:
{ /* <============ */ 
on_bb_start(277);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_119:
{ /* <============ */ 
on_bb_start(281);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_19, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_19, v_11_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_15_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_17_0 = and_v(g_19, v_15_0);


/* BALANCE */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = balance_v(v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((14, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((18, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_21_0 = iszero_v(v_18_0);


/* MUL */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = Constant((14, 2300)) */
const uint256_t v_22_0 = mul_v(v_21_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((18, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((24, 64)) */
const uint256_t v_25_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((27, 64)) */
const uint256_t v_28_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((28, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((25, 0)) */

/* SUB */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = InstructionRef((28, 0)) */
const uint256_t v_31_0 = sub_v(v_25_0, v_28_0);


/* DUP2 */
/* op_0 = InstructionRef((28, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((13, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((22, 0)) */

/* CALL */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((13, 0)) */
/* op_2 = InstructionRef((18, 0)) */
/* op_3 = InstructionRef((28, 0)) */
/* op_4 = InstructionRef((31, 0)) */
/* op_5 = InstructionRef((28, 0)) */
/* op_6 = Constant((26, 0)) */
const uint256_t v_36_0 = call_v(v_22_0, v_13_0, v_18_0, v_28_0, v_31_0, v_28_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((36, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((36, 0)) */
const uint256_t v_42_0 = iszero_v(v_36_0);


/* DUP1 */
/* op_0 = InstructionRef((42, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((42, 0)) */
const uint256_t v_44_0 = iszero_v(v_42_0);


/* PUSH2 */
/* val = [407] */

/* JUMPI */
/* op_0 = Constant((45, 407)) */
/* op_1 = InstructionRef((44, 0)) */
if ( v_44_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((42, 0))*/
ctxt->s.push(v_42_0);
 
 goto pc_197;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((42, 0))*/
ctxt->s.push(v_42_0);
}pc_18e:
{ /* <============ */ 
on_bb_start(398);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_197:
{ /* <============ */ 
on_bb_start(407);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_19a:
{ /* <============ */ 
on_bb_start(410);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_19b:
{ /* <============ */ 
on_bb_start(411);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_16 = ctxt->s.peek(16);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_24, s_0_3);


/* SWAP13 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 16)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x19b (inst offset 4; byte 0x21)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a6:
{ /* <============ */ 
on_bb_start(422);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1a6 (inst offset 0; byte 0xf8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a7:
{ /* <============ */ 
on_bb_start(423);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1a7 (inst offset 0; byte 0xaf)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a8:
{ /* <============ */ 
on_bb_start(424);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1a8 (inst offset 0; byte 0x24)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a9:
{ /* <============ */ 
on_bb_start(425);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1a9 (inst offset 0; byte 0xb7)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1aa:
{ /* <============ */ 
on_bb_start(426);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1aa (inst offset 0; byte 0xaf)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1ab:
{ /* <============ */ 
on_bb_start(427);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_8 = ctxt->s.peek(8);
/* LOG0 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
log0_v(s_0_0, s_0_1);


/* DUP7 */
/* op_0 = StackRef((0, 8)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1ab (inst offset 2; byte 0xb6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1ae:
{ /* <============ */ 
on_bb_start(430);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* SUB */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = sub_v(s_0_0, s_0_1);


/* PUSH32 */
/* val = [38911819332503394590886947694424838867704209413439529] */

/* BB finalizer */
ctxt->s.set(0, g_25);

ctxt->s.set(1, v_0_0);
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0xc6,0x80,0x61,0x0,0x20,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x4c,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x24,0x23,0x31,0x4,0x14,0x61,0x0,0x4e,0x57,0x80,0x63,0x3c,0xcf,0xd6,0xb,0x14,0x61,0x0,0x65,0x57,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x5a,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x63,0x61,0x0,0x7c,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x71,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x7a,0x61,0x0,0xbe,0x56,0x5b,0x0,0x5b,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x1,0x19,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x1,0x97,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x9c,0x21,0xf8,0xaf,0x24,0xb7,0xaf,0xa0,0x86,0xb6,0x3,0x7f,0x68,0x0,0x8c,0x15,0x97,0x52,0x9,0x5f,0xbd,0xec,0x2a,0xa,0xfc,0xfa,0x62,0x7a,0xf,0x96,0x6c,0x8b,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_incorrect_constructor_name2::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_incorrect_constructor_name2::constructor_args() {
    return _constructor_args;
}
