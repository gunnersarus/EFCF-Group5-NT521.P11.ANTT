// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/mapping_write.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x62,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x1a,0xb0,0x6e,0xe5,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x67,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x3c,0xcf,0xd6,0x0b,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x9e,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xb5,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0x95,0x07,0xd3,0x9a,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x01,0x0c,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x5b, /* [98'0x62] JUMPDEST */
0x60, /* [99'0x63] PUSH1 */
0x00,/* constant data */
0x80, /* [101'0x65] DUP1 */
0xfd, /* [102'0x66] REVERT */
0x5b, /* [103'0x67] JUMPDEST */
0x34, /* [104'0x68] CALLVALUE */
0x80, /* [105'0x69] DUP1 */
0x15, /* [106'0x6a] ISZERO */
0x61, /* [107'0x6b] PUSH2 */
0x00,0x73,/* constant data */
0x57, /* [110'0x6e] JUMPI */
0x60, /* [111'0x6f] PUSH1 */
0x00,/* constant data */
0x80, /* [113'0x71] DUP1 */
0xfd, /* [114'0x72] REVERT */
0x5b, /* [115'0x73] JUMPDEST */
0x50, /* [116'0x74] POP */
0x61, /* [117'0x75] PUSH2 */
0x00,0x9c,/* constant data */
0x60, /* [120'0x78] PUSH1 */
0x04,/* constant data */
0x80, /* [122'0x7a] DUP1 */
0x36, /* [123'0x7b] CALLDATASIZE */
0x03, /* [124'0x7c] SUB */
0x81, /* [125'0x7d] DUP2 */
0x01, /* [126'0x7e] ADD */
0x90, /* [127'0x7f] SWAP1 */
0x80, /* [128'0x80] DUP1 */
0x80, /* [129'0x81] DUP1 */
0x35, /* [130'0x82] CALLDATALOAD */
0x90, /* [131'0x83] SWAP1 */
0x60, /* [132'0x84] PUSH1 */
0x20,/* constant data */
0x01, /* [134'0x86] ADD */
0x90, /* [135'0x87] SWAP1 */
0x92, /* [136'0x88] SWAP3 */
0x91, /* [137'0x89] SWAP2 */
0x90, /* [138'0x8a] SWAP1 */
0x80, /* [139'0x8b] DUP1 */
0x35, /* [140'0x8c] CALLDATALOAD */
0x90, /* [141'0x8d] SWAP1 */
0x60, /* [142'0x8e] PUSH1 */
0x20,/* constant data */
0x01, /* [144'0x90] ADD */
0x90, /* [145'0x91] SWAP1 */
0x92, /* [146'0x92] SWAP3 */
0x91, /* [147'0x93] SWAP2 */
0x90, /* [148'0x94] SWAP1 */
0x50, /* [149'0x95] POP */
0x50, /* [150'0x96] POP */
0x50, /* [151'0x97] POP */
0x61, /* [152'0x98] PUSH2 */
0x01,0x4d,/* constant data */
0x56, /* [155'0x9b] JUMP */
0x5b, /* [156'0x9c] JUMPDEST */
0x00, /* [157'0x9d] STOP */
0x5b, /* [158'0x9e] JUMPDEST */
0x34, /* [159'0x9f] CALLVALUE */
0x80, /* [160'0xa0] DUP1 */
0x15, /* [161'0xa1] ISZERO */
0x61, /* [162'0xa2] PUSH2 */
0x00,0xaa,/* constant data */
0x57, /* [165'0xa5] JUMPI */
0x60, /* [166'0xa6] PUSH1 */
0x00,/* constant data */
0x80, /* [168'0xa8] DUP1 */
0xfd, /* [169'0xa9] REVERT */
0x5b, /* [170'0xaa] JUMPDEST */
0x50, /* [171'0xab] POP */
0x61, /* [172'0xac] PUSH2 */
0x00,0xb3,/* constant data */
0x61, /* [175'0xaf] PUSH2 */
0x01,0x90,/* constant data */
0x56, /* [178'0xb2] JUMP */
0x5b, /* [179'0xb3] JUMPDEST */
0x00, /* [180'0xb4] STOP */
0x5b, /* [181'0xb5] JUMPDEST */
0x34, /* [182'0xb6] CALLVALUE */
0x80, /* [183'0xb7] DUP1 */
0x15, /* [184'0xb8] ISZERO */
0x61, /* [185'0xb9] PUSH2 */
0x00,0xc1,/* constant data */
0x57, /* [188'0xbc] JUMPI */
0x60, /* [189'0xbd] PUSH1 */
0x00,/* constant data */
0x80, /* [191'0xbf] DUP1 */
0xfd, /* [192'0xc0] REVERT */
0x5b, /* [193'0xc1] JUMPDEST */
0x50, /* [194'0xc2] POP */
0x61, /* [195'0xc3] PUSH2 */
0x00,0xca,/* constant data */
0x61, /* [198'0xc6] PUSH2 */
0x02,0x4b,/* constant data */
0x56, /* [201'0xc9] JUMP */
0x5b, /* [202'0xca] JUMPDEST */
0x60, /* [203'0xcb] PUSH1 */
0x40,/* constant data */
0x51, /* [205'0xcd] MLOAD */
0x80, /* [206'0xce] DUP1 */
0x82, /* [207'0xcf] DUP3 */
0x73, /* [208'0xd0] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [229'0xe5] AND */
0x73, /* [230'0xe6] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [251'0xfb] AND */
0x81, /* [252'0xfc] DUP2 */
0x52, /* [253'0xfd] MSTORE */
0x60, /* [254'0xfe] PUSH1 */
0x20,/* constant data */
0x01, /* [256'0x100] ADD */
0x91, /* [257'0x101] SWAP2 */
0x50, /* [258'0x102] POP */
0x50, /* [259'0x103] POP */
0x60, /* [260'0x104] PUSH1 */
0x40,/* constant data */
0x51, /* [262'0x106] MLOAD */
0x80, /* [263'0x107] DUP1 */
0x91, /* [264'0x108] SWAP2 */
0x03, /* [265'0x109] SUB */
0x90, /* [266'0x10a] SWAP1 */
0xf3, /* [267'0x10b] RETURN */
0x5b, /* [268'0x10c] JUMPDEST */
0x34, /* [269'0x10d] CALLVALUE */
0x80, /* [270'0x10e] DUP1 */
0x15, /* [271'0x10f] ISZERO */
0x61, /* [272'0x110] PUSH2 */
0x01,0x18,/* constant data */
0x57, /* [275'0x113] JUMPI */
0x60, /* [276'0x114] PUSH1 */
0x00,/* constant data */
0x80, /* [278'0x116] DUP1 */
0xfd, /* [279'0x117] REVERT */
0x5b, /* [280'0x118] JUMPDEST */
0x50, /* [281'0x119] POP */
0x61, /* [282'0x11a] PUSH2 */
0x01,0x37,/* constant data */
0x60, /* [285'0x11d] PUSH1 */
0x04,/* constant data */
0x80, /* [287'0x11f] DUP1 */
0x36, /* [288'0x120] CALLDATASIZE */
0x03, /* [289'0x121] SUB */
0x81, /* [290'0x122] DUP2 */
0x01, /* [291'0x123] ADD */
0x90, /* [292'0x124] SWAP1 */
0x80, /* [293'0x125] DUP1 */
0x80, /* [294'0x126] DUP1 */
0x35, /* [295'0x127] CALLDATALOAD */
0x90, /* [296'0x128] SWAP1 */
0x60, /* [297'0x129] PUSH1 */
0x20,/* constant data */
0x01, /* [299'0x12b] ADD */
0x90, /* [300'0x12c] SWAP1 */
0x92, /* [301'0x12d] SWAP3 */
0x91, /* [302'0x12e] SWAP2 */
0x90, /* [303'0x12f] SWAP1 */
0x50, /* [304'0x130] POP */
0x50, /* [305'0x131] POP */
0x50, /* [306'0x132] POP */
0x61, /* [307'0x133] PUSH2 */
0x02,0x70,/* constant data */
0x56, /* [310'0x136] JUMP */
0x5b, /* [311'0x137] JUMPDEST */
0x60, /* [312'0x138] PUSH1 */
0x40,/* constant data */
0x51, /* [314'0x13a] MLOAD */
0x80, /* [315'0x13b] DUP1 */
0x82, /* [316'0x13c] DUP3 */
0x81, /* [317'0x13d] DUP2 */
0x52, /* [318'0x13e] MSTORE */
0x60, /* [319'0x13f] PUSH1 */
0x20,/* constant data */
0x01, /* [321'0x141] ADD */
0x91, /* [322'0x142] SWAP2 */
0x50, /* [323'0x143] POP */
0x50, /* [324'0x144] POP */
0x60, /* [325'0x145] PUSH1 */
0x40,/* constant data */
0x51, /* [327'0x147] MLOAD */
0x80, /* [328'0x148] DUP1 */
0x91, /* [329'0x149] SWAP2 */
0x03, /* [330'0x14a] SUB */
0x90, /* [331'0x14b] SWAP1 */
0xf3, /* [332'0x14c] RETURN */
0x5b, /* [333'0x14d] JUMPDEST */
0x81, /* [334'0x14e] DUP2 */
0x60, /* [335'0x14f] PUSH1 */
0x01,/* constant data */
0x80, /* [337'0x151] DUP1 */
0x54, /* [338'0x152] SLOAD */
0x90, /* [339'0x153] SWAP1 */
0x50, /* [340'0x154] POP */
0x11, /* [341'0x155] GT */
0x15, /* [342'0x156] ISZERO */
0x15, /* [343'0x157] ISZERO */
0x61, /* [344'0x158] PUSH2 */
0x01,0x6e,/* constant data */
0x57, /* [347'0x15b] JUMPI */
0x60, /* [348'0x15c] PUSH1 */
0x01,/* constant data */
0x82, /* [350'0x15e] DUP3 */
0x01, /* [351'0x15f] ADD */
0x60, /* [352'0x160] PUSH1 */
0x01,/* constant data */
0x81, /* [354'0x162] DUP2 */
0x61, /* [355'0x163] PUSH2 */
0x01,0x6c,/* constant data */
0x91, /* [358'0x166] SWAP2 */
0x90, /* [359'0x167] SWAP1 */
0x61, /* [360'0x168] PUSH2 */
0x02,0x93,/* constant data */
0x56, /* [363'0x16b] JUMP */
0x5b, /* [364'0x16c] JUMPDEST */
0x50, /* [365'0x16d] POP */
0x5b, /* [366'0x16e] JUMPDEST */
0x80, /* [367'0x16f] DUP1 */
0x60, /* [368'0x170] PUSH1 */
0x01,/* constant data */
0x83, /* [370'0x172] DUP4 */
0x81, /* [371'0x173] DUP2 */
0x54, /* [372'0x174] SLOAD */
0x81, /* [373'0x175] DUP2 */
0x10, /* [374'0x176] LT */
0x15, /* [375'0x177] ISZERO */
0x15, /* [376'0x178] ISZERO */
0x61, /* [377'0x179] PUSH2 */
0x01,0x7e,/* constant data */
0x57, /* [380'0x17c] JUMPI */
0xfe, /* [381'0x17d] INVALID */
0x5b, /* [382'0x17e] JUMPDEST */
0x90, /* [383'0x17f] SWAP1 */
0x60, /* [384'0x180] PUSH1 */
0x00,/* constant data */
0x52, /* [386'0x182] MSTORE */
0x60, /* [387'0x183] PUSH1 */
0x20,/* constant data */
0x60, /* [389'0x185] PUSH1 */
0x00,/* constant data */
0x20, /* [391'0x187] SHA3 */
0x01, /* [392'0x188] ADD */
0x81, /* [393'0x189] DUP2 */
0x90, /* [394'0x18a] SWAP1 */
0x55, /* [395'0x18b] SSTORE */
0x50, /* [396'0x18c] POP */
0x50, /* [397'0x18d] POP */
0x50, /* [398'0x18e] POP */
0x56, /* [399'0x18f] JUMP */
0x5b, /* [400'0x190] JUMPDEST */
0x60, /* [401'0x191] PUSH1 */
0x00,/* constant data */
0x80, /* [403'0x193] DUP1 */
0x90, /* [404'0x194] SWAP1 */
0x54, /* [405'0x195] SLOAD */
0x90, /* [406'0x196] SWAP1 */
0x61, /* [407'0x197] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [410'0x19a] EXP */
0x90, /* [411'0x19b] SWAP1 */
0x04, /* [412'0x19c] DIV */
0x73, /* [413'0x19d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [434'0x1b2] AND */
0x73, /* [435'0x1b3] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [456'0x1c8] AND */
0x33, /* [457'0x1c9] CALLER */
0x73, /* [458'0x1ca] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [479'0x1df] AND */
0x14, /* [480'0x1e0] EQ */
0x15, /* [481'0x1e1] ISZERO */
0x15, /* [482'0x1e2] ISZERO */
0x61, /* [483'0x1e3] PUSH2 */
0x01,0xeb,/* constant data */
0x57, /* [486'0x1e6] JUMPI */
0x60, /* [487'0x1e7] PUSH1 */
0x00,/* constant data */
0x80, /* [489'0x1e9] DUP1 */
0xfd, /* [490'0x1ea] REVERT */
0x5b, /* [491'0x1eb] JUMPDEST */
0x33, /* [492'0x1ec] CALLER */
0x73, /* [493'0x1ed] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [514'0x202] AND */
0x61, /* [515'0x203] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [518'0x206] ADDRESS */
0x73, /* [519'0x207] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [540'0x21c] AND */
0x31, /* [541'0x21d] BALANCE */
0x90, /* [542'0x21e] SWAP1 */
0x81, /* [543'0x21f] DUP2 */
0x15, /* [544'0x220] ISZERO */
0x02, /* [545'0x221] MUL */
0x90, /* [546'0x222] SWAP1 */
0x60, /* [547'0x223] PUSH1 */
0x40,/* constant data */
0x51, /* [549'0x225] MLOAD */
0x60, /* [550'0x226] PUSH1 */
0x00,/* constant data */
0x60, /* [552'0x228] PUSH1 */
0x40,/* constant data */
0x51, /* [554'0x22a] MLOAD */
0x80, /* [555'0x22b] DUP1 */
0x83, /* [556'0x22c] DUP4 */
0x03, /* [557'0x22d] SUB */
0x81, /* [558'0x22e] DUP2 */
0x85, /* [559'0x22f] DUP6 */
0x88, /* [560'0x230] DUP9 */
0x88, /* [561'0x231] DUP9 */
0xf1, /* [562'0x232] CALL */
0x93, /* [563'0x233] SWAP4 */
0x50, /* [564'0x234] POP */
0x50, /* [565'0x235] POP */
0x50, /* [566'0x236] POP */
0x50, /* [567'0x237] POP */
0x15, /* [568'0x238] ISZERO */
0x80, /* [569'0x239] DUP1 */
0x15, /* [570'0x23a] ISZERO */
0x61, /* [571'0x23b] PUSH2 */
0x02,0x48,/* constant data */
0x57, /* [574'0x23e] JUMPI */
0x3d, /* [575'0x23f] RETURNDATASIZE */
0x60, /* [576'0x240] PUSH1 */
0x00,/* constant data */
0x80, /* [578'0x242] DUP1 */
0x3e, /* [579'0x243] RETURNDATACOPY */
0x3d, /* [580'0x244] RETURNDATASIZE */
0x60, /* [581'0x245] PUSH1 */
0x00,/* constant data */
0xfd, /* [583'0x247] REVERT */
0x5b, /* [584'0x248] JUMPDEST */
0x50, /* [585'0x249] POP */
0x56, /* [586'0x24a] JUMP */
0x5b, /* [587'0x24b] JUMPDEST */
0x60, /* [588'0x24c] PUSH1 */
0x00,/* constant data */
0x80, /* [590'0x24e] DUP1 */
0x90, /* [591'0x24f] SWAP1 */
0x54, /* [592'0x250] SLOAD */
0x90, /* [593'0x251] SWAP1 */
0x61, /* [594'0x252] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [597'0x255] EXP */
0x90, /* [598'0x256] SWAP1 */
0x04, /* [599'0x257] DIV */
0x73, /* [600'0x258] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [621'0x26d] AND */
0x81, /* [622'0x26e] DUP2 */
0x56, /* [623'0x26f] JUMP */
0x5b, /* [624'0x270] JUMPDEST */
0x60, /* [625'0x271] PUSH1 */
0x00,/* constant data */
0x60, /* [627'0x273] PUSH1 */
0x01,/* constant data */
0x82, /* [629'0x275] DUP3 */
0x81, /* [630'0x276] DUP2 */
0x54, /* [631'0x277] SLOAD */
0x81, /* [632'0x278] DUP2 */
0x10, /* [633'0x279] LT */
0x15, /* [634'0x27a] ISZERO */
0x15, /* [635'0x27b] ISZERO */
0x61, /* [636'0x27c] PUSH2 */
0x02,0x81,/* constant data */
0x57, /* [639'0x27f] JUMPI */
0xfe, /* [640'0x280] INVALID */
0x5b, /* [641'0x281] JUMPDEST */
0x90, /* [642'0x282] SWAP1 */
0x60, /* [643'0x283] PUSH1 */
0x00,/* constant data */
0x52, /* [645'0x285] MSTORE */
0x60, /* [646'0x286] PUSH1 */
0x20,/* constant data */
0x60, /* [648'0x288] PUSH1 */
0x00,/* constant data */
0x20, /* [650'0x28a] SHA3 */
0x01, /* [651'0x28b] ADD */
0x54, /* [652'0x28c] SLOAD */
0x90, /* [653'0x28d] SWAP1 */
0x50, /* [654'0x28e] POP */
0x91, /* [655'0x28f] SWAP2 */
0x90, /* [656'0x290] SWAP1 */
0x50, /* [657'0x291] POP */
0x56, /* [658'0x292] JUMP */
0x5b, /* [659'0x293] JUMPDEST */
0x81, /* [660'0x294] DUP2 */
0x54, /* [661'0x295] SLOAD */
0x81, /* [662'0x296] DUP2 */
0x83, /* [663'0x297] DUP4 */
0x55, /* [664'0x298] SSTORE */
0x81, /* [665'0x299] DUP2 */
0x81, /* [666'0x29a] DUP2 */
0x11, /* [667'0x29b] GT */
0x15, /* [668'0x29c] ISZERO */
0x61, /* [669'0x29d] PUSH2 */
0x02,0xba,/* constant data */
0x57, /* [672'0x2a0] JUMPI */
0x81, /* [673'0x2a1] DUP2 */
0x83, /* [674'0x2a2] DUP4 */
0x60, /* [675'0x2a3] PUSH1 */
0x00,/* constant data */
0x52, /* [677'0x2a5] MSTORE */
0x60, /* [678'0x2a6] PUSH1 */
0x20,/* constant data */
0x60, /* [680'0x2a8] PUSH1 */
0x00,/* constant data */
0x20, /* [682'0x2aa] SHA3 */
0x91, /* [683'0x2ab] SWAP2 */
0x82, /* [684'0x2ac] DUP3 */
0x01, /* [685'0x2ad] ADD */
0x91, /* [686'0x2ae] SWAP2 */
0x01, /* [687'0x2af] ADD */
0x61, /* [688'0x2b0] PUSH2 */
0x02,0xb9,/* constant data */
0x91, /* [691'0x2b3] SWAP2 */
0x90, /* [692'0x2b4] SWAP1 */
0x61, /* [693'0x2b5] PUSH2 */
0x02,0xbf,/* constant data */
0x56, /* [696'0x2b8] JUMP */
0x5b, /* [697'0x2b9] JUMPDEST */
0x5b, /* [698'0x2ba] JUMPDEST */
0x50, /* [699'0x2bb] POP */
0x50, /* [700'0x2bc] POP */
0x50, /* [701'0x2bd] POP */
0x56, /* [702'0x2be] JUMP */
0x5b, /* [703'0x2bf] JUMPDEST */
0x61, /* [704'0x2c0] PUSH2 */
0x02,0xe1,/* constant data */
0x91, /* [707'0x2c3] SWAP2 */
0x90, /* [708'0x2c4] SWAP1 */
0x5b, /* [709'0x2c5] JUMPDEST */
0x80, /* [710'0x2c6] DUP1 */
0x82, /* [711'0x2c7] DUP3 */
0x11, /* [712'0x2c8] GT */
0x15, /* [713'0x2c9] ISZERO */
0x61, /* [714'0x2ca] PUSH2 */
0x02,0xdd,/* constant data */
0x57, /* [717'0x2cd] JUMPI */
0x60, /* [718'0x2ce] PUSH1 */
0x00,/* constant data */
0x81, /* [720'0x2d0] DUP2 */
0x60, /* [721'0x2d1] PUSH1 */
0x00,/* constant data */
0x90, /* [723'0x2d3] SWAP1 */
0x55, /* [724'0x2d4] SSTORE */
0x50, /* [725'0x2d5] POP */
0x60, /* [726'0x2d6] PUSH1 */
0x01,/* constant data */
0x01, /* [728'0x2d8] ADD */
0x61, /* [729'0x2d9] PUSH2 */
0x02,0xc5,/* constant data */
0x56, /* [732'0x2dc] JUMP */
0x5b, /* [733'0x2dd] JUMPDEST */
0x50, /* [734'0x2de] POP */
0x90, /* [735'0x2df] SWAP1 */
0x56, /* [736'0x2e0] JUMP */
0x5b, /* [737'0x2e1] JUMPDEST */
0x90, /* [738'0x2e2] SWAP1 */
0x56, /* [739'0x2e3] JUMP */
0x00, /* [740'0x2e4] STOP */
0xa1, /* [741'0x2e5] LOG1 */
0x65, /* [742'0x2e6] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [749'0x2ed] SHA3 */
0xb9, /* [750'0x2ee] INVALID' byte */
0x12, /* [751'0x2ef] SLT */
0x47, /* [752'0x2f0] SELFBALANCE */
0x0e, /* [753'0x2f1] INVALID' byte */
0x18, /* [754'0x2f2] XOR */
0x20, /* [755'0x2f3] SHA3 */
0x74, /* [756'0x2f4] PUSH21 */
0x34,0xd7,0x61,0x43,0xa5,0xb9,0xf6,0x12,0x25,0x79,0x07,0x69,0x0c,0x4c,0xcd,0x05,0x74,0xa9,0x86,0xcb,0x94,/* constant data */
0x70, /* [778'0x30a] PUSH17 */
0x95,0x71,0x3a,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_mapping_write::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_mapping_write::_contract_name = "mapping_write";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_mapping_write> eevm::EVM2CPP_mapping_write::reg{};
const std::string& eevm::EVM2CPP_mapping_write::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_62 = 0x62_u256;
constexpr uint256_t c_67 = 0x67_u256;
constexpr uint256_t c_73 = 0x73_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_9c = 0x9c_u256;
constexpr uint256_t c_9e = 0x9e_u256;
constexpr uint256_t c_aa = 0xaa_u256;
constexpr uint256_t c_b3 = 0xb3_u256;
constexpr uint256_t c_b5 = 0xb5_u256;
constexpr uint256_t c_c1 = 0xc1_u256;
constexpr uint256_t c_ca = 0xca_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_10c = 0x10c_u256;
constexpr uint256_t c_118 = 0x118_u256;
constexpr uint256_t c_137 = 0x137_u256;
constexpr uint256_t c_14d = 0x14d_u256;
constexpr uint256_t c_16c = 0x16c_u256;
constexpr uint256_t c_16e = 0x16e_u256;
constexpr uint256_t c_17e = 0x17e_u256;
constexpr uint256_t c_190 = 0x190_u256;
constexpr uint256_t c_1eb = 0x1eb_u256;
constexpr uint256_t c_248 = 0x248_u256;
constexpr uint256_t c_24b = 0x24b_u256;
constexpr uint256_t c_270 = 0x270_u256;
constexpr uint256_t c_281 = 0x281_u256;
constexpr uint256_t c_293 = 0x293_u256;
constexpr uint256_t c_2b9 = 0x2b9_u256;
constexpr uint256_t c_2ba = 0x2ba_u256;
constexpr uint256_t c_2bf = 0x2bf_u256;
constexpr uint256_t c_2c5 = 0x2c5_u256;
constexpr uint256_t c_2dd = 0x2dd_u256;
constexpr uint256_t c_2e1 = 0x2e1_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_1ab06ee5 = 0x1ab06ee5_u256;
constexpr uint256_t c_3ccfd60b = 0x3ccfd60b_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_9507d39a = 0x9507d39a_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_48 = 0x95713a0029_u256;
constexpr uint256_t g_47 = 0x627a7a723058_u256;
constexpr uint256_t g_27 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_49 = 0x34d76143a5b9f612257907690c4ccd0574a986cb94_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_mapping_write::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_62,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_67,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_73,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_9c,
&&__invld,
&&pc_9e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_aa,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b3,
&&__invld,
&&pc_b5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ca,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_10c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_118,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_137,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_14d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_16c,
&&__invld,
&&pc_16e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_17e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_190,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1eb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_248,
&&__invld,
&&__invld,
&&pc_24b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_270,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_281,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_293,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2b9,
&&pc_2ba,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2bf,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2c5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2dd,
&&__invld,
&&__invld,
&&__invld,
&&pc_2e1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [98] */

/* JUMPI */
/* op_0 = Constant((6, 98)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_62;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [447770341] */

/* EQ */
/* op_0 = Constant((8, 447770341)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_1ab06ee5, v_6_0);


/* PUSH2 */
/* val = [103] */

/* JUMPI */
/* op_0 = Constant((10, 103)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_67;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1020253707] */

/* EQ */
/* op_0 = Constant((1, 1020253707)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3ccfd60b, s_0_0);


/* PUSH2 */
/* val = [158] */

/* JUMPI */
/* op_0 = Constant((3, 158)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_9e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((1, 2376452955)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8da5cb5b, s_0_0);


/* PUSH2 */
/* val = [181] */

/* JUMPI */
/* op_0 = Constant((3, 181)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2500318106] */

/* EQ */
/* op_0 = Constant((1, 2500318106)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_9507d39a, s_0_0);


/* PUSH2 */
/* val = [268] */

/* JUMPI */
/* op_0 = Constant((3, 268)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_10c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_67:
{ /* <============ */ 
on_bb_start(103);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [115] */

/* JUMPI */
/* op_0 = Constant((4, 115)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_73;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_6f:
{ /* <============ */ 
on_bb_start(111);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_73:
{ /* <============ */ 
on_bb_start(115);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [156] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* DUP1 */
/* op_0 = Constant((15, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((15, 36)) */
const uint256_t v_21_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = Constant((15, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((23, 32)) */
/* op_1 = Constant((15, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((24, 68)) */
/* op_1 = InstructionRef((21, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((24, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [333] */

/* JUMP */
/* op_0 = Constant((32, 333)) */
/* BB finalizer */
ctxt->s.set(0, c_9c);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);
/* BB return 1 InstructionRef((21, 0))*/
ctxt->s.push(v_21_0);

goto pc_14d;


}pc_9c:
{ /* <============ */ 
on_bb_start(156);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_9e:
{ /* <============ */ 
on_bb_start(158);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [170] */

/* JUMPI */
/* op_0 = Constant((4, 170)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_aa;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_a6:
{ /* <============ */ 
on_bb_start(166);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_aa:
{ /* <============ */ 
on_bb_start(170);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [179] */

/* PUSH2 */
/* val = [400] */

/* JUMP */
/* op_0 = Constant((3, 400)) */
/* BB finalizer */
ctxt->s.set(0, c_b3);
/* no pops at end */
/* no BB returns */

goto pc_190;


}pc_b3:
{ /* <============ */ 
on_bb_start(179);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b5:
{ /* <============ */ 
on_bb_start(181);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [193] */

/* JUMPI */
/* op_0 = Constant((4, 193)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_c1;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_bd:
{ /* <============ */ 
on_bb_start(189);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c1:
{ /* <============ */ 
on_bb_start(193);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [202] */

/* PUSH2 */
/* val = [587] */

/* JUMP */
/* op_0 = Constant((3, 587)) */
/* BB finalizer */
ctxt->s.set(0, c_ca);
/* no pops at end */
/* no BB returns */

goto pc_24b;


}pc_ca:
{ /* <============ */ 
on_bb_start(202);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_27, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_27, v_6_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(v_2_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((16, 64)) */
const uint256_t v_17_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((17, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_20_0 = sub_v(v_12_0, v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* RETURN */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((20, 0)) */
return_v(v_17_0, v_20_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_10c:
{ /* <============ */ 
on_bb_start(268);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [280] */

/* JUMPI */
/* op_0 = Constant((4, 280)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_118;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_114:
{ /* <============ */ 
on_bb_start(276);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_118:
{ /* <============ */ 
on_bb_start(280);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [311] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [624] */

/* JUMP */
/* op_0 = Constant((23, 624)) */
/* BB finalizer */
ctxt->s.set(0, c_137);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);

goto pc_270;


}pc_137:
{ /* <============ */ 
on_bb_start(311);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_14d:
{ /* <============ */ 
on_bb_start(333);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [1] */

/* DUP1 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 1)) */

/* POP */

/* GT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::GT, v_4_0, s_0_1);
const uint256_t v_7_0 = gt_v(v_4_0, s_0_1);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [366] */

/* JUMPI */
/* op_0 = Constant((10, 366)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_16e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_15c:
{ /* <============ */ 
on_bb_start(348);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* PUSH1 */
/* val = [1] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((0, 1)) */
const uint256_t v_2_0 = add_v(s_0_1, c_1);


/* PUSH1 */
/* val = [1] */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* PUSH2 */
/* val = [364] */

/* SWAP2 */
/* op_0 = Constant((5, 364)) */
/* op_1 = Constant((3, 1)) */

/* SWAP1 */
/* op_0 = Constant((3, 1)) */
/* op_1 = InstructionRef((2, 0)) */

/* PUSH2 */
/* val = [659] */

/* JUMP */
/* op_0 = Constant((8, 659)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);
/* BB return 1 Constant((5, 364))*/
ctxt->s.push(c_16c);
/* BB return 2 Constant((3, 1))*/
ctxt->s.push(c_1);
/* BB return 3 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);

goto pc_293;


}pc_16c:
{ /* <============ */ 
on_bb_start(364);
/* JUMPDEST */

/* POP */

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_16e:
{ /* <============ */ 
on_bb_start(366);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [1] */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* DUP2 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_5_0 = sload_v(c_1);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((5, 0)) */
TRACE_COMP(eevm::Opcode::LT, s_0_1, v_5_0);
const uint256_t v_7_0 = lt_v(s_0_1, v_5_0);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [382] */

/* JUMPI */
/* op_0 = Constant((10, 382)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
/* BB return 1 Constant((2, 1))*/
ctxt->s.push(c_1);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
 
 goto pc_17e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
/* BB return 1 Constant((2, 1))*/
ctxt->s.push(c_1);
/* BB return 2 StackRef((0, 1))*/
ctxt->s.push(s_0_1);
}pc_17d:
{ /* <============ */ 
on_bb_start(381);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_17e:
{ /* <============ */ 
on_bb_start(382);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore_v(c_0, s_0_1);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((5, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = sha3_v(c_0, c_20);


/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = add_v(v_6_0, s_0_0);


/* DUP2 */
/* op_0 = StackRef((0, 2)) */

/* SWAP1 */
/* op_0 = StackRef((0, 2)) */
/* op_1 = InstructionRef((7, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = StackRef((0, 2)) */
sstore_v(v_7_0, s_0_2);


/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 5)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(6);
/* no BB returns */

JUMP(s_0_5);


}pc_190:
{ /* <============ */ 
on_bb_start(400);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_27, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_27, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_27, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [491] */

/* JUMPI */
/* op_0 = Constant((20, 491)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1eb;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1e7:
{ /* <============ */ 
on_bb_start(487);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1eb:
{ /* <============ */ 
on_bb_start(491);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_27, v_1_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_5_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_27, v_5_0);


/* BALANCE */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = balance_v(v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_11_0 = iszero_v(v_8_0);


/* MUL */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_12_0 = mul_v(v_11_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((17, 64)) */
const uint256_t v_18_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((15, 0)) */

/* SUB */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_21_0 = sub_v(v_15_0, v_18_0);


/* DUP2 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((8, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((12, 0)) */

/* CALL */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = InstructionRef((8, 0)) */
/* op_3 = InstructionRef((18, 0)) */
/* op_4 = InstructionRef((21, 0)) */
/* op_5 = InstructionRef((18, 0)) */
/* op_6 = Constant((16, 0)) */
const uint256_t v_26_0 = call_v(v_12_0, v_3_0, v_8_0, v_18_0, v_21_0, v_18_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_32_0 = iszero_v(v_26_0);


/* DUP1 */
/* op_0 = InstructionRef((32, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((32, 0)) */
const uint256_t v_34_0 = iszero_v(v_32_0);


/* PUSH2 */
/* val = [584] */

/* JUMPI */
/* op_0 = Constant((35, 584)) */
/* op_1 = InstructionRef((34, 0)) */
if ( v_34_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
 
 goto pc_248;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
}pc_23f:
{ /* <============ */ 
on_bb_start(575);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_248:
{ /* <============ */ 
on_bb_start(584);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_24b:
{ /* <============ */ 
on_bb_start(587);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_27, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_270:
{ /* <============ */ 
on_bb_start(624);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [1] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_5_0 = sload_v(c_1);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = InstructionRef((5, 0)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, v_5_0);
const uint256_t v_7_0 = lt_v(s_0_0, v_5_0);


/* ISZERO */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = iszero_v(v_7_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [641] */

/* JUMPI */
/* op_0 = Constant((10, 641)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 1))*/
ctxt->s.push(c_1);
/* BB return 2 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
 
 goto pc_281;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 1))*/
ctxt->s.push(c_1);
/* BB return 2 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_280:
{ /* <============ */ 
on_bb_start(640);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_281:
{ /* <============ */ 
on_bb_start(641);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore_v(c_0, s_0_1);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((5, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = sha3_v(c_0, c_20);


/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = add_v(v_6_0, s_0_0);


/* SLOAD */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = sload_v(v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 2)) */

/* POP */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 4)) */

/* SWAP1 */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 3)) */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 4)) */
/* BB finalizer */
ctxt->s.set(4, v_8_0);
ctxt->s.pop_drop_n(4);
/* no BB returns */

JUMP(s_0_4);


}pc_293:
{ /* <============ */ 
on_bb_start(659);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* SLOAD */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_2_0 = sload_v(s_0_1);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* SSTORE */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(s_0_1, s_0_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* GT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_2_0, s_0_0);
const uint256_t v_8_0 = gt_v(v_2_0, s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_9_0 = iszero_v(v_8_0);


/* PUSH2 */
/* val = [698] */

/* JUMPI */
/* op_0 = Constant((10, 698)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);
 
 goto pc_2ba;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);
}pc_2a1:
{ /* <============ */ 
on_bb_start(673);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 2)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 2)) */
mstore_v(c_0, s_0_2);


/* PUSH1 */
/* val = [32] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((5, 0)) */
/* op_1 = Constant((4, 32)) */
const uint256_t v_6_0 = sha3_v(c_0, c_20);


/* SWAP2 */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_9_0 = add_v(v_6_0, s_0_0);


/* SWAP2 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((6, 0)) */

/* ADD */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_11_0 = add_v(v_6_0, s_0_1);


/* PUSH2 */
/* val = [697] */

/* SWAP2 */
/* op_0 = Constant((12, 697)) */
/* op_1 = InstructionRef((9, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((11, 0)) */

/* PUSH2 */
/* val = [703] */

/* JUMP */
/* op_0 = Constant((15, 703)) */
/* BB finalizer */
ctxt->s.set(0, c_2b9);
/* no pops at end */
/* BB return 0 InstructionRef((9, 0))*/
ctxt->s.push(v_9_0);
/* BB return 1 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

goto pc_2bf;


}pc_2b9:
{ /* <============ */ 
on_bb_start(697);
/* JUMPDEST */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2ba:
{ /* <============ */ 
on_bb_start(698);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 3)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(4);
/* no BB returns */

JUMP(s_0_3);


}pc_2bf:
{ /* <============ */ 
on_bb_start(703);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH2 */
/* val = [737] */

/* SWAP2 */
/* op_0 = Constant((1, 737)) */
/* op_1 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */

/* BB finalizer */
ctxt->s.set(0, s_0_1);

ctxt->s.set(1, c_2e1);
/* no pops at end */
/* BB return 0 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
}pc_2c5:
{ /* <============ */ 
on_bb_start(709);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* GT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
TRACE_COMP(eevm::Opcode::GT, s_0_1, s_0_0);
const uint256_t v_3_0 = gt_v(s_0_1, s_0_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [733] */

/* JUMPI */
/* op_0 = Constant((5, 733)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_2dd;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2ce:
{ /* <============ */ 
on_bb_start(718);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* PUSH1 */
/* val = [0] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = StackRef((0, 0)) */

/* SSTORE */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((2, 0)) */
sstore_v(s_0_0, c_0);


/* POP */

/* PUSH1 */
/* val = [1] */

/* ADD */
/* op_0 = Constant((6, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_7_0 = add_v(c_1, s_0_0);


/* PUSH2 */
/* val = [709] */

/* JUMP */
/* op_0 = Constant((8, 709)) */
/* BB finalizer */
ctxt->s.set(0, v_7_0);
/* no pops at end */
/* no BB returns */

goto pc_2c5;


}pc_2dd:
{ /* <============ */ 
on_bb_start(733);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 2)) */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
ctxt->s.set(2, s_0_1);
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_2);


}pc_2e1:
{ /* <============ */ 
on_bb_start(737);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(1, s_0_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_1);


}pc_2e4:
{ /* <============ */ 
on_bb_start(740);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2e5:
{ /* <============ */ 
on_bb_start(741);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_47, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2e5 (inst offset 3; byte 0xb9)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2ef:
{ /* <============ */ 
on_bb_start(751);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* SLT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::SLT, s_0_0, s_0_1);
const uint256_t v_0_0 = slt_v(s_0_0, s_0_1);


/* SELFBALANCE */
const uint256_t v_1_0 = selfbalance_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2ef (inst offset 2; byte 0xe)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2f2:
{ /* <============ */ 
on_bb_start(754);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* XOR */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = xor_v(s_0_0, s_0_1);


/* SHA3 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = sha3_v(v_0_0, s_0_2);


/* PUSH21 */
/* val = [77227687222135267536937518522489973328087263660948] */

/* PUSH17 */
/* val = [641849753641] */

/* BB finalizer */
ctxt->s.set(0, g_48);

ctxt->s.set(1, g_49);

ctxt->s.set(2, v_1_0);
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x3,0x10,0x80,0x61,0x0,0x20,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x62,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x1a,0xb0,0x6e,0xe5,0x14,0x61,0x0,0x67,0x57,0x80,0x63,0x3c,0xcf,0xd6,0xb,0x14,0x61,0x0,0x9e,0x57,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x0,0xb5,0x57,0x80,0x63,0x95,0x7,0xd3,0x9a,0x14,0x61,0x1,0xc,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x73,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x9c,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0x4d,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xaa,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xb3,0x61,0x1,0x90,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xc1,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xca,0x61,0x2,0x4b,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x1,0x18,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x37,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x2,0x70,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x81,0x60,0x1,0x80,0x54,0x90,0x50,0x11,0x15,0x15,0x61,0x1,0x6e,0x57,0x60,0x1,0x82,0x1,0x60,0x1,0x81,0x61,0x1,0x6c,0x91,0x90,0x61,0x2,0x93,0x56,0x5b,0x50,0x5b,0x80,0x60,0x1,0x83,0x81,0x54,0x81,0x10,0x15,0x15,0x61,0x1,0x7e,0x57,0xfe,0x5b,0x90,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x1,0x81,0x90,0x55,0x50,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x1,0xeb,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x2,0x48,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x5b,0x60,0x0,0x60,0x1,0x82,0x81,0x54,0x81,0x10,0x15,0x15,0x61,0x2,0x81,0x57,0xfe,0x5b,0x90,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x1,0x54,0x90,0x50,0x91,0x90,0x50,0x56,0x5b,0x81,0x54,0x81,0x83,0x55,0x81,0x81,0x11,0x15,0x61,0x2,0xba,0x57,0x81,0x83,0x60,0x0,0x52,0x60,0x20,0x60,0x0,0x20,0x91,0x82,0x1,0x91,0x1,0x61,0x2,0xb9,0x91,0x90,0x61,0x2,0xbf,0x56,0x5b,0x5b,0x50,0x50,0x50,0x56,0x5b,0x61,0x2,0xe1,0x91,0x90,0x5b,0x80,0x82,0x11,0x15,0x61,0x2,0xdd,0x57,0x60,0x0,0x81,0x60,0x0,0x90,0x55,0x50,0x60,0x1,0x1,0x61,0x2,0xc5,0x56,0x5b,0x50,0x90,0x56,0x5b,0x90,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0xb9,0x12,0x47,0xe,0x18,0x20,0x74,0x34,0xd7,0x61,0x43,0xa5,0xb9,0xf6,0x12,0x25,0x79,0x7,0x69,0xc,0x4c,0xcd,0x5,0x74,0xa9,0x86,0xcb,0x94,0x70,0x95,0x71,0x3a,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_mapping_write::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_mapping_write::constructor_args() {
    return _constructor_args;
}
