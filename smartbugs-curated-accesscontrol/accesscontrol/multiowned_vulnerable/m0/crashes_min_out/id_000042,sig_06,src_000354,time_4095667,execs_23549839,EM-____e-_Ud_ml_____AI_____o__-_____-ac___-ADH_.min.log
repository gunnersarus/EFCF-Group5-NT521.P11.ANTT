[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(61)] ✔️
[Trimmer Stage: Transactions(60)] ✔️
[Trimmer Stage: Transactions(59)] ✔️
[Trimmer Stage: Transactions(58)] ✔️
[Trimmer Stage: Transactions(57)] ✔️
[Trimmer Stage: Transactions(56)] ✔️
[Trimmer Stage: Transactions(55)] ✔️
[Trimmer Stage: Transactions(54)] ✔️
[Trimmer Stage: Transactions(53)] ✔️
[Trimmer Stage: Transactions(52)] ✔️
[Trimmer Stage: Transactions(51)] ✔️
[Trimmer Stage: Transactions(50)] ✔️
[Trimmer Stage: Transactions(49)] ✔️
[Trimmer Stage: Transactions(48)] ✔️
[Trimmer Stage: Transactions(47)] ✔️
[Trimmer Stage: Transactions(46)] ✔️
[Trimmer Stage: Transactions(45)] ✔️
[Trimmer Stage: Transactions(44)] ✔️
[Trimmer Stage: Transactions(43)] ✔️
[Trimmer Stage: Transactions(42)] ✔️
[Trimmer Stage: Transactions(41)] ✔️
[Trimmer Stage: Transactions(40)] ✔️
[Trimmer Stage: Transactions(39)] ✔️
[Trimmer Stage: Transactions(38)] ✔️
[Trimmer Stage: Transactions(37)] ✔️
[Trimmer Stage: Transactions(36)] ✔️
[Trimmer Stage: Transactions(35)] ✔️
[Trimmer Stage: Transactions(34)] ❌
[Trimmer Stage: Transactions(33)] ✔️
[Trimmer Stage: Transactions(32)] ✔️
[Trimmer Stage: Transactions(31)] ✔️
[Trimmer Stage: Transactions(30)] ✔️
[Trimmer Stage: Transactions(29)] ✔️
[Trimmer Stage: Transactions(28)] ✔️
[Trimmer Stage: Transactions(27)] ✔️
[Trimmer Stage: Transactions(26)] ✔️
[Trimmer Stage: Transactions(25)] ✔️
[Trimmer Stage: Transactions(24)] ✔️
[Trimmer Stage: Transactions(23)] ✔️
[Trimmer Stage: Transactions(22)] ✔️
[Trimmer Stage: Transactions(21)] ✔️
[Trimmer Stage: Transactions(20)] ✔️
[Trimmer Stage: Transactions(19)] ✔️
[Trimmer Stage: Transactions(18)] ✔️
[Trimmer Stage: Transactions(17)] ✔️
[Trimmer Stage: Transactions(16)] ✔️
[Trimmer Stage: Transactions(15)] ✔️
[Trimmer Stage: Transactions(14)] ✔️
[Trimmer Stage: Transactions(13)] ✔️
[Trimmer Stage: Transactions(12)] ✔️
[Trimmer Stage: Transactions(11)] ✔️
[Trimmer Stage: Transactions(10)] ✔️
[Trimmer Stage: Transactions(9)] ✔️
[Trimmer Stage: Transactions(8)] ✔️
[Trimmer Stage: Transactions(7)] ✔️
[Trimmer Stage: Transactions(6)] ✔️
[Trimmer Stage: Transactions(5)] ✔️
[Trimmer Stage: Transactions(4)] ✔️
[Trimmer Stage: Transactions(3)] ✔️
[Trimmer Stage: Transactions(2)] ✔️
[Trimmer Stage: Transactions(1)] ✔️
[Trimmer Stage: Transactions(0)] ❌
[Trimmer Stage: TransactionHeader(1, BlockAdvance(0))] ✔️
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(1, 7)] ❌
[Trimmer Stage: Sender(1, 6)] ❌
[Trimmer Stage: Sender(1, 5)] ✔️
[Trimmer Stage: Sender(1, 4)] ❌
[Trimmer Stage: Sender(1, 3)] ❌
[Trimmer Stage: Sender(1, 2)] ❌
[Trimmer Stage: Sender(1, 1)] ❌
[Trimmer Stage: Sender(1, 0)] ❌
[Trimmer Stage: Sender(0, 5)] ✔️
[Trimmer Stage: Sender(0, 4)] ✔️
[Trimmer Stage: Sender(0, 3)] ✔️
[Trimmer Stage: Sender(0, 2)] ✔️
[Trimmer Stage: Sender(0, 1)] ✔️
[Trimmer Stage: Sender(0, 0)] ✔️
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(3814697265625))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(100000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(1))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ we try sorting the transaction list ]
reduced testcases from 1318 to 112 bytes (by 92 %) edit distance 1221
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 9223677212636025808

TX[0] with tx_sender[5]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc5442b23ea5ca66c3441e62bf6456f010646ae94),  }
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: fallback()
  input: 00000000 
TX[3] with tx_sender[0]; tx_receiver[0]; call_value: 0x1585000000000000000000000000000000; length: 10; block+=0; #returns=0
  func: fallback()
  input: 24540000000000000000 
TX[4] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[5] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[6] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[7] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[8] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[9] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[10] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[11] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 32; block+=0; #returns=0
  func: fallback()
  input: 0000000000000000000000000000000000000101200000000000000000000000 
TX[12] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[13] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[14] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[15] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[16] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[17] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[18] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[19] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[20] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[21] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[22] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 32; block+=0; #returns=0
  func: fallback()
  input: 0000000000000000000000000000000000000101200000000000000000000000 
TX[23] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[24] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[25] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[26] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[27] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[28] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[29] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[30] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[31] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 32; block+=0; #returns=0
  func: fallback()
  input: 0000000000000000000000000000000000000101200000000000000000000000 
TX[32] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[33] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[34] with tx_sender[95]; tx_receiver[0]; call_value: 0x0; length: 4; block+=1; #returns=0
  func: withdrawAll() (0x853828b6)
  input: {  }
TX[35] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[36] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[37] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[38] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[39] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[40] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[41] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[42] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[43] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[44] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[45] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 32; block+=0; #returns=0
  func: fallback()
  input: 0000000000000000000000000000000000000101200000000000000000000000 
TX[46] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[47] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[48] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[49] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[50] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[51] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[52] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[53] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[54] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[55] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 32; block+=0; #returns=0
  func: fallback()
  input: 0000000000000000000000000000000000000101200000000000000000000000 
TX[56] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 0; block+=0; #returns=0
  input: 
TX[57] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[58] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 36; block+=0; #returns=0
  func: owners(address):(address) (0x22914a7)
  input: { address(0x0000000000000000000000000000000000000004),  }
TX[59] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[60] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[61] with tx_sender[94]; tx_receiver[83]; call_value: 0x0; length: 36; block+=1; #returns=0
  func: deleteOwner(address):(bool) (0xcd5c4c70)
  input: { address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3),  }
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc5442b23ea5ca66c3441e62bf6456f010646ae94),  }
TX[1] with tx_sender[5]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: withdrawAll() (0x853828b6)
  input: {  }
