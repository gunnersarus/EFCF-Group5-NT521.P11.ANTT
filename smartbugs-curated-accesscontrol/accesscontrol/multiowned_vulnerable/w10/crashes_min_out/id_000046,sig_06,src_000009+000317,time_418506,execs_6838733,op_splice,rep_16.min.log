[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(13)] ✔️
[Trimmer Stage: Transactions(12)] ✔️
[Trimmer Stage: Transactions(11)] ✔️
[Trimmer Stage: Transactions(10)] ✔️
[Trimmer Stage: Transactions(9)] ✔️
[Trimmer Stage: Transactions(8)] ✔️
[Trimmer Stage: Transactions(7)] ❌
[Trimmer Stage: Transactions(6)] ❌
[Trimmer Stage: Transactions(5)] ✔️
[Trimmer Stage: Transactions(4)] ✔️
[Trimmer Stage: Transactions(3)] ✔️
[Trimmer Stage: Transactions(2)] ✔️
[Trimmer Stage: Transactions(1)] ✔️
[Trimmer Stage: Transactions(0)] ✔️
[Trimmer Stage: Returns(1, 0)] ❌
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(1, 2)] ✔️
[Trimmer Stage: Sender(1, 1)] ❌
[Trimmer Stage: Sender(1, 0)] ❌
[Trimmer Stage: Sender(0, 0)] ✔️
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(100000))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(10000))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(10))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(5))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(2))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(1))] ✔️
[Trimmer Stage: BlockHeader(TimeStamp(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(3814697265625))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(100000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(1))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ we try sorting the transaction list ]
reduced testcases from 571 to 116 bytes (by 80 %) edit distance 505
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 123330263013916672
  initial_ether: 144116287654592512

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0xffff; length: 0; block+=0; #returns=0
  input: 
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x200101000020; length: 0; block+=0; #returns=0
  input: 
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x6400000000000000; length: 0; block+=0; #returns=0
  input: 
TX[3] with tx_sender[0]; tx_receiver[0]; call_value: 0x4000000000; length: 0; block+=0; #returns=0
  input: 
TX[4] with tx_sender[0]; tx_receiver[0]; call_value: 0x20000; length: 0; block+=0; #returns=0
  input: 
TX[5] with tx_sender[0]; tx_receiver[0]; call_value: 0xffff; length: 0; block+=0; #returns=0
  input: 
TX[6] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc2018c3f08417e77b94fb541fed2bf1e09093edd),  }
TX[7] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 1; allows reenter: 0; data: 0x
TX[8] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 1; allows reenter: 1; data: 0x
TX[9] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 0; allows reenter: 251; data: 0x0400010002000000000000000000000000000000000000000000000000000000000000000000000000000000853828b60100000004000100020000000000000000000023853828b60100000004000100020000000000000000000000000000000000000000000000000000000000000000
TX[10] with tx_sender[56]; tx_receiver[133]; call_value: 0x200010004000000; length: 0; block+=40; #returns=0
  input: 
TX[11] with tx_sender[0]; tx_receiver[0]; call_value: 0x1b6283885000000; length: 0; block+=0; #returns=0
  input: 
TX[12] with tx_sender[0]; tx_receiver[4]; call_value: 0x6b00000000000000000000000000000000; length: 0; block+=1; #returns=0
  input: 
TX[13] with tx_sender[0]; tx_receiver[0]; call_value: 0x400000001b62838; length: 134; block+=0; #returns=0
  func: fallback()
  input: 000100020000000000000000000000853828b601000000040001000200000000 000000000000006a3828b6010000000500000000000000000000000000000002 2914a70004000100020000000000000000180000853828b60100000004000100 020000000000000000000000853828b601000000040001000200000000000000 000000008538 
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc2018c3f08417e77b94fb541fed2bf1e09093edd),  }
TX[1] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 1; allows reenter: 0; data: 0x
