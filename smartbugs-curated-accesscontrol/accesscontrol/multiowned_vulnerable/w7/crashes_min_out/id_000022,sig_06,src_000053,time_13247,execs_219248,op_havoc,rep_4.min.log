[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(5)] ✔️
[Trimmer Stage: Transactions(4)] ✔️
[Trimmer Stage: Transactions(3)] ✔️
[Trimmer Stage: Transactions(2)] ❌
[Trimmer Stage: Transactions(1)] ❌
[Trimmer Stage: Transactions(0)] ✔️
[Trimmer Stage: Returns(1, 0)] ❌
[Trimmer Stage: ReturnData(1, 0, 0)] ✔️
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(1, 2)] ✔️
[Trimmer Stage: Sender(1, 1)] ❌
[Trimmer Stage: Sender(1, 0)] ❌
[Trimmer Stage: Sender(0, 2)] ✔️
[Trimmer Stage: Sender(0, 1)] ✔️
[Trimmer Stage: Sender(0, 0)] ✔️
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(100000))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(10000))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(10))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(5))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(2))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(1))] ✔️
[Trimmer Stage: BlockHeader(Difficulty(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(100000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(1))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ we try sorting the transaction list ]
reduced testcases from 268 to 116 bytes (by 57 %) edit distance 202
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 2522015791327477760
  gas_limit: 0
  timestamp: 0
  initial_ether: 1179648

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
TX[1] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc2018c3f08417e77b94fb541fed2bf1e09093edd),  }
TX[2] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000000
TX[3] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 11; block+=3; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: 00000000000000  [failed to decode]
TX[4] with tx_sender[0]; tx_receiver[0]; call_value: 0x7246cc9408c38bea; length: 0; block+=196; #returns=0
  input: 
TX[5] with tx_sender[0]; tx_receiver[160]; call_value: 0x200000024a3; length: 45; block+=211; #returns=0
  func: fallback()
  input: 000000000000000000cd5c4c70000000000000000000000000c2018c3f08417e 77b94fb541fed2bf1e09093edd 
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: newOwner(address):(bool) (0x85952454)
  input: { address(0xc2018c3f08417e77b94fb541fed2bf1e09093edd),  }
TX[1] with tx_sender[2]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=1
  func: withdrawAll() (0x853828b6)
  input: {  }
  returns:
    return val: 1; allows reenter: 0; data: 0x
