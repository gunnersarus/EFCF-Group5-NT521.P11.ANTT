// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/mycontract.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x41,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x9e,0x1a,0x00,0xaa,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x46,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x5b, /* [65'0x41] JUMPDEST */
0x60, /* [66'0x42] PUSH1 */
0x00,/* constant data */
0x80, /* [68'0x44] DUP1 */
0xfd, /* [69'0x45] REVERT */
0x5b, /* [70'0x46] JUMPDEST */
0x34, /* [71'0x47] CALLVALUE */
0x80, /* [72'0x48] DUP1 */
0x15, /* [73'0x49] ISZERO */
0x61, /* [74'0x4a] PUSH2 */
0x00,0x52,/* constant data */
0x57, /* [77'0x4d] JUMPI */
0x60, /* [78'0x4e] PUSH1 */
0x00,/* constant data */
0x80, /* [80'0x50] DUP1 */
0xfd, /* [81'0x51] REVERT */
0x5b, /* [82'0x52] JUMPDEST */
0x50, /* [83'0x53] POP */
0x61, /* [84'0x54] PUSH2 */
0x00,0x91,/* constant data */
0x60, /* [87'0x57] PUSH1 */
0x04,/* constant data */
0x80, /* [89'0x59] DUP1 */
0x36, /* [90'0x5a] CALLDATASIZE */
0x03, /* [91'0x5b] SUB */
0x81, /* [92'0x5c] DUP2 */
0x01, /* [93'0x5d] ADD */
0x90, /* [94'0x5e] SWAP1 */
0x80, /* [95'0x5f] DUP1 */
0x80, /* [96'0x60] DUP1 */
0x35, /* [97'0x61] CALLDATALOAD */
0x73, /* [98'0x62] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [119'0x77] AND */
0x90, /* [120'0x78] SWAP1 */
0x60, /* [121'0x79] PUSH1 */
0x20,/* constant data */
0x01, /* [123'0x7b] ADD */
0x90, /* [124'0x7c] SWAP1 */
0x92, /* [125'0x7d] SWAP3 */
0x91, /* [126'0x7e] SWAP2 */
0x90, /* [127'0x7f] SWAP1 */
0x80, /* [128'0x80] DUP1 */
0x35, /* [129'0x81] CALLDATALOAD */
0x90, /* [130'0x82] SWAP1 */
0x60, /* [131'0x83] PUSH1 */
0x20,/* constant data */
0x01, /* [133'0x85] ADD */
0x90, /* [134'0x86] SWAP1 */
0x92, /* [135'0x87] SWAP3 */
0x91, /* [136'0x88] SWAP2 */
0x90, /* [137'0x89] SWAP1 */
0x50, /* [138'0x8a] POP */
0x50, /* [139'0x8b] POP */
0x50, /* [140'0x8c] POP */
0x61, /* [141'0x8d] PUSH2 */
0x00,0x93,/* constant data */
0x56, /* [144'0x90] JUMP */
0x5b, /* [145'0x91] JUMPDEST */
0x00, /* [146'0x92] STOP */
0x5b, /* [147'0x93] JUMPDEST */
0x60, /* [148'0x94] PUSH1 */
0x00,/* constant data */
0x80, /* [150'0x96] DUP1 */
0x90, /* [151'0x97] SWAP1 */
0x54, /* [152'0x98] SLOAD */
0x90, /* [153'0x99] SWAP1 */
0x61, /* [154'0x9a] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [157'0x9d] EXP */
0x90, /* [158'0x9e] SWAP1 */
0x04, /* [159'0x9f] DIV */
0x73, /* [160'0xa0] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [181'0xb5] AND */
0x73, /* [182'0xb6] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [203'0xcb] AND */
0x32, /* [204'0xcc] ORIGIN */
0x73, /* [205'0xcd] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [226'0xe2] AND */
0x14, /* [227'0xe3] EQ */
0x15, /* [228'0xe4] ISZERO */
0x15, /* [229'0xe5] ISZERO */
0x61, /* [230'0xe6] PUSH2 */
0x00,0xee,/* constant data */
0x57, /* [233'0xe9] JUMPI */
0x60, /* [234'0xea] PUSH1 */
0x00,/* constant data */
0x80, /* [236'0xec] DUP1 */
0xfd, /* [237'0xed] REVERT */
0x5b, /* [238'0xee] JUMPDEST */
0x81, /* [239'0xef] DUP2 */
0x73, /* [240'0xf0] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [261'0x105] AND */
0x61, /* [262'0x106] PUSH2 */
0x08,0xfc,/* constant data */
0x82, /* [265'0x109] DUP3 */
0x90, /* [266'0x10a] SWAP1 */
0x81, /* [267'0x10b] DUP2 */
0x15, /* [268'0x10c] ISZERO */
0x02, /* [269'0x10d] MUL */
0x90, /* [270'0x10e] SWAP1 */
0x60, /* [271'0x10f] PUSH1 */
0x40,/* constant data */
0x51, /* [273'0x111] MLOAD */
0x60, /* [274'0x112] PUSH1 */
0x00,/* constant data */
0x60, /* [276'0x114] PUSH1 */
0x40,/* constant data */
0x51, /* [278'0x116] MLOAD */
0x80, /* [279'0x117] DUP1 */
0x83, /* [280'0x118] DUP4 */
0x03, /* [281'0x119] SUB */
0x81, /* [282'0x11a] DUP2 */
0x85, /* [283'0x11b] DUP6 */
0x88, /* [284'0x11c] DUP9 */
0x88, /* [285'0x11d] DUP9 */
0xf1, /* [286'0x11e] CALL */
0x93, /* [287'0x11f] SWAP4 */
0x50, /* [288'0x120] POP */
0x50, /* [289'0x121] POP */
0x50, /* [290'0x122] POP */
0x50, /* [291'0x123] POP */
0x15, /* [292'0x124] ISZERO */
0x80, /* [293'0x125] DUP1 */
0x15, /* [294'0x126] ISZERO */
0x61, /* [295'0x127] PUSH2 */
0x01,0x34,/* constant data */
0x57, /* [298'0x12a] JUMPI */
0x3d, /* [299'0x12b] RETURNDATASIZE */
0x60, /* [300'0x12c] PUSH1 */
0x00,/* constant data */
0x80, /* [302'0x12e] DUP1 */
0x3e, /* [303'0x12f] RETURNDATACOPY */
0x3d, /* [304'0x130] RETURNDATASIZE */
0x60, /* [305'0x131] PUSH1 */
0x00,/* constant data */
0xfd, /* [307'0x133] REVERT */
0x5b, /* [308'0x134] JUMPDEST */
0x50, /* [309'0x135] POP */
0x50, /* [310'0x136] POP */
0x50, /* [311'0x137] POP */
0x56, /* [312'0x138] JUMP */
0x00, /* [313'0x139] STOP */
0xa1, /* [314'0x13a] LOG1 */
0x65, /* [315'0x13b] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [322'0x142] SHA3 */
0x82, /* [323'0x143] DUP3 */
0x95, /* [324'0x144] SWAP6 */
0xc8, /* [325'0x145] INVALID' byte */
0xa8, /* [326'0x146] INVALID' byte */
0xcc, /* [327'0x147] INVALID' byte */
0x70, /* [328'0x148] PUSH17 */
0x5b,0xb8,0x8c,0x8d,0x8b,0xf4,0xb0,0x79,0x0e,0xaa,0x09,0xe9,0x4f,0x97,0x43,0x47,0x4b,/* constant data */
0xf6, /* [346'0x15a] INVALID' byte */
0x37, /* [347'0x15b] CALLDATACOPY */
0x57, /* [348'0x15c] JUMPI */
0xbb, /* [349'0x15d] INVALID' byte */
0x24, /* [350'0x15e] INVALID' byte */
0xae, /* [351'0x15f] INVALID' byte */
0xe5, /* [352'0x160] INVALID' byte */
0x0b, /* [353'0x161] SIGNEXTEND */
0x1b, /* [354'0x162] SHL */
0x00, /* [355'0x163] STOP */
0x29, /* [356'0x164] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_mycontract::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_mycontract::_contract_name = "mycontract";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_mycontract> eevm::EVM2CPP_mycontract::reg{};
const std::string& eevm::EVM2CPP_mycontract::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_41 = 0x41_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_46 = 0x46_u256;
constexpr uint256_t c_52 = 0x52_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_91 = 0x91_u256;
constexpr uint256_t c_93 = 0x93_u256;
constexpr uint256_t c_ee = 0xee_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_134 = 0x134_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_9e1a00aa = 0x9e1a00aa_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_21 = 0x627a7a723058_u256;
constexpr uint256_t g_11 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_mycontract::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_41,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_46,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_52,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_91,
&&__invld,
&&pc_93,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ee,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_134,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [65] */

/* JUMPI */
/* op_0 = Constant((6, 65)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_41;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [2652504234] */

/* EQ */
/* op_0 = Constant((8, 2652504234)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_9e1a00aa, v_6_0);


/* PUSH2 */
/* val = [70] */

/* JUMPI */
/* op_0 = Constant((10, 70)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_46;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_46:
{ /* <============ */ 
on_bb_start(70);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [82] */

/* JUMPI */
/* op_0 = Constant((4, 82)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_52;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_4e:
{ /* <============ */ 
on_bb_start(78);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_52:
{ /* <============ */ 
on_bb_start(82);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [145] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_11, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* DUP1 */
/* op_0 = Constant((17, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((17, 36)) */
const uint256_t v_23_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((17, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((25, 32)) */
/* op_1 = Constant((17, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((26, 68)) */
/* op_1 = InstructionRef((23, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((26, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [147] */

/* JUMP */
/* op_0 = Constant((34, 147)) */
/* BB finalizer */
ctxt->s.set(0, c_91);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);
/* BB return 1 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);

goto pc_93;


}pc_91:
{ /* <============ */ 
on_bb_start(145);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_93:
{ /* <============ */ 
on_bb_start(147);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_11, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_11, v_11_0);


/* ORIGIN */
const uint256_t v_14_0 = origin_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_11, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [238] */

/* JUMPI */
/* op_0 = Constant((20, 238)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_ee;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ea:
{ /* <============ */ 
on_bb_start(234);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ee:
{ /* <============ */ 
on_bb_start(238);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_3_0 = and_v(g_11, s_0_1);


/* PUSH2 */
/* val = [2300] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_8_0 = iszero_v(s_0_0);


/* MUL */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_9_0 = mul_v(v_8_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((11, 64)) */
const uint256_t v_12_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_12_0, v_15_0);


/* DUP2 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((9, 0)) */

/* CALL */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((15, 0)) */
/* op_4 = InstructionRef((18, 0)) */
/* op_5 = InstructionRef((15, 0)) */
/* op_6 = Constant((13, 0)) */
const uint256_t v_23_0 = call_v(v_9_0, v_3_0, s_0_0, v_15_0, v_18_0, v_15_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_29_0 = iszero_v(v_23_0);


/* DUP1 */
/* op_0 = InstructionRef((29, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = iszero_v(v_29_0);


/* PUSH2 */
/* val = [308] */

/* JUMPI */
/* op_0 = Constant((32, 308)) */
/* op_1 = InstructionRef((31, 0)) */
if ( v_31_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
 
 goto pc_134;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
}pc_12b:
{ /* <============ */ 
on_bb_start(299);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_134:
{ /* <============ */ 
on_bb_start(308);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 3)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(4);
/* no BB returns */

JUMP(s_0_3);


}pc_139:
{ /* <============ */ 
on_bb_start(313);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_13a:
{ /* <============ */ 
on_bb_start(314);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_8 = ctxt->s.peek(8);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_21, s_0_3);


/* DUP3 */
/* op_0 = StackRef((0, 5)) */

/* SWAP6 */
/* op_0 = StackRef((0, 5)) */
/* op_1 = StackRef((0, 8)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x13a (inst offset 5; byte 0xc8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_146:
{ /* <============ */ 
on_bb_start(326);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x146 (inst offset 0; byte 0xa8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_147:
{ /* <============ */ 
on_bb_start(327);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x147 (inst offset 0; byte 0xcc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_148:
{ /* <============ */ 
on_bb_start(328);
/* PUSH17 */
/* val = [31211003133498215961035168543485508929355] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x148 (inst offset 1; byte 0xf6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_15b:
{ /* <============ */ 
on_bb_start(347);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* CALLDATACOPY */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
calldatacopy_v(s_0_0, s_0_1, s_0_2);


/* JUMPI */
/* op_0 = StackRef((0, 3)) */
/* op_1 = StackRef((0, 4)) */
if ( s_0_4 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
 
 JUMP(s_0_3);
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
}pc_15d:
{ /* <============ */ 
on_bb_start(349);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x15d (inst offset 0; byte 0xbb)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_15e:
{ /* <============ */ 
on_bb_start(350);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x15e (inst offset 0; byte 0x24)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_15f:
{ /* <============ */ 
on_bb_start(351);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x15f (inst offset 0; byte 0xae)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_160:
{ /* <============ */ 
on_bb_start(352);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x160 (inst offset 0; byte 0xe5)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_161:
{ /* <============ */ 
on_bb_start(353);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* SIGNEXTEND */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = signextend_v(s_0_0, s_0_1);


/* SHL */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
const uint256_t v_1_0 = shl_v(v_0_0, s_0_2);


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(2, v_1_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_164:
{ /* <============ */ 
on_bb_start(356);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x164 (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x1,0x65,0x80,0x61,0x0,0x60,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x41,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x9e,0x1a,0x0,0xaa,0x14,0x61,0x0,0x46,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x52,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x91,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x0,0x93,0x56,0x5b,0x0,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x32,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x0,0xee,0x57,0x60,0x0,0x80,0xfd,0x5b,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x82,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x1,0x34,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x82,0x95,0xc8,0xa8,0xcc,0x70,0x5b,0xb8,0x8c,0x8d,0x8b,0xf4,0xb0,0x79,0xe,0xaa,0x9,0xe9,0x4f,0x97,0x43,0x47,0x4b,0xf6,0x37,0x57,0xbb,0x24,0xae,0xe5,0xb,0x1b,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_mycontract::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_mycontract::constructor_args() {
    return _constructor_args;
}
