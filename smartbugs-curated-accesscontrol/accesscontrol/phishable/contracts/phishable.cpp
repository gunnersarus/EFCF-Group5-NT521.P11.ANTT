// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/phishable.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x4c,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x4e,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0xfa,0x09,0xe6,0x30,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0xa5,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x5b, /* [76'0x4c] JUMPDEST */
0x00, /* [77'0x4d] STOP */
0x5b, /* [78'0x4e] JUMPDEST */
0x34, /* [79'0x4f] CALLVALUE */
0x80, /* [80'0x50] DUP1 */
0x15, /* [81'0x51] ISZERO */
0x61, /* [82'0x52] PUSH2 */
0x00,0x5a,/* constant data */
0x57, /* [85'0x55] JUMPI */
0x60, /* [86'0x56] PUSH1 */
0x00,/* constant data */
0x80, /* [88'0x58] DUP1 */
0xfd, /* [89'0x59] REVERT */
0x5b, /* [90'0x5a] JUMPDEST */
0x50, /* [91'0x5b] POP */
0x61, /* [92'0x5c] PUSH2 */
0x00,0x63,/* constant data */
0x61, /* [95'0x5f] PUSH2 */
0x00,0xe8,/* constant data */
0x56, /* [98'0x62] JUMP */
0x5b, /* [99'0x63] JUMPDEST */
0x60, /* [100'0x64] PUSH1 */
0x40,/* constant data */
0x51, /* [102'0x66] MLOAD */
0x80, /* [103'0x67] DUP1 */
0x82, /* [104'0x68] DUP3 */
0x73, /* [105'0x69] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [126'0x7e] AND */
0x73, /* [127'0x7f] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [148'0x94] AND */
0x81, /* [149'0x95] DUP2 */
0x52, /* [150'0x96] MSTORE */
0x60, /* [151'0x97] PUSH1 */
0x20,/* constant data */
0x01, /* [153'0x99] ADD */
0x91, /* [154'0x9a] SWAP2 */
0x50, /* [155'0x9b] POP */
0x50, /* [156'0x9c] POP */
0x60, /* [157'0x9d] PUSH1 */
0x40,/* constant data */
0x51, /* [159'0x9f] MLOAD */
0x80, /* [160'0xa0] DUP1 */
0x91, /* [161'0xa1] SWAP2 */
0x03, /* [162'0xa2] SUB */
0x90, /* [163'0xa3] SWAP1 */
0xf3, /* [164'0xa4] RETURN */
0x5b, /* [165'0xa5] JUMPDEST */
0x34, /* [166'0xa6] CALLVALUE */
0x80, /* [167'0xa7] DUP1 */
0x15, /* [168'0xa8] ISZERO */
0x61, /* [169'0xa9] PUSH2 */
0x00,0xb1,/* constant data */
0x57, /* [172'0xac] JUMPI */
0x60, /* [173'0xad] PUSH1 */
0x00,/* constant data */
0x80, /* [175'0xaf] DUP1 */
0xfd, /* [176'0xb0] REVERT */
0x5b, /* [177'0xb1] JUMPDEST */
0x50, /* [178'0xb2] POP */
0x61, /* [179'0xb3] PUSH2 */
0x00,0xe6,/* constant data */
0x60, /* [182'0xb6] PUSH1 */
0x04,/* constant data */
0x80, /* [184'0xb8] DUP1 */
0x36, /* [185'0xb9] CALLDATASIZE */
0x03, /* [186'0xba] SUB */
0x81, /* [187'0xbb] DUP2 */
0x01, /* [188'0xbc] ADD */
0x90, /* [189'0xbd] SWAP1 */
0x80, /* [190'0xbe] DUP1 */
0x80, /* [191'0xbf] DUP1 */
0x35, /* [192'0xc0] CALLDATALOAD */
0x73, /* [193'0xc1] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [214'0xd6] AND */
0x90, /* [215'0xd7] SWAP1 */
0x60, /* [216'0xd8] PUSH1 */
0x20,/* constant data */
0x01, /* [218'0xda] ADD */
0x90, /* [219'0xdb] SWAP1 */
0x92, /* [220'0xdc] SWAP3 */
0x91, /* [221'0xdd] SWAP2 */
0x90, /* [222'0xde] SWAP1 */
0x50, /* [223'0xdf] POP */
0x50, /* [224'0xe0] POP */
0x50, /* [225'0xe1] POP */
0x61, /* [226'0xe2] PUSH2 */
0x01,0x0d,/* constant data */
0x56, /* [229'0xe5] JUMP */
0x5b, /* [230'0xe6] JUMPDEST */
0x00, /* [231'0xe7] STOP */
0x5b, /* [232'0xe8] JUMPDEST */
0x60, /* [233'0xe9] PUSH1 */
0x00,/* constant data */
0x80, /* [235'0xeb] DUP1 */
0x90, /* [236'0xec] SWAP1 */
0x54, /* [237'0xed] SLOAD */
0x90, /* [238'0xee] SWAP1 */
0x61, /* [239'0xef] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [242'0xf2] EXP */
0x90, /* [243'0xf3] SWAP1 */
0x04, /* [244'0xf4] DIV */
0x73, /* [245'0xf5] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [266'0x10a] AND */
0x81, /* [267'0x10b] DUP2 */
0x56, /* [268'0x10c] JUMP */
0x5b, /* [269'0x10d] JUMPDEST */
0x60, /* [270'0x10e] PUSH1 */
0x00,/* constant data */
0x80, /* [272'0x110] DUP1 */
0x90, /* [273'0x111] SWAP1 */
0x54, /* [274'0x112] SLOAD */
0x90, /* [275'0x113] SWAP1 */
0x61, /* [276'0x114] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [279'0x117] EXP */
0x90, /* [280'0x118] SWAP1 */
0x04, /* [281'0x119] DIV */
0x73, /* [282'0x11a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [303'0x12f] AND */
0x73, /* [304'0x130] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [325'0x145] AND */
0x32, /* [326'0x146] ORIGIN */
0x73, /* [327'0x147] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [348'0x15c] AND */
0x14, /* [349'0x15d] EQ */
0x15, /* [350'0x15e] ISZERO */
0x15, /* [351'0x15f] ISZERO */
0x61, /* [352'0x160] PUSH2 */
0x01,0x68,/* constant data */
0x57, /* [355'0x163] JUMPI */
0x60, /* [356'0x164] PUSH1 */
0x00,/* constant data */
0x80, /* [358'0x166] DUP1 */
0xfd, /* [359'0x167] REVERT */
0x5b, /* [360'0x168] JUMPDEST */
0x80, /* [361'0x169] DUP1 */
0x73, /* [362'0x16a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [383'0x17f] AND */
0x61, /* [384'0x180] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [387'0x183] ADDRESS */
0x73, /* [388'0x184] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [409'0x199] AND */
0x31, /* [410'0x19a] BALANCE */
0x90, /* [411'0x19b] SWAP1 */
0x81, /* [412'0x19c] DUP2 */
0x15, /* [413'0x19d] ISZERO */
0x02, /* [414'0x19e] MUL */
0x90, /* [415'0x19f] SWAP1 */
0x60, /* [416'0x1a0] PUSH1 */
0x40,/* constant data */
0x51, /* [418'0x1a2] MLOAD */
0x60, /* [419'0x1a3] PUSH1 */
0x00,/* constant data */
0x60, /* [421'0x1a5] PUSH1 */
0x40,/* constant data */
0x51, /* [423'0x1a7] MLOAD */
0x80, /* [424'0x1a8] DUP1 */
0x83, /* [425'0x1a9] DUP4 */
0x03, /* [426'0x1aa] SUB */
0x81, /* [427'0x1ab] DUP2 */
0x85, /* [428'0x1ac] DUP6 */
0x88, /* [429'0x1ad] DUP9 */
0x88, /* [430'0x1ae] DUP9 */
0xf1, /* [431'0x1af] CALL */
0x93, /* [432'0x1b0] SWAP4 */
0x50, /* [433'0x1b1] POP */
0x50, /* [434'0x1b2] POP */
0x50, /* [435'0x1b3] POP */
0x50, /* [436'0x1b4] POP */
0x15, /* [437'0x1b5] ISZERO */
0x80, /* [438'0x1b6] DUP1 */
0x15, /* [439'0x1b7] ISZERO */
0x61, /* [440'0x1b8] PUSH2 */
0x01,0xc5,/* constant data */
0x57, /* [443'0x1bb] JUMPI */
0x3d, /* [444'0x1bc] RETURNDATASIZE */
0x60, /* [445'0x1bd] PUSH1 */
0x00,/* constant data */
0x80, /* [447'0x1bf] DUP1 */
0x3e, /* [448'0x1c0] RETURNDATACOPY */
0x3d, /* [449'0x1c1] RETURNDATASIZE */
0x60, /* [450'0x1c2] PUSH1 */
0x00,/* constant data */
0xfd, /* [452'0x1c4] REVERT */
0x5b, /* [453'0x1c5] JUMPDEST */
0x50, /* [454'0x1c6] POP */
0x50, /* [455'0x1c7] POP */
0x56, /* [456'0x1c8] JUMP */
0x00, /* [457'0x1c9] STOP */
0xa1, /* [458'0x1ca] LOG1 */
0x65, /* [459'0x1cb] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [466'0x1d2] SHA3 */
0x85, /* [467'0x1d3] DUP6 */
0xc0, /* [468'0x1d4] INVALID' byte */
0xd6, /* [469'0x1d5] INVALID' byte */
0x13, /* [470'0x1d6] SGT */
0x7a, /* [471'0x1d7] PUSH27 */
0x2f,0xf9,0x23,0x5a,0x4e,0xb7,0x26,0x45,0x66,0x23,0x6d,0x49,0x31,0x7c,0xac,0xad,0xef,0xdb,0x3b,0x19,0xd3,0xea,0xc9,0xde,0x8e,0x34,0x71,/* constant data */
0x00, /* [499'0x1f3] STOP */
0x29, /* [500'0x1f4] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_phishable::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_phishable::_contract_name = "phishable";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_phishable> eevm::EVM2CPP_phishable::reg{};
const std::string& eevm::EVM2CPP_phishable::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_4c = 0x4c_u256;
constexpr uint256_t c_4e = 0x4e_u256;
constexpr uint256_t c_5a = 0x5a_u256;
constexpr uint256_t c_63 = 0x63_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_a5 = 0xa5_u256;
constexpr uint256_t c_b1 = 0xb1_u256;
constexpr uint256_t c_e6 = 0xe6_u256;
constexpr uint256_t c_e8 = 0xe8_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_10d = 0x10d_u256;
constexpr uint256_t c_168 = 0x168_u256;
constexpr uint256_t c_1c5 = 0x1c5_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_fa09e630 = 0xfa09e630_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_25 = 0x627a7a723058_u256;
constexpr uint256_t g_14 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_26 = 0x2ff9235a4eb7264566236d49317cacadefdb3b19d3eac9de8e3471_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_phishable::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4c,
&&__invld,
&&pc_4e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_63,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_a5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_e6,
&&__invld,
&&pc_e8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_10d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_168,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1c5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [76] */

/* JUMPI */
/* op_0 = Constant((6, 76)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_4c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((8, 2376452955)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_8da5cb5b, v_6_0);


/* PUSH2 */
/* val = [78] */

/* JUMPI */
/* op_0 = Constant((10, 78)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_4e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4194952752] */

/* EQ */
/* op_0 = Constant((1, 4194952752)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_fa09e630, s_0_0);


/* PUSH2 */
/* val = [165] */

/* JUMPI */
/* op_0 = Constant((3, 165)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_a5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4e:
{ /* <============ */ 
on_bb_start(78);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [90] */

/* JUMPI */
/* op_0 = Constant((4, 90)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_5a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_56:
{ /* <============ */ 
on_bb_start(86);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_5a:
{ /* <============ */ 
on_bb_start(90);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [99] */

/* PUSH2 */
/* val = [232] */

/* JUMP */
/* op_0 = Constant((3, 232)) */
/* BB finalizer */
ctxt->s.set(0, c_63);
/* no pops at end */
/* no BB returns */

goto pc_e8;


}pc_63:
{ /* <============ */ 
on_bb_start(99);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_14, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_14, v_6_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(v_2_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((16, 64)) */
const uint256_t v_17_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((17, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_20_0 = sub_v(v_12_0, v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* RETURN */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((20, 0)) */
return_v(v_17_0, v_20_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_a5:
{ /* <============ */ 
on_bb_start(165);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [177] */

/* JUMPI */
/* op_0 = Constant((4, 177)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_b1;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_ad:
{ /* <============ */ 
on_bb_start(173);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b1:
{ /* <============ */ 
on_bb_start(177);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [230] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_14, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [269] */

/* JUMP */
/* op_0 = Constant((25, 269)) */
/* BB finalizer */
ctxt->s.set(0, c_e6);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_10d;


}pc_e6:
{ /* <============ */ 
on_bb_start(230);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_e8:
{ /* <============ */ 
on_bb_start(232);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_14, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_10d:
{ /* <============ */ 
on_bb_start(269);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_14, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_14, v_11_0);


/* ORIGIN */
const uint256_t v_14_0 = origin_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_14, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [360] */

/* JUMPI */
/* op_0 = Constant((20, 360)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_168;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_164:
{ /* <============ */ 
on_bb_start(356);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_168:
{ /* <============ */ 
on_bb_start(360);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = and_v(g_14, s_0_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_5_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_14, v_5_0);


/* BALANCE */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = balance_v(v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_11_0 = iszero_v(v_8_0);


/* MUL */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_12_0 = mul_v(v_11_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((17, 64)) */
const uint256_t v_18_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((15, 0)) */

/* SUB */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_21_0 = sub_v(v_15_0, v_18_0);


/* DUP2 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((8, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((12, 0)) */

/* CALL */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = InstructionRef((8, 0)) */
/* op_3 = InstructionRef((18, 0)) */
/* op_4 = InstructionRef((21, 0)) */
/* op_5 = InstructionRef((18, 0)) */
/* op_6 = Constant((16, 0)) */
const uint256_t v_26_0 = call_v(v_12_0, v_3_0, v_8_0, v_18_0, v_21_0, v_18_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_32_0 = iszero_v(v_26_0);


/* DUP1 */
/* op_0 = InstructionRef((32, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((32, 0)) */
const uint256_t v_34_0 = iszero_v(v_32_0);


/* PUSH2 */
/* val = [453] */

/* JUMPI */
/* op_0 = Constant((35, 453)) */
/* op_1 = InstructionRef((34, 0)) */
if ( v_34_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
 
 goto pc_1c5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
}pc_1bc:
{ /* <============ */ 
on_bb_start(444);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1c5:
{ /* <============ */ 
on_bb_start(453);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_1c9:
{ /* <============ */ 
on_bb_start(457);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1ca:
{ /* <============ */ 
on_bb_start(458);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_8 = ctxt->s.peek(8);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_25, s_0_3);


/* DUP6 */
/* op_0 = StackRef((0, 8)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1ca (inst offset 4; byte 0xc0)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1d5:
{ /* <============ */ 
on_bb_start(469);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1d5 (inst offset 0; byte 0xd6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1d6:
{ /* <============ */ 
on_bb_start(470);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* SGT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::SGT, s_0_0, s_0_1);
const uint256_t v_0_0 = sgt_v(s_0_0, s_0_1);


/* PUSH27 */
/* val = [19735028034438417078324756958582440672450921846891778047344522353] */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(0, g_26);

ctxt->s.set(1, v_0_0);
/* no pops at end */
/* no BB returns */
}pc_1f4:
{ /* <============ */ 
on_bb_start(500);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x1f4 (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x1,0xf5,0x80,0x61,0x0,0x60,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x4c,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x0,0x4e,0x57,0x80,0x63,0xfa,0x9,0xe6,0x30,0x14,0x61,0x0,0xa5,0x57,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x5a,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x63,0x61,0x0,0xe8,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x0,0xb1,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xe6,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xd,0x56,0x5b,0x0,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x32,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x1,0x68,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x1,0xc5,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x85,0xc0,0xd6,0x13,0x7a,0x2f,0xf9,0x23,0x5a,0x4e,0xb7,0x26,0x45,0x66,0x23,0x6d,0x49,0x31,0x7c,0xac,0xad,0xef,0xdb,0x3b,0x19,0xd3,0xea,0xc9,0xde,0x8e,0x34,0x71,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_phishable::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_phishable::constructor_args() {
    return _constructor_args;
}
