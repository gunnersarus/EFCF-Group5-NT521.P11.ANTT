// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/proxy.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x41,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x6f,0xad,0xcf,0x72,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x46,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x5b, /* [65'0x41] JUMPDEST */
0x60, /* [66'0x42] PUSH1 */
0x00,/* constant data */
0x80, /* [68'0x44] DUP1 */
0xfd, /* [69'0x45] REVERT */
0x5b, /* [70'0x46] JUMPDEST */
0x34, /* [71'0x47] CALLVALUE */
0x80, /* [72'0x48] DUP1 */
0x15, /* [73'0x49] ISZERO */
0x61, /* [74'0x4a] PUSH2 */
0x00,0x52,/* constant data */
0x57, /* [77'0x4d] JUMPI */
0x60, /* [78'0x4e] PUSH1 */
0x00,/* constant data */
0x80, /* [80'0x50] DUP1 */
0xfd, /* [81'0x51] REVERT */
0x5b, /* [82'0x52] JUMPDEST */
0x50, /* [83'0x53] POP */
0x61, /* [84'0x54] PUSH2 */
0x00,0xcd,/* constant data */
0x60, /* [87'0x57] PUSH1 */
0x04,/* constant data */
0x80, /* [89'0x59] DUP1 */
0x36, /* [90'0x5a] CALLDATASIZE */
0x03, /* [91'0x5b] SUB */
0x81, /* [92'0x5c] DUP2 */
0x01, /* [93'0x5d] ADD */
0x90, /* [94'0x5e] SWAP1 */
0x80, /* [95'0x5f] DUP1 */
0x80, /* [96'0x60] DUP1 */
0x35, /* [97'0x61] CALLDATALOAD */
0x73, /* [98'0x62] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [119'0x77] AND */
0x90, /* [120'0x78] SWAP1 */
0x60, /* [121'0x79] PUSH1 */
0x20,/* constant data */
0x01, /* [123'0x7b] ADD */
0x90, /* [124'0x7c] SWAP1 */
0x92, /* [125'0x7d] SWAP3 */
0x91, /* [126'0x7e] SWAP2 */
0x90, /* [127'0x7f] SWAP1 */
0x80, /* [128'0x80] DUP1 */
0x35, /* [129'0x81] CALLDATALOAD */
0x90, /* [130'0x82] SWAP1 */
0x60, /* [131'0x83] PUSH1 */
0x20,/* constant data */
0x01, /* [133'0x85] ADD */
0x90, /* [134'0x86] SWAP1 */
0x82, /* [135'0x87] DUP3 */
0x01, /* [136'0x88] ADD */
0x80, /* [137'0x89] DUP1 */
0x35, /* [138'0x8a] CALLDATALOAD */
0x90, /* [139'0x8b] SWAP1 */
0x60, /* [140'0x8c] PUSH1 */
0x20,/* constant data */
0x01, /* [142'0x8e] ADD */
0x90, /* [143'0x8f] SWAP1 */
0x80, /* [144'0x90] DUP1 */
0x80, /* [145'0x91] DUP1 */
0x60, /* [146'0x92] PUSH1 */
0x1f,/* constant data */
0x01, /* [148'0x94] ADD */
0x60, /* [149'0x95] PUSH1 */
0x20,/* constant data */
0x80, /* [151'0x97] DUP1 */
0x91, /* [152'0x98] SWAP2 */
0x04, /* [153'0x99] DIV */
0x02, /* [154'0x9a] MUL */
0x60, /* [155'0x9b] PUSH1 */
0x20,/* constant data */
0x01, /* [157'0x9d] ADD */
0x60, /* [158'0x9e] PUSH1 */
0x40,/* constant data */
0x51, /* [160'0xa0] MLOAD */
0x90, /* [161'0xa1] SWAP1 */
0x81, /* [162'0xa2] DUP2 */
0x01, /* [163'0xa3] ADD */
0x60, /* [164'0xa4] PUSH1 */
0x40,/* constant data */
0x52, /* [166'0xa6] MSTORE */
0x80, /* [167'0xa7] DUP1 */
0x93, /* [168'0xa8] SWAP4 */
0x92, /* [169'0xa9] SWAP3 */
0x91, /* [170'0xaa] SWAP2 */
0x90, /* [171'0xab] SWAP1 */
0x81, /* [172'0xac] DUP2 */
0x81, /* [173'0xad] DUP2 */
0x52, /* [174'0xae] MSTORE */
0x60, /* [175'0xaf] PUSH1 */
0x20,/* constant data */
0x01, /* [177'0xb1] ADD */
0x83, /* [178'0xb2] DUP4 */
0x83, /* [179'0xb3] DUP4 */
0x80, /* [180'0xb4] DUP1 */
0x82, /* [181'0xb5] DUP3 */
0x84, /* [182'0xb6] DUP5 */
0x37, /* [183'0xb7] CALLDATACOPY */
0x82, /* [184'0xb8] DUP3 */
0x01, /* [185'0xb9] ADD */
0x91, /* [186'0xba] SWAP2 */
0x50, /* [187'0xbb] POP */
0x50, /* [188'0xbc] POP */
0x50, /* [189'0xbd] POP */
0x50, /* [190'0xbe] POP */
0x50, /* [191'0xbf] POP */
0x50, /* [192'0xc0] POP */
0x91, /* [193'0xc1] SWAP2 */
0x92, /* [194'0xc2] SWAP3 */
0x91, /* [195'0xc3] SWAP2 */
0x92, /* [196'0xc4] SWAP3 */
0x90, /* [197'0xc5] SWAP1 */
0x50, /* [198'0xc6] POP */
0x50, /* [199'0xc7] POP */
0x50, /* [200'0xc8] POP */
0x61, /* [201'0xc9] PUSH2 */
0x00,0xcf,/* constant data */
0x56, /* [204'0xcc] JUMP */
0x5b, /* [205'0xcd] JUMPDEST */
0x00, /* [206'0xce] STOP */
0x5b, /* [207'0xcf] JUMPDEST */
0x81, /* [208'0xd0] DUP2 */
0x73, /* [209'0xd1] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [230'0xe6] AND */
0x81, /* [231'0xe7] DUP2 */
0x60, /* [232'0xe8] PUSH1 */
0x40,/* constant data */
0x51, /* [234'0xea] MLOAD */
0x80, /* [235'0xeb] DUP1 */
0x82, /* [236'0xec] DUP3 */
0x80, /* [237'0xed] DUP1 */
0x51, /* [238'0xee] MLOAD */
0x90, /* [239'0xef] SWAP1 */
0x60, /* [240'0xf0] PUSH1 */
0x20,/* constant data */
0x01, /* [242'0xf2] ADD */
0x90, /* [243'0xf3] SWAP1 */
0x80, /* [244'0xf4] DUP1 */
0x83, /* [245'0xf5] DUP4 */
0x83, /* [246'0xf6] DUP4 */
0x60, /* [247'0xf7] PUSH1 */
0x00,/* constant data */
0x5b, /* [249'0xf9] JUMPDEST */
0x83, /* [250'0xfa] DUP4 */
0x81, /* [251'0xfb] DUP2 */
0x10, /* [252'0xfc] LT */
0x15, /* [253'0xfd] ISZERO */
0x61, /* [254'0xfe] PUSH2 */
0x01,0x14,/* constant data */
0x57, /* [257'0x101] JUMPI */
0x80, /* [258'0x102] DUP1 */
0x82, /* [259'0x103] DUP3 */
0x01, /* [260'0x104] ADD */
0x51, /* [261'0x105] MLOAD */
0x81, /* [262'0x106] DUP2 */
0x84, /* [263'0x107] DUP5 */
0x01, /* [264'0x108] ADD */
0x52, /* [265'0x109] MSTORE */
0x60, /* [266'0x10a] PUSH1 */
0x20,/* constant data */
0x81, /* [268'0x10c] DUP2 */
0x01, /* [269'0x10d] ADD */
0x90, /* [270'0x10e] SWAP1 */
0x50, /* [271'0x10f] POP */
0x61, /* [272'0x110] PUSH2 */
0x00,0xf9,/* constant data */
0x56, /* [275'0x113] JUMP */
0x5b, /* [276'0x114] JUMPDEST */
0x50, /* [277'0x115] POP */
0x50, /* [278'0x116] POP */
0x50, /* [279'0x117] POP */
0x50, /* [280'0x118] POP */
0x90, /* [281'0x119] SWAP1 */
0x50, /* [282'0x11a] POP */
0x90, /* [283'0x11b] SWAP1 */
0x81, /* [284'0x11c] DUP2 */
0x01, /* [285'0x11d] ADD */
0x90, /* [286'0x11e] SWAP1 */
0x60, /* [287'0x11f] PUSH1 */
0x1f,/* constant data */
0x16, /* [289'0x121] AND */
0x80, /* [290'0x122] DUP1 */
0x15, /* [291'0x123] ISZERO */
0x61, /* [292'0x124] PUSH2 */
0x01,0x41,/* constant data */
0x57, /* [295'0x127] JUMPI */
0x80, /* [296'0x128] DUP1 */
0x82, /* [297'0x129] DUP3 */
0x03, /* [298'0x12a] SUB */
0x80, /* [299'0x12b] DUP1 */
0x51, /* [300'0x12c] MLOAD */
0x60, /* [301'0x12d] PUSH1 */
0x01,/* constant data */
0x83, /* [303'0x12f] DUP4 */
0x60, /* [304'0x130] PUSH1 */
0x20,/* constant data */
0x03, /* [306'0x132] SUB */
0x61, /* [307'0x133] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [310'0x136] EXP */
0x03, /* [311'0x137] SUB */
0x19, /* [312'0x138] NOT */
0x16, /* [313'0x139] AND */
0x81, /* [314'0x13a] DUP2 */
0x52, /* [315'0x13b] MSTORE */
0x60, /* [316'0x13c] PUSH1 */
0x20,/* constant data */
0x01, /* [318'0x13e] ADD */
0x91, /* [319'0x13f] SWAP2 */
0x50, /* [320'0x140] POP */
0x5b, /* [321'0x141] JUMPDEST */
0x50, /* [322'0x142] POP */
0x91, /* [323'0x143] SWAP2 */
0x50, /* [324'0x144] POP */
0x50, /* [325'0x145] POP */
0x60, /* [326'0x146] PUSH1 */
0x00,/* constant data */
0x60, /* [328'0x148] PUSH1 */
0x40,/* constant data */
0x51, /* [330'0x14a] MLOAD */
0x80, /* [331'0x14b] DUP1 */
0x83, /* [332'0x14c] DUP4 */
0x03, /* [333'0x14d] SUB */
0x81, /* [334'0x14e] DUP2 */
0x85, /* [335'0x14f] DUP6 */
0x5a, /* [336'0x150] GAS */
0xf4, /* [337'0x151] DELEGATECALL */
0x91, /* [338'0x152] SWAP2 */
0x50, /* [339'0x153] POP */
0x50, /* [340'0x154] POP */
0x15, /* [341'0x155] ISZERO */
0x15, /* [342'0x156] ISZERO */
0x61, /* [343'0x157] PUSH2 */
0x01,0x5f,/* constant data */
0x57, /* [346'0x15a] JUMPI */
0x60, /* [347'0x15b] PUSH1 */
0x00,/* constant data */
0x80, /* [349'0x15d] DUP1 */
0xfd, /* [350'0x15e] REVERT */
0x5b, /* [351'0x15f] JUMPDEST */
0x50, /* [352'0x160] POP */
0x50, /* [353'0x161] POP */
0x56, /* [354'0x162] JUMP */
0x00, /* [355'0x163] STOP */
0xa1, /* [356'0x164] LOG1 */
0x65, /* [357'0x165] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [364'0x16c] SHA3 */
0x02, /* [365'0x16d] MUL */
0xd1, /* [366'0x16e] INVALID' byte */
0x89, /* [367'0x16f] DUP10 */
0x44, /* [368'0x170] DIFFICULTY */
0x01, /* [369'0x171] ADD */
0x85, /* [370'0x172] DUP6 */
0x20, /* [371'0x173] SHA3 */
0x24, /* [372'0x174] INVALID' byte */
0xd8, /* [373'0x175] INVALID' byte */
0x39, /* [374'0x176] CODECOPY */
0x46, /* [375'0x177] CHAINID */
0x29, /* [376'0x178] INVALID' byte */
0x26, /* [377'0x179] INVALID' byte */
0x11, /* [378'0x17a] GT */
0x99, /* [379'0x17b] SWAP10 */
0x68, /* [380'0x17c] PUSH9 */
0x29,0x4e,0x65,0xb4,0x2b,0x9c,0xfc,0x28,0x50,/* constant data */
0x21, /* [390'0x186] INVALID' byte */
0x13, /* [391'0x187] SGT */
0xa3, /* [392'0x188] LOG3 */
0x3b, /* [393'0x189] EXTCODESIZE */
0x3d, /* [394'0x18a] RETURNDATASIZE */
0xea, /* [395'0x18b] INVALID' byte */
0xa0, /* [396'0x18c] LOG0 */
0x00, /* [397'0x18d] STOP */
0x29, /* [398'0x18e] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_proxy::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_proxy::_contract_name = "proxy";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_proxy> eevm::EVM2CPP_proxy::reg{};
const std::string& eevm::EVM2CPP_proxy::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_1f = 0x1f_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_41 = 0x41_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_46 = 0x46_u256;
constexpr uint256_t c_52 = 0x52_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_cd = 0xcd_u256;
constexpr uint256_t c_cf = 0xcf_u256;
constexpr uint256_t c_f9 = 0xf9_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_114 = 0x114_u256;
constexpr uint256_t c_141 = 0x141_u256;
constexpr uint256_t c_15f = 0x15f_u256;
constexpr uint256_t c_6fadcf72 = 0x6fadcf72_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_23 = 0x627a7a723058_u256;
constexpr uint256_t g_11 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_proxy::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_41,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_46,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_52,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_cd,
&&__invld,
&&pc_cf,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_114,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_141,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_15f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [65] */

/* JUMPI */
/* op_0 = Constant((6, 65)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_41;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [1873661810] */

/* EQ */
/* op_0 = Constant((8, 1873661810)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_6fadcf72, v_6_0);


/* PUSH2 */
/* val = [70] */

/* JUMPI */
/* op_0 = Constant((10, 70)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_46;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_46:
{ /* <============ */ 
on_bb_start(70);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [82] */

/* JUMPI */
/* op_0 = Constant((4, 82)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_52;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_4e:
{ /* <============ */ 
on_bb_start(78);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_52:
{ /* <============ */ 
on_bb_start(82);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [205] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_11, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* DUP1 */
/* op_0 = Constant((17, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((17, 36)) */
const uint256_t v_23_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((17, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((25, 32)) */
/* op_1 = Constant((17, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((26, 68)) */
/* op_1 = InstructionRef((23, 0)) */

/* DUP3 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((23, 0)) */
const uint256_t v_29_0 = add_v(c_4, v_23_0);


/* DUP1 */
/* op_0 = InstructionRef((29, 0)) */

/* CALLDATALOAD */
/* op_0 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = calldataload_v(v_29_0);


/* SWAP1 */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = InstructionRef((29, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((33, 32)) */
/* op_1 = InstructionRef((29, 0)) */
const uint256_t v_34_0 = add_v(c_20, v_29_0);


/* SWAP1 */
/* op_0 = InstructionRef((34, 0)) */
/* op_1 = InstructionRef((31, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((31, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((31, 0)) */

/* PUSH1 */
/* val = [31] */

/* ADD */
/* op_0 = Constant((38, 31)) */
/* op_1 = InstructionRef((31, 0)) */
const uint256_t v_39_0 = add_v(c_1f, v_31_0);


/* PUSH1 */
/* val = [32] */

/* DUP1 */
/* op_0 = Constant((40, 32)) */
/* val = [32] */

/* SWAP2 */
/* op_0 = Constant((40, 32)) */
/* op_1 = InstructionRef((39, 0)) */

/* DIV */
/* op_0 = InstructionRef((39, 0)) */
/* op_1 = Constant((40, 32)) */
const uint256_t v_43_0 = div_v(v_39_0, c_20);


/* MUL */
/* op_0 = InstructionRef((43, 0)) */
/* op_1 = Constant((40, 32)) */
const uint256_t v_44_0 = mul_v(v_43_0, c_20);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((45, 32)) */
/* op_1 = InstructionRef((44, 0)) */
const uint256_t v_46_0 = add_v(c_20, v_44_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((47, 64)) */
const uint256_t v_48_0 = mload_v(c_40);


/* SWAP1 */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((46, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((48, 0)) */

/* ADD */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((46, 0)) */
const uint256_t v_51_0 = add_v(v_48_0, v_46_0);


/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((52, 64)) */
/* op_1 = InstructionRef((51, 0)) */
mstore_v(c_40, v_51_0);


/* DUP1 */
/* op_0 = InstructionRef((48, 0)) */

/* SWAP4 */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((34, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((34, 0)) */
/* op_1 = InstructionRef((31, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = InstructionRef((31, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = InstructionRef((48, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((31, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((48, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = InstructionRef((31, 0)) */
mstore_v(v_48_0, v_31_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((62, 32)) */
/* op_1 = InstructionRef((48, 0)) */
const uint256_t v_63_0 = add_v(c_20, v_48_0);


/* DUP4 */
/* op_0 = InstructionRef((34, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((31, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((31, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((34, 0)) */

/* DUP5 */
/* op_0 = InstructionRef((63, 0)) */

/* CALLDATACOPY */
/* op_0 = InstructionRef((63, 0)) */
/* op_1 = InstructionRef((34, 0)) */
/* op_2 = InstructionRef((31, 0)) */
calldatacopy_v(v_63_0, v_34_0, v_31_0);


/* DUP3 */
/* op_0 = InstructionRef((63, 0)) */

/* ADD */
/* op_0 = InstructionRef((63, 0)) */
/* op_1 = InstructionRef((31, 0)) */
const uint256_t v_71_0 = add_v(v_63_0, v_31_0);


/* SWAP2 */
/* op_0 = InstructionRef((71, 0)) */
/* op_1 = InstructionRef((63, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* SWAP2 */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP3 */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((48, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((48, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((26, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [207] */

/* JUMP */
/* op_0 = Constant((87, 207)) */
/* BB finalizer */
ctxt->s.set(0, c_cd);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);
/* BB return 1 InstructionRef((48, 0))*/
ctxt->s.push(v_48_0);

goto pc_cf;


}pc_cd:
{ /* <============ */ 
on_bb_start(205);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_cf:
{ /* <============ */ 
on_bb_start(207);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_3_0 = and_v(g_11, s_0_1);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((5, 64)) */
const uint256_t v_6_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* MLOAD */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_10_0 = mload_v(s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((12, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_13_0 = add_v(c_20, s_0_0);


/* SWAP1 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((10, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((10, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((13, 0)) */

/* PUSH1 */
/* val = [0] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((3, 0))*/
ctxt->s.push(v_3_0);
/* BB return 1 StackRef((0, 0))*/
ctxt->s.push(s_0_0);
/* BB return 2 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 3 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 4 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 5 InstructionRef((10, 0))*/
ctxt->s.push(v_10_0);
/* BB return 6 InstructionRef((10, 0))*/
ctxt->s.push(v_10_0);
/* BB return 7 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
/* BB return 8 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 9 Constant((18, 0))*/
ctxt->s.push(c_0);
}pc_f9:
{ /* <============ */ 
on_bb_start(249);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* JUMPDEST */

/* DUP4 */
/* op_0 = StackRef((0, 3)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 3)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, s_0_3);
const uint256_t v_3_0 = lt_v(s_0_0, s_0_3);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* PUSH2 */
/* val = [276] */

/* JUMPI */
/* op_0 = Constant((5, 276)) */
/* op_1 = InstructionRef((4, 0)) */
if ( v_4_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_114;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_102:
{ /* <============ */ 
on_bb_start(258);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* ADD */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = add_v(s_0_1, s_0_0);


/* MLOAD */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = mload_v(v_2_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* DUP5 */
/* op_0 = StackRef((0, 2)) */

/* ADD */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = add_v(s_0_2, s_0_0);


/* MSTORE */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = InstructionRef((3, 0)) */
mstore_v(v_6_0, v_3_0);


/* PUSH1 */
/* val = [32] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ADD */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((8, 32)) */
const uint256_t v_10_0 = add_v(s_0_0, c_20);


/* SWAP1 */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* PUSH2 */
/* val = [249] */

/* JUMP */
/* op_0 = Constant((13, 249)) */
/* BB finalizer */
ctxt->s.set(0, v_10_0);
/* no pops at end */
/* no BB returns */

goto pc_f9;


}pc_114:
{ /* <============ */ 
on_bb_start(276);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 5)) */

/* POP */

/* SWAP1 */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 6)) */

/* DUP2 */
/* op_0 = StackRef((0, 4)) */

/* ADD */
/* op_0 = StackRef((0, 4)) */
/* op_1 = StackRef((0, 6)) */
const uint256_t v_9_0 = add_v(s_0_4, s_0_6);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 4)) */

/* PUSH1 */
/* val = [31] */

/* AND */
/* op_0 = Constant((11, 31)) */
/* op_1 = StackRef((0, 4)) */
const uint256_t v_12_0 = and_v(c_1f, s_0_4);


/* DUP1 */
/* op_0 = InstructionRef((12, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = iszero_v(v_12_0);


/* PUSH2 */
/* val = [321] */

/* JUMPI */
/* op_0 = Constant((15, 321)) */
/* op_1 = InstructionRef((14, 0)) */
if ( v_14_0 ) { 
 /* BB finalizer */
ctxt->s.set(5, v_12_0);

ctxt->s.set(6, v_9_0);
ctxt->s.pop_drop_n(5);
/* no BB returns */
 
 goto pc_141;
 
 }

/* BB finalizer */
ctxt->s.set(5, v_12_0);

ctxt->s.set(6, v_9_0);
ctxt->s.pop_drop_n(5);
/* no BB returns */
}pc_128:
{ /* <============ */ 
on_bb_start(296);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* SUB */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = sub_v(s_0_1, s_0_0);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* MLOAD */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_4_0 = mload_v(v_2_0);


/* PUSH1 */
/* val = [1] */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [32] */

/* SUB */
/* op_0 = Constant((7, 32)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_8_0 = sub_v(c_20, s_0_0);


/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((9, 256)) */
/* op_1 = InstructionRef((8, 0)) */
const uint256_t v_10_0 = exp_v(c_100, v_8_0);


/* SUB */
/* op_0 = InstructionRef((10, 0)) */
/* op_1 = Constant((5, 1)) */
const uint256_t v_11_0 = sub_v(v_10_0, c_1);


/* NOT */
/* op_0 = InstructionRef((11, 0)) */
const uint256_t v_12_0 = not_v(v_11_0);


/* AND */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_13_0 = and_v(v_12_0, v_4_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((13, 0)) */
mstore_v(v_2_0, v_13_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_17_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* BB finalizer */
ctxt->s.set(1, v_17_0);
/* no pops at end */
/* no BB returns */
}pc_141:
{ /* <============ */ 
on_bb_start(321);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* JUMPDEST */

/* POP */

/* SWAP2 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = StackRef((0, 3)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((6, 64)) */
const uint256_t v_7_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((7, 0)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* SUB */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_10_0 = sub_v(s_0_1, v_7_0);


/* DUP2 */
/* op_0 = InstructionRef((7, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 4)) */

/* GAS */
const uint256_t v_13_0 = gas_v();


/* DELEGATECALL */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = StackRef((0, 4)) */
/* op_2 = InstructionRef((7, 0)) */
/* op_3 = InstructionRef((10, 0)) */
/* op_4 = InstructionRef((7, 0)) */
/* op_5 = Constant((5, 0)) */
const uint256_t v_14_0 = delegatecall_v(v_13_0, s_0_4, v_7_0, v_10_0, v_7_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP2 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((14, 0)) */
const uint256_t v_18_0 = iszero_v(v_14_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [351] */

/* JUMPI */
/* op_0 = Constant((20, 351)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
 
 goto pc_15f;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
}pc_15b:
{ /* <============ */ 
on_bb_start(347);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_15f:
{ /* <============ */ 
on_bb_start(351);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_163:
{ /* <============ */ 
on_bb_start(355);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_164:
{ /* <============ */ 
on_bb_start(356);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_23, s_0_3);


/* MUL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 4)) */
const uint256_t v_3_0 = mul_v(v_2_0, s_0_4);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x164 (inst offset 4; byte 0xd1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_16f:
{ /* <============ */ 
on_bb_start(367);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_9 = ctxt->s.peek(9);
/* DUP10 */
/* op_0 = StackRef((0, 9)) */

/* DIFFICULTY */
const uint256_t v_1_0 = difficulty_v();


/* ADD */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 9)) */
const uint256_t v_2_0 = add_v(v_1_0, s_0_9);


/* DUP6 */
/* op_0 = StackRef((0, 4)) */

/* SHA3 */
/* op_0 = StackRef((0, 4)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_4_0 = sha3_v(s_0_4, v_2_0);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x16f (inst offset 5; byte 0x24)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_175:
{ /* <============ */ 
on_bb_start(373);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x175 (inst offset 0; byte 0xd8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_176:
{ /* <============ */ 
on_bb_start(374);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* CODECOPY */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
codecopy_v(s_0_0, s_0_1, s_0_2);


/* CHAINID */
const uint256_t v_1_0 = chainid_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x176 (inst offset 2; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_179:
{ /* <============ */ 
on_bb_start(377);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x179 (inst offset 0; byte 0x26)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_17a:
{ /* <============ */ 
on_bb_start(378);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_11 = ctxt->s.peek(11);
/* GT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::GT, s_0_0, s_0_1);
const uint256_t v_0_0 = gt_v(s_0_0, s_0_1);


/* SWAP10 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 11)) */

/* PUSH9 */
/* val = [761965626429108136016] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x17a (inst offset 3; byte 0x21)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_187:
{ /* <============ */ 
on_bb_start(391);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* SGT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
TRACE_COMP(eevm::Opcode::SGT, s_0_0, s_0_1);
const uint256_t v_0_0 = sgt_v(s_0_0, s_0_1);


/* LOG3 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 2)) */
/* op_2 = StackRef((0, 3)) */
/* op_3 = StackRef((0, 4)) */
/* op_4 = StackRef((0, 5)) */
log3_v(v_0_0, s_0_2, s_0_3, s_0_4, s_0_5);


/* EXTCODESIZE */
/* op_0 = StackRef((0, 6)) */
const uint256_t v_2_0 = extcodesize_v(s_0_6);


/* RETURNDATASIZE */
const uint256_t v_3_0 = returndatasize_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x187 (inst offset 4; byte 0xea)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_18c:
{ /* <============ */ 
on_bb_start(396);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* LOG0 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
log0_v(s_0_0, s_0_1);


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_18e:
{ /* <============ */ 
on_bb_start(398);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x18e (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x1,0x8f,0x80,0x61,0x0,0x60,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x41,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x6f,0xad,0xcf,0x72,0x14,0x61,0x0,0x46,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x52,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xcd,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x82,0x1,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x80,0x80,0x60,0x1f,0x1,0x60,0x20,0x80,0x91,0x4,0x2,0x60,0x20,0x1,0x60,0x40,0x51,0x90,0x81,0x1,0x60,0x40,0x52,0x80,0x93,0x92,0x91,0x90,0x81,0x81,0x52,0x60,0x20,0x1,0x83,0x83,0x80,0x82,0x84,0x37,0x82,0x1,0x91,0x50,0x50,0x50,0x50,0x50,0x50,0x91,0x92,0x91,0x92,0x90,0x50,0x50,0x50,0x61,0x0,0xcf,0x56,0x5b,0x0,0x5b,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x60,0x40,0x51,0x80,0x82,0x80,0x51,0x90,0x60,0x20,0x1,0x90,0x80,0x83,0x83,0x60,0x0,0x5b,0x83,0x81,0x10,0x15,0x61,0x1,0x14,0x57,0x80,0x82,0x1,0x51,0x81,0x84,0x1,0x52,0x60,0x20,0x81,0x1,0x90,0x50,0x61,0x0,0xf9,0x56,0x5b,0x50,0x50,0x50,0x50,0x90,0x50,0x90,0x81,0x1,0x90,0x60,0x1f,0x16,0x80,0x15,0x61,0x1,0x41,0x57,0x80,0x82,0x3,0x80,0x51,0x60,0x1,0x83,0x60,0x20,0x3,0x61,0x1,0x0,0xa,0x3,0x19,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x5b,0x50,0x91,0x50,0x50,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x5a,0xf4,0x91,0x50,0x50,0x15,0x15,0x61,0x1,0x5f,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x2,0xd1,0x89,0x44,0x1,0x85,0x20,0x24,0xd8,0x39,0x46,0x29,0x26,0x11,0x99,0x68,0x29,0x4e,0x65,0xb4,0x2b,0x9c,0xfc,0x28,0x50,0x21,0x13,0xa3,0x3b,0x3d,0xea,0xa0,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_proxy::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_proxy::constructor_args() {
    return _constructor_args;
}
