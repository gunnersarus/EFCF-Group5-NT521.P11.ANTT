// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/unprotected0.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x60, /* [9'0x9] PUSH1 */
0x3f,/* constant data */
0x57, /* [11'0xb] JUMPI */
0x60, /* [12'0xc] PUSH1 */
0x00,/* constant data */
0x35, /* [14'0xe] CALLDATALOAD */
0x7c, /* [15'0xf] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [45'0x2d] SWAP1 */
0x04, /* [46'0x2e] DIV */
0x63, /* [47'0x2f] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [52'0x34] AND */
0x80, /* [53'0x35] DUP1 */
0x63, /* [54'0x36] PUSH4 */
0xa6,0xf9,0xda,0xe1,/* constant data */
0x14, /* [59'0x3b] EQ */
0x60, /* [60'0x3c] PUSH1 */
0x44,/* constant data */
0x57, /* [62'0x3e] JUMPI */
0x5b, /* [63'0x3f] JUMPDEST */
0x60, /* [64'0x40] PUSH1 */
0x00,/* constant data */
0x80, /* [66'0x42] DUP1 */
0xfd, /* [67'0x43] REVERT */
0x5b, /* [68'0x44] JUMPDEST */
0x34, /* [69'0x45] CALLVALUE */
0x80, /* [70'0x46] DUP1 */
0x15, /* [71'0x47] ISZERO */
0x60, /* [72'0x48] PUSH1 */
0x4f,/* constant data */
0x57, /* [74'0x4a] JUMPI */
0x60, /* [75'0x4b] PUSH1 */
0x00,/* constant data */
0x80, /* [77'0x4d] DUP1 */
0xfd, /* [78'0x4e] REVERT */
0x5b, /* [79'0x4f] JUMPDEST */
0x50, /* [80'0x50] POP */
0x60, /* [81'0x51] PUSH1 */
0x82,/* constant data */
0x60, /* [83'0x53] PUSH1 */
0x04,/* constant data */
0x80, /* [85'0x55] DUP1 */
0x36, /* [86'0x56] CALLDATASIZE */
0x03, /* [87'0x57] SUB */
0x81, /* [88'0x58] DUP2 */
0x01, /* [89'0x59] ADD */
0x90, /* [90'0x5a] SWAP1 */
0x80, /* [91'0x5b] DUP1 */
0x80, /* [92'0x5c] DUP1 */
0x35, /* [93'0x5d] CALLDATALOAD */
0x73, /* [94'0x5e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [115'0x73] AND */
0x90, /* [116'0x74] SWAP1 */
0x60, /* [117'0x75] PUSH1 */
0x20,/* constant data */
0x01, /* [119'0x77] ADD */
0x90, /* [120'0x78] SWAP1 */
0x92, /* [121'0x79] SWAP3 */
0x91, /* [122'0x7a] SWAP2 */
0x90, /* [123'0x7b] SWAP1 */
0x50, /* [124'0x7c] POP */
0x50, /* [125'0x7d] POP */
0x50, /* [126'0x7e] POP */
0x60, /* [127'0x7f] PUSH1 */
0x84,/* constant data */
0x56, /* [129'0x81] JUMP */
0x5b, /* [130'0x82] JUMPDEST */
0x00, /* [131'0x83] STOP */
0x5b, /* [132'0x84] JUMPDEST */
0x80, /* [133'0x85] DUP1 */
0x60, /* [134'0x86] PUSH1 */
0x00,/* constant data */
0x80, /* [136'0x88] DUP1 */
0x61, /* [137'0x89] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [140'0x8c] EXP */
0x81, /* [141'0x8d] DUP2 */
0x54, /* [142'0x8e] SLOAD */
0x81, /* [143'0x8f] DUP2 */
0x73, /* [144'0x90] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [165'0xa5] MUL */
0x19, /* [166'0xa6] NOT */
0x16, /* [167'0xa7] AND */
0x90, /* [168'0xa8] SWAP1 */
0x83, /* [169'0xa9] DUP4 */
0x73, /* [170'0xaa] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [191'0xbf] AND */
0x02, /* [192'0xc0] MUL */
0x17, /* [193'0xc1] OR */
0x90, /* [194'0xc2] SWAP1 */
0x55, /* [195'0xc3] SSTORE */
0x50, /* [196'0xc4] POP */
0x50, /* [197'0xc5] POP */
0x56, /* [198'0xc6] JUMP */
0x00, /* [199'0xc7] STOP */
0xa1, /* [200'0xc8] LOG1 */
0x65, /* [201'0xc9] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [208'0xd0] SHA3 */
0x58, /* [209'0xd1] PC */
0x00, /* [210'0xd2] STOP */
0xa6, /* [211'0xd3] INVALID' byte */
0x65, /* [212'0xd4] PUSH6 */
0x6f,0xfd,0x98,0x22,0x8b,0x3a,/* constant data */
0x7f, /* [219'0xdb] PUSH32 */
0x25,0x43,0xa1,0xee,0xaa,0xc5,0x78,0xa7,0xc5,0x18,0xa0,0x41,0x4e,0x29,0x2a,0x06,0x29,0x99,0x1e,0xf6,0x34,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_unprotected0::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_unprotected0::_contract_name = "unprotected0";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_unprotected0> eevm::EVM2CPP_unprotected0::reg{};
const std::string& eevm::EVM2CPP_unprotected0::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_3f = 0x3f_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_4f = 0x4f_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_82 = 0x82_u256;
constexpr uint256_t c_84 = 0x84_u256;
constexpr uint256_t c_d1 = 0xd1_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_a6f9dae1 = 0xa6f9dae1_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_19 = 0x627a7a723058_u256;
constexpr uint256_t g_20 = 0x6ffd98228b3a_u256;
constexpr uint256_t g_11 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_21 = 0x2543a1eeaac578a7c518a0414e292a0629991ef6340029_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_17 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_unprotected0::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_44,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_4f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_82,
&&__invld,
&&pc_84,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH1 */
/* val = [63] */

/* JUMPI */
/* op_0 = Constant((6, 63)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_3f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c:
{ /* <============ */ 
on_bb_start(12);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [2801392353] */

/* EQ */
/* op_0 = Constant((8, 2801392353)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_a6f9dae1, v_6_0);


/* PUSH1 */
/* val = [68] */

/* JUMPI */
/* op_0 = Constant((10, 68)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_44;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_3f:
{ /* <============ */ 
on_bb_start(63);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_44:
{ /* <============ */ 
on_bb_start(68);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH1 */
/* val = [79] */

/* JUMPI */
/* op_0 = Constant((4, 79)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_4f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_4b:
{ /* <============ */ 
on_bb_start(75);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4f:
{ /* <============ */ 
on_bb_start(79);
/* JUMPDEST */

/* POP */

/* PUSH1 */
/* val = [130] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_11, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [132] */

/* JUMP */
/* op_0 = Constant((25, 132)) */
/* BB finalizer */
ctxt->s.set(0, c_82);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_84;


}pc_82:
{ /* <============ */ 
on_bb_start(130);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_84:
{ /* <============ */ 
on_bb_start(132);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((2, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_17, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_16_0 = and_v(g_11, s_0_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 0)) */

/* SSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_0, v_18_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_c7:
{ /* <============ */ 
on_bb_start(199);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c8:
{ /* <============ */ 
on_bb_start(200);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_19, s_0_3);


/* PC */
/* val = [209] */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(2, c_d1);

ctxt->s.set(3, v_2_0);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}pc_d3:
{ /* <============ */ 
on_bb_start(211);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0xd3 (inst offset 0; byte 0xa6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d4:
{ /* <============ */ 
on_bb_start(212);
/* PUSH6 */
/* val = [123134969809722] */

/* PUSH32 */
/* val = [3569200278647610224217595130308040515153069654444081193] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((0, 123134969809722))*/
ctxt->s.push(g_20);
/* BB return 1 Constant((1, 3569200278647610224217595130308040515153069654444081193))*/
ctxt->s.push(g_21);
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x60,0xf3,0x80,0x61,0x0,0x5f,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x60,0x3f,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0xa6,0xf9,0xda,0xe1,0x14,0x60,0x44,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x60,0x4f,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x60,0x82,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x60,0x84,0x56,0x5b,0x0,0x5b,0x80,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x58,0x0,0xa6,0x65,0x6f,0xfd,0x98,0x22,0x8b,0x3a,0x7f,0x25,0x43,0xa1,0xee,0xaa,0xc5,0x78,0xa7,0xc5,0x18,0xa0,0x41,0x4e,0x29,0x2a,0x6,0x29,0x99,0x1e,0xf6,0x34,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_unprotected0::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_unprotected0::constructor_args() {
    return _constructor_args;
}
