// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/wallet_03_wrong_constructor.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x62,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x2e,0x1a,0x7d,0x4d,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x67,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x3e,0x32,0x60,0x48,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x94,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x4d,0xda,0xf8,0xf2,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xab,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0xd0,0xe3,0x0d,0xb0,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x00,0xee,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x5b, /* [98'0x62] JUMPDEST */
0x60, /* [99'0x63] PUSH1 */
0x00,/* constant data */
0x80, /* [101'0x65] DUP1 */
0xfd, /* [102'0x66] REVERT */
0x5b, /* [103'0x67] JUMPDEST */
0x34, /* [104'0x68] CALLVALUE */
0x80, /* [105'0x69] DUP1 */
0x15, /* [106'0x6a] ISZERO */
0x61, /* [107'0x6b] PUSH2 */
0x00,0x73,/* constant data */
0x57, /* [110'0x6e] JUMPI */
0x60, /* [111'0x6f] PUSH1 */
0x00,/* constant data */
0x80, /* [113'0x71] DUP1 */
0xfd, /* [114'0x72] REVERT */
0x5b, /* [115'0x73] JUMPDEST */
0x50, /* [116'0x74] POP */
0x61, /* [117'0x75] PUSH2 */
0x00,0x92,/* constant data */
0x60, /* [120'0x78] PUSH1 */
0x04,/* constant data */
0x80, /* [122'0x7a] DUP1 */
0x36, /* [123'0x7b] CALLDATASIZE */
0x03, /* [124'0x7c] SUB */
0x81, /* [125'0x7d] DUP2 */
0x01, /* [126'0x7e] ADD */
0x90, /* [127'0x7f] SWAP1 */
0x80, /* [128'0x80] DUP1 */
0x80, /* [129'0x81] DUP1 */
0x35, /* [130'0x82] CALLDATALOAD */
0x90, /* [131'0x83] SWAP1 */
0x60, /* [132'0x84] PUSH1 */
0x20,/* constant data */
0x01, /* [134'0x86] ADD */
0x90, /* [135'0x87] SWAP1 */
0x92, /* [136'0x88] SWAP3 */
0x91, /* [137'0x89] SWAP2 */
0x90, /* [138'0x8a] SWAP1 */
0x50, /* [139'0x8b] POP */
0x50, /* [140'0x8c] POP */
0x50, /* [141'0x8d] POP */
0x61, /* [142'0x8e] PUSH2 */
0x00,0xf8,/* constant data */
0x56, /* [145'0x91] JUMP */
0x5b, /* [146'0x92] JUMPDEST */
0x00, /* [147'0x93] STOP */
0x5b, /* [148'0x94] JUMPDEST */
0x34, /* [149'0x95] CALLVALUE */
0x80, /* [150'0x96] DUP1 */
0x15, /* [151'0x97] ISZERO */
0x61, /* [152'0x98] PUSH2 */
0x00,0xa0,/* constant data */
0x57, /* [155'0x9b] JUMPI */
0x60, /* [156'0x9c] PUSH1 */
0x00,/* constant data */
0x80, /* [158'0x9e] DUP1 */
0xfd, /* [159'0x9f] REVERT */
0x5b, /* [160'0xa0] JUMPDEST */
0x50, /* [161'0xa1] POP */
0x61, /* [162'0xa2] PUSH2 */
0x00,0xa9,/* constant data */
0x61, /* [165'0xa5] PUSH2 */
0x01,0xdd,/* constant data */
0x56, /* [168'0xa8] JUMP */
0x5b, /* [169'0xa9] JUMPDEST */
0x00, /* [170'0xaa] STOP */
0x5b, /* [171'0xab] JUMPDEST */
0x34, /* [172'0xac] CALLVALUE */
0x80, /* [173'0xad] DUP1 */
0x15, /* [174'0xae] ISZERO */
0x61, /* [175'0xaf] PUSH2 */
0x00,0xb7,/* constant data */
0x57, /* [178'0xb2] JUMPI */
0x60, /* [179'0xb3] PUSH1 */
0x00,/* constant data */
0x80, /* [181'0xb5] DUP1 */
0xfd, /* [182'0xb6] REVERT */
0x5b, /* [183'0xb7] JUMPDEST */
0x50, /* [184'0xb8] POP */
0x61, /* [185'0xb9] PUSH2 */
0x00,0xec,/* constant data */
0x60, /* [188'0xbc] PUSH1 */
0x04,/* constant data */
0x80, /* [190'0xbe] DUP1 */
0x36, /* [191'0xbf] CALLDATASIZE */
0x03, /* [192'0xc0] SUB */
0x81, /* [193'0xc1] DUP2 */
0x01, /* [194'0xc2] ADD */
0x90, /* [195'0xc3] SWAP1 */
0x80, /* [196'0xc4] DUP1 */
0x80, /* [197'0xc5] DUP1 */
0x35, /* [198'0xc6] CALLDATALOAD */
0x73, /* [199'0xc7] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [220'0xdc] AND */
0x90, /* [221'0xdd] SWAP1 */
0x60, /* [222'0xde] PUSH1 */
0x20,/* constant data */
0x01, /* [224'0xe0] ADD */
0x90, /* [225'0xe1] SWAP1 */
0x92, /* [226'0xe2] SWAP3 */
0x91, /* [227'0xe3] SWAP2 */
0x90, /* [228'0xe4] SWAP1 */
0x50, /* [229'0xe5] POP */
0x50, /* [230'0xe6] POP */
0x50, /* [231'0xe7] POP */
0x61, /* [232'0xe8] PUSH2 */
0x02,0x1f,/* constant data */
0x56, /* [235'0xeb] JUMP */
0x5b, /* [236'0xec] JUMPDEST */
0x00, /* [237'0xed] STOP */
0x5b, /* [238'0xee] JUMPDEST */
0x61, /* [239'0xef] PUSH2 */
0x00,0xf6,/* constant data */
0x61, /* [242'0xf2] PUSH2 */
0x02,0xdb,/* constant data */
0x56, /* [245'0xf5] JUMP */
0x5b, /* [246'0xf6] JUMPDEST */
0x00, /* [247'0xf7] STOP */
0x5b, /* [248'0xf8] JUMPDEST */
0x60, /* [249'0xf9] PUSH1 */
0x01,/* constant data */
0x60, /* [251'0xfb] PUSH1 */
0x00,/* constant data */
0x33, /* [253'0xfd] CALLER */
0x73, /* [254'0xfe] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [275'0x113] AND */
0x73, /* [276'0x114] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [297'0x129] AND */
0x81, /* [298'0x12a] DUP2 */
0x52, /* [299'0x12b] MSTORE */
0x60, /* [300'0x12c] PUSH1 */
0x20,/* constant data */
0x01, /* [302'0x12e] ADD */
0x90, /* [303'0x12f] SWAP1 */
0x81, /* [304'0x130] DUP2 */
0x52, /* [305'0x131] MSTORE */
0x60, /* [306'0x132] PUSH1 */
0x20,/* constant data */
0x01, /* [308'0x134] ADD */
0x60, /* [309'0x135] PUSH1 */
0x00,/* constant data */
0x20, /* [311'0x137] SHA3 */
0x54, /* [312'0x138] SLOAD */
0x81, /* [313'0x139] DUP2 */
0x11, /* [314'0x13a] GT */
0x15, /* [315'0x13b] ISZERO */
0x15, /* [316'0x13c] ISZERO */
0x15, /* [317'0x13d] ISZERO */
0x61, /* [318'0x13e] PUSH2 */
0x01,0x46,/* constant data */
0x57, /* [321'0x141] JUMPI */
0x60, /* [322'0x142] PUSH1 */
0x00,/* constant data */
0x80, /* [324'0x144] DUP1 */
0xfd, /* [325'0x145] REVERT */
0x5b, /* [326'0x146] JUMPDEST */
0x33, /* [327'0x147] CALLER */
0x73, /* [328'0x148] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [349'0x15d] AND */
0x61, /* [350'0x15e] PUSH2 */
0x08,0xfc,/* constant data */
0x82, /* [353'0x161] DUP3 */
0x90, /* [354'0x162] SWAP1 */
0x81, /* [355'0x163] DUP2 */
0x15, /* [356'0x164] ISZERO */
0x02, /* [357'0x165] MUL */
0x90, /* [358'0x166] SWAP1 */
0x60, /* [359'0x167] PUSH1 */
0x40,/* constant data */
0x51, /* [361'0x169] MLOAD */
0x60, /* [362'0x16a] PUSH1 */
0x00,/* constant data */
0x60, /* [364'0x16c] PUSH1 */
0x40,/* constant data */
0x51, /* [366'0x16e] MLOAD */
0x80, /* [367'0x16f] DUP1 */
0x83, /* [368'0x170] DUP4 */
0x03, /* [369'0x171] SUB */
0x81, /* [370'0x172] DUP2 */
0x85, /* [371'0x173] DUP6 */
0x88, /* [372'0x174] DUP9 */
0x88, /* [373'0x175] DUP9 */
0xf1, /* [374'0x176] CALL */
0x93, /* [375'0x177] SWAP4 */
0x50, /* [376'0x178] POP */
0x50, /* [377'0x179] POP */
0x50, /* [378'0x17a] POP */
0x50, /* [379'0x17b] POP */
0x15, /* [380'0x17c] ISZERO */
0x80, /* [381'0x17d] DUP1 */
0x15, /* [382'0x17e] ISZERO */
0x61, /* [383'0x17f] PUSH2 */
0x01,0x8c,/* constant data */
0x57, /* [386'0x182] JUMPI */
0x3d, /* [387'0x183] RETURNDATASIZE */
0x60, /* [388'0x184] PUSH1 */
0x00,/* constant data */
0x80, /* [390'0x186] DUP1 */
0x3e, /* [391'0x187] RETURNDATACOPY */
0x3d, /* [392'0x188] RETURNDATASIZE */
0x60, /* [393'0x189] PUSH1 */
0x00,/* constant data */
0xfd, /* [395'0x18b] REVERT */
0x5b, /* [396'0x18c] JUMPDEST */
0x50, /* [397'0x18d] POP */
0x80, /* [398'0x18e] DUP1 */
0x60, /* [399'0x18f] PUSH1 */
0x01,/* constant data */
0x60, /* [401'0x191] PUSH1 */
0x00,/* constant data */
0x33, /* [403'0x193] CALLER */
0x73, /* [404'0x194] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [425'0x1a9] AND */
0x73, /* [426'0x1aa] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [447'0x1bf] AND */
0x81, /* [448'0x1c0] DUP2 */
0x52, /* [449'0x1c1] MSTORE */
0x60, /* [450'0x1c2] PUSH1 */
0x20,/* constant data */
0x01, /* [452'0x1c4] ADD */
0x90, /* [453'0x1c5] SWAP1 */
0x81, /* [454'0x1c6] DUP2 */
0x52, /* [455'0x1c7] MSTORE */
0x60, /* [456'0x1c8] PUSH1 */
0x20,/* constant data */
0x01, /* [458'0x1ca] ADD */
0x60, /* [459'0x1cb] PUSH1 */
0x00,/* constant data */
0x20, /* [461'0x1cd] SHA3 */
0x60, /* [462'0x1ce] PUSH1 */
0x00,/* constant data */
0x82, /* [464'0x1d0] DUP3 */
0x82, /* [465'0x1d1] DUP3 */
0x54, /* [466'0x1d2] SLOAD */
0x03, /* [467'0x1d3] SUB */
0x92, /* [468'0x1d4] SWAP3 */
0x50, /* [469'0x1d5] POP */
0x50, /* [470'0x1d6] POP */
0x81, /* [471'0x1d7] DUP2 */
0x90, /* [472'0x1d8] SWAP1 */
0x55, /* [473'0x1d9] SSTORE */
0x50, /* [474'0x1da] POP */
0x50, /* [475'0x1db] POP */
0x56, /* [476'0x1dc] JUMP */
0x5b, /* [477'0x1dd] JUMPDEST */
0x33, /* [478'0x1de] CALLER */
0x60, /* [479'0x1df] PUSH1 */
0x00,/* constant data */
0x80, /* [481'0x1e1] DUP1 */
0x61, /* [482'0x1e2] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [485'0x1e5] EXP */
0x81, /* [486'0x1e6] DUP2 */
0x54, /* [487'0x1e7] SLOAD */
0x81, /* [488'0x1e8] DUP2 */
0x73, /* [489'0x1e9] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [510'0x1fe] MUL */
0x19, /* [511'0x1ff] NOT */
0x16, /* [512'0x200] AND */
0x90, /* [513'0x201] SWAP1 */
0x83, /* [514'0x202] DUP4 */
0x73, /* [515'0x203] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [536'0x218] AND */
0x02, /* [537'0x219] MUL */
0x17, /* [538'0x21a] OR */
0x90, /* [539'0x21b] SWAP1 */
0x55, /* [540'0x21c] SSTORE */
0x50, /* [541'0x21d] POP */
0x56, /* [542'0x21e] JUMP */
0x5b, /* [543'0x21f] JUMPDEST */
0x33, /* [544'0x220] CALLER */
0x73, /* [545'0x221] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [566'0x236] AND */
0x60, /* [567'0x237] PUSH1 */
0x00,/* constant data */
0x80, /* [569'0x239] DUP1 */
0x90, /* [570'0x23a] SWAP1 */
0x54, /* [571'0x23b] SLOAD */
0x90, /* [572'0x23c] SWAP1 */
0x61, /* [573'0x23d] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [576'0x240] EXP */
0x90, /* [577'0x241] SWAP1 */
0x04, /* [578'0x242] DIV */
0x73, /* [579'0x243] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [600'0x258] AND */
0x73, /* [601'0x259] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [622'0x26e] AND */
0x14, /* [623'0x26f] EQ */
0x15, /* [624'0x270] ISZERO */
0x15, /* [625'0x271] ISZERO */
0x61, /* [626'0x272] PUSH2 */
0x02,0x7a,/* constant data */
0x57, /* [629'0x275] JUMPI */
0x60, /* [630'0x276] PUSH1 */
0x00,/* constant data */
0x80, /* [632'0x278] DUP1 */
0xfd, /* [633'0x279] REVERT */
0x5b, /* [634'0x27a] JUMPDEST */
0x80, /* [635'0x27b] DUP1 */
0x73, /* [636'0x27c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [657'0x291] AND */
0x61, /* [658'0x292] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [661'0x295] ADDRESS */
0x73, /* [662'0x296] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [683'0x2ab] AND */
0x31, /* [684'0x2ac] BALANCE */
0x90, /* [685'0x2ad] SWAP1 */
0x81, /* [686'0x2ae] DUP2 */
0x15, /* [687'0x2af] ISZERO */
0x02, /* [688'0x2b0] MUL */
0x90, /* [689'0x2b1] SWAP1 */
0x60, /* [690'0x2b2] PUSH1 */
0x40,/* constant data */
0x51, /* [692'0x2b4] MLOAD */
0x60, /* [693'0x2b5] PUSH1 */
0x00,/* constant data */
0x60, /* [695'0x2b7] PUSH1 */
0x40,/* constant data */
0x51, /* [697'0x2b9] MLOAD */
0x80, /* [698'0x2ba] DUP1 */
0x83, /* [699'0x2bb] DUP4 */
0x03, /* [700'0x2bc] SUB */
0x81, /* [701'0x2bd] DUP2 */
0x85, /* [702'0x2be] DUP6 */
0x88, /* [703'0x2bf] DUP9 */
0x88, /* [704'0x2c0] DUP9 */
0xf1, /* [705'0x2c1] CALL */
0x93, /* [706'0x2c2] SWAP4 */
0x50, /* [707'0x2c3] POP */
0x50, /* [708'0x2c4] POP */
0x50, /* [709'0x2c5] POP */
0x50, /* [710'0x2c6] POP */
0x15, /* [711'0x2c7] ISZERO */
0x80, /* [712'0x2c8] DUP1 */
0x15, /* [713'0x2c9] ISZERO */
0x61, /* [714'0x2ca] PUSH2 */
0x02,0xd7,/* constant data */
0x57, /* [717'0x2cd] JUMPI */
0x3d, /* [718'0x2ce] RETURNDATASIZE */
0x60, /* [719'0x2cf] PUSH1 */
0x00,/* constant data */
0x80, /* [721'0x2d1] DUP1 */
0x3e, /* [722'0x2d2] RETURNDATACOPY */
0x3d, /* [723'0x2d3] RETURNDATASIZE */
0x60, /* [724'0x2d4] PUSH1 */
0x00,/* constant data */
0xfd, /* [726'0x2d6] REVERT */
0x5b, /* [727'0x2d7] JUMPDEST */
0x50, /* [728'0x2d8] POP */
0x50, /* [729'0x2d9] POP */
0x56, /* [730'0x2da] JUMP */
0x5b, /* [731'0x2db] JUMPDEST */
0x60, /* [732'0x2dc] PUSH1 */
0x01,/* constant data */
0x60, /* [734'0x2de] PUSH1 */
0x00,/* constant data */
0x33, /* [736'0x2e0] CALLER */
0x73, /* [737'0x2e1] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [758'0x2f6] AND */
0x73, /* [759'0x2f7] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [780'0x30c] AND */
0x81, /* [781'0x30d] DUP2 */
0x52, /* [782'0x30e] MSTORE */
0x60, /* [783'0x30f] PUSH1 */
0x20,/* constant data */
0x01, /* [785'0x311] ADD */
0x90, /* [786'0x312] SWAP1 */
0x81, /* [787'0x313] DUP2 */
0x52, /* [788'0x314] MSTORE */
0x60, /* [789'0x315] PUSH1 */
0x20,/* constant data */
0x01, /* [791'0x317] ADD */
0x60, /* [792'0x318] PUSH1 */
0x00,/* constant data */
0x20, /* [794'0x31a] SHA3 */
0x54, /* [795'0x31b] SLOAD */
0x34, /* [796'0x31c] CALLVALUE */
0x60, /* [797'0x31d] PUSH1 */
0x01,/* constant data */
0x60, /* [799'0x31f] PUSH1 */
0x00,/* constant data */
0x33, /* [801'0x321] CALLER */
0x73, /* [802'0x322] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [823'0x337] AND */
0x73, /* [824'0x338] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [845'0x34d] AND */
0x81, /* [846'0x34e] DUP2 */
0x52, /* [847'0x34f] MSTORE */
0x60, /* [848'0x350] PUSH1 */
0x20,/* constant data */
0x01, /* [850'0x352] ADD */
0x90, /* [851'0x353] SWAP1 */
0x81, /* [852'0x354] DUP2 */
0x52, /* [853'0x355] MSTORE */
0x60, /* [854'0x356] PUSH1 */
0x20,/* constant data */
0x01, /* [856'0x358] ADD */
0x60, /* [857'0x359] PUSH1 */
0x00,/* constant data */
0x20, /* [859'0x35b] SHA3 */
0x54, /* [860'0x35c] SLOAD */
0x01, /* [861'0x35d] ADD */
0x11, /* [862'0x35e] GT */
0x15, /* [863'0x35f] ISZERO */
0x15, /* [864'0x360] ISZERO */
0x61, /* [865'0x361] PUSH2 */
0x03,0x66,/* constant data */
0x57, /* [868'0x364] JUMPI */
0xfe, /* [869'0x365] INVALID */
0x5b, /* [870'0x366] JUMPDEST */
0x34, /* [871'0x367] CALLVALUE */
0x60, /* [872'0x368] PUSH1 */
0x01,/* constant data */
0x60, /* [874'0x36a] PUSH1 */
0x00,/* constant data */
0x33, /* [876'0x36c] CALLER */
0x73, /* [877'0x36d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [898'0x382] AND */
0x73, /* [899'0x383] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [920'0x398] AND */
0x81, /* [921'0x399] DUP2 */
0x52, /* [922'0x39a] MSTORE */
0x60, /* [923'0x39b] PUSH1 */
0x20,/* constant data */
0x01, /* [925'0x39d] ADD */
0x90, /* [926'0x39e] SWAP1 */
0x81, /* [927'0x39f] DUP2 */
0x52, /* [928'0x3a0] MSTORE */
0x60, /* [929'0x3a1] PUSH1 */
0x20,/* constant data */
0x01, /* [931'0x3a3] ADD */
0x60, /* [932'0x3a4] PUSH1 */
0x00,/* constant data */
0x20, /* [934'0x3a6] SHA3 */
0x60, /* [935'0x3a7] PUSH1 */
0x00,/* constant data */
0x82, /* [937'0x3a9] DUP3 */
0x82, /* [938'0x3aa] DUP3 */
0x54, /* [939'0x3ab] SLOAD */
0x01, /* [940'0x3ac] ADD */
0x92, /* [941'0x3ad] SWAP3 */
0x50, /* [942'0x3ae] POP */
0x50, /* [943'0x3af] POP */
0x81, /* [944'0x3b0] DUP2 */
0x90, /* [945'0x3b1] SWAP1 */
0x55, /* [946'0x3b2] SSTORE */
0x50, /* [947'0x3b3] POP */
0x56, /* [948'0x3b4] JUMP */
0x00, /* [949'0x3b5] STOP */
0xa1, /* [950'0x3b6] LOG1 */
0x65, /* [951'0x3b7] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [958'0x3be] SHA3 */
0x11, /* [959'0x3bf] GT */
0xd5, /* [960'0x3c0] INVALID' byte */
0xcd, /* [961'0x3c1] INVALID' byte */
0xc4, /* [962'0x3c2] INVALID' byte */
0x5a, /* [963'0x3c3] GAS */
0x29, /* [964'0x3c4] INVALID' byte */
0x31, /* [965'0x3c5] BALANCE */
0x85, /* [966'0x3c6] DUP6 */
0x08, /* [967'0x3c7] ADDMOD */
0xad, /* [968'0x3c8] INVALID' byte */
0xac, /* [969'0x3c9] INVALID' byte */
0x94, /* [970'0x3ca] SWAP5 */
0xff, /* [971'0x3cb] SELFDESTRUCT */
0x8b, /* [972'0x3cc] DUP12 */
0xaf, /* [973'0x3cd] INVALID' byte */
0xc9, /* [974'0x3ce] INVALID' byte */
0xd1, /* [975'0x3cf] INVALID' byte */
0x40, /* [976'0x3d0] BLOCKHASH */
0x38, /* [977'0x3d1] CODESIZE */
0x22, /* [978'0x3d2] INVALID' byte */
0x1e, /* [979'0x3d3] INVALID' byte */
0x42, /* [980'0x3d4] TIMESTAMP */
0x33, /* [981'0x3d5] CALLER */
0x8f, /* [982'0x3d6] DUP16 */
0xd8, /* [983'0x3d7] INVALID' byte */
0x64, /* [984'0x3d8] PUSH5 */
0xdc,0xaa,0x9f,0x49,0x67,/* constant data */
0x6a, /* [990'0x3de] PUSH11 */
0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_wallet_03_wrong_constructor::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_wallet_03_wrong_constructor::_contract_name = "wallet_03_wrong_constructor";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_wallet_03_wrong_constructor> eevm::EVM2CPP_wallet_03_wrong_constructor::reg{};
const std::string& eevm::EVM2CPP_wallet_03_wrong_constructor::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_29 = 0x29_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_62 = 0x62_u256;
constexpr uint256_t c_67 = 0x67_u256;
constexpr uint256_t c_73 = 0x73_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_92 = 0x92_u256;
constexpr uint256_t c_94 = 0x94_u256;
constexpr uint256_t c_a0 = 0xa0_u256;
constexpr uint256_t c_a9 = 0xa9_u256;
constexpr uint256_t c_ab = 0xab_u256;
constexpr uint256_t c_b7 = 0xb7_u256;
constexpr uint256_t c_ec = 0xec_u256;
constexpr uint256_t c_ee = 0xee_u256;
constexpr uint256_t c_f6 = 0xf6_u256;
constexpr uint256_t c_f8 = 0xf8_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_146 = 0x146_u256;
constexpr uint256_t c_18c = 0x18c_u256;
constexpr uint256_t c_1dd = 0x1dd_u256;
constexpr uint256_t c_21f = 0x21f_u256;
constexpr uint256_t c_27a = 0x27a_u256;
constexpr uint256_t c_2d7 = 0x2d7_u256;
constexpr uint256_t c_2db = 0x2db_u256;
constexpr uint256_t c_366 = 0x366_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_2e1a7d4d = 0x2e1a7d4d_u256;
constexpr uint256_t c_3e326048 = 0x3e326048_u256;
constexpr uint256_t c_4ddaf8f2 = 0x4ddaf8f2_u256;
constexpr uint256_t c_d0e30db0 = 0xd0e30db0_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_39 = 0xdcaa9f4967_u256;
constexpr uint256_t g_38 = 0x627a7a723058_u256;
constexpr uint256_t g_25 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_34 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_wallet_03_wrong_constructor::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_62,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_67,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_73,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_92,
&&__invld,
&&pc_94,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_a0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_a9,
&&__invld,
&&pc_ab,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b7,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ec,
&&__invld,
&&pc_ee,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f6,
&&__invld,
&&pc_f8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_146,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_18c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1dd,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_21f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_27a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2d7,
&&__invld,
&&__invld,
&&__invld,
&&pc_2db,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_366,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [98] */

/* JUMPI */
/* op_0 = Constant((6, 98)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_62;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [773487949] */

/* EQ */
/* op_0 = Constant((8, 773487949)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_2e1a7d4d, v_6_0);


/* PUSH2 */
/* val = [103] */

/* JUMPI */
/* op_0 = Constant((10, 103)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_67;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1043488840] */

/* EQ */
/* op_0 = Constant((1, 1043488840)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3e326048, s_0_0);


/* PUSH2 */
/* val = [148] */

/* JUMPI */
/* op_0 = Constant((3, 148)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_94;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1306196210] */

/* EQ */
/* op_0 = Constant((1, 1306196210)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_4ddaf8f2, s_0_0);


/* PUSH2 */
/* val = [171] */

/* JUMPI */
/* op_0 = Constant((3, 171)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_ab;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3504541104] */

/* EQ */
/* op_0 = Constant((1, 3504541104)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d0e30db0, s_0_0);


/* PUSH2 */
/* val = [238] */

/* JUMPI */
/* op_0 = Constant((3, 238)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_ee;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_67:
{ /* <============ */ 
on_bb_start(103);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [115] */

/* JUMPI */
/* op_0 = Constant((4, 115)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_73;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_6f:
{ /* <============ */ 
on_bb_start(111);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_73:
{ /* <============ */ 
on_bb_start(115);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [146] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [248] */

/* JUMP */
/* op_0 = Constant((23, 248)) */
/* BB finalizer */
ctxt->s.set(0, c_92);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);

goto pc_f8;


}pc_92:
{ /* <============ */ 
on_bb_start(146);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_94:
{ /* <============ */ 
on_bb_start(148);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [160] */

/* JUMPI */
/* op_0 = Constant((4, 160)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_a0;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_9c:
{ /* <============ */ 
on_bb_start(156);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_a0:
{ /* <============ */ 
on_bb_start(160);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [169] */

/* PUSH2 */
/* val = [477] */

/* JUMP */
/* op_0 = Constant((3, 477)) */
/* BB finalizer */
ctxt->s.set(0, c_a9);
/* no pops at end */
/* no BB returns */

goto pc_1dd;


}pc_a9:
{ /* <============ */ 
on_bb_start(169);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ab:
{ /* <============ */ 
on_bb_start(171);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [183] */

/* JUMPI */
/* op_0 = Constant((4, 183)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_b7;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_b3:
{ /* <============ */ 
on_bb_start(179);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_b7:
{ /* <============ */ 
on_bb_start(183);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [236] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_25, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [543] */

/* JUMP */
/* op_0 = Constant((25, 543)) */
/* BB finalizer */
ctxt->s.set(0, c_ec);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_21f;


}pc_ec:
{ /* <============ */ 
on_bb_start(236);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ee:
{ /* <============ */ 
on_bb_start(238);
/* JUMPDEST */

/* PUSH2 */
/* val = [246] */

/* PUSH2 */
/* val = [731] */

/* JUMP */
/* op_0 = Constant((2, 731)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 246))*/
ctxt->s.push(c_f6);

goto pc_2db;


}pc_f6:
{ /* <============ */ 
on_bb_start(246);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f8:
{ /* <============ */ 
on_bb_start(248);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_25, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_25, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = sload_v(v_18_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* GT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = InstructionRef((19, 0)) */
TRACE_COMP(eevm::Opcode::GT, s_0_0, v_19_0);
const uint256_t v_21_0 = gt_v(s_0_0, v_19_0);


/* ISZERO */
/* op_0 = InstructionRef((21, 0)) */
const uint256_t v_22_0 = iszero_v(v_21_0);


/* ISZERO */
/* op_0 = InstructionRef((22, 0)) */
const uint256_t v_23_0 = iszero_v(v_22_0);


/* ISZERO */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_24_0 = iszero_v(v_23_0);


/* PUSH2 */
/* val = [326] */

/* JUMPI */
/* op_0 = Constant((25, 326)) */
/* op_1 = InstructionRef((24, 0)) */
if ( v_24_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_146;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_142:
{ /* <============ */ 
on_bb_start(322);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_146:
{ /* <============ */ 
on_bb_start(326);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_25, v_1_0);


/* PUSH2 */
/* val = [2300] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_8_0 = iszero_v(s_0_0);


/* MUL */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_9_0 = mul_v(v_8_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((11, 64)) */
const uint256_t v_12_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_12_0, v_15_0);


/* DUP2 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((9, 0)) */

/* CALL */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((15, 0)) */
/* op_4 = InstructionRef((18, 0)) */
/* op_5 = InstructionRef((15, 0)) */
/* op_6 = Constant((13, 0)) */
const uint256_t v_23_0 = call_v(v_9_0, v_3_0, s_0_0, v_15_0, v_18_0, v_15_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_29_0 = iszero_v(v_23_0);


/* DUP1 */
/* op_0 = InstructionRef((29, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = iszero_v(v_29_0);


/* PUSH2 */
/* val = [396] */

/* JUMPI */
/* op_0 = Constant((32, 396)) */
/* op_1 = InstructionRef((31, 0)) */
if ( v_31_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
 
 goto pc_18c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
}pc_183:
{ /* <============ */ 
on_bb_start(387);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_18c:
{ /* <============ */ 
on_bb_start(396);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_5_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_25, v_5_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((8, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_9_0 = and_v(g_25, v_7_0);


/* DUP2 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((4, 0)) */
/* op_1 = InstructionRef((9, 0)) */
mstore_v(c_0, v_9_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((4, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 1)) */

/* DUP2 */
/* op_0 = Constant((13, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((17, 32)) */
/* op_1 = Constant((13, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((19, 0)) */
/* op_1 = Constant((18, 64)) */
const uint256_t v_20_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* DUP3 */
/* op_0 = InstructionRef((20, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((20, 0)) */
const uint256_t v_24_0 = sload_v(v_20_0);


/* SUB */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_25_0 = sub_v(v_24_0, s_0_1);


/* SWAP3 */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((25, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((25, 0)) */
sstore_v(v_20_0, v_25_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_1dd:
{ /* <============ */ 
on_bb_start(477);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((2, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_34, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_25, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 0)) */

/* SSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_0, v_18_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_21f:
{ /* <============ */ 
on_bb_start(543);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_25, v_1_0);


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((4, 0)) */
/* op_1 = Constant((4, 0)) */

/* SLOAD */
/* op_0 = Constant((4, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((4, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((9, 256)) */
/* op_1 = Constant((4, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((10, 1)) */
/* op_1 = InstructionRef((7, 0)) */

/* DIV */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((10, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_14_0 = and_v(g_25, v_7_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_25, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((3, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_3_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [634] */

/* JUMPI */
/* op_0 = Constant((20, 634)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_27a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_276:
{ /* <============ */ 
on_bb_start(630);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_27a:
{ /* <============ */ 
on_bb_start(634);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = and_v(g_25, s_0_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_5_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_25, v_5_0);


/* BALANCE */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = balance_v(v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_11_0 = iszero_v(v_8_0);


/* MUL */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_12_0 = mul_v(v_11_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((17, 64)) */
const uint256_t v_18_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((15, 0)) */

/* SUB */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_21_0 = sub_v(v_15_0, v_18_0);


/* DUP2 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((8, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((12, 0)) */

/* CALL */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = InstructionRef((8, 0)) */
/* op_3 = InstructionRef((18, 0)) */
/* op_4 = InstructionRef((21, 0)) */
/* op_5 = InstructionRef((18, 0)) */
/* op_6 = Constant((16, 0)) */
const uint256_t v_26_0 = call_v(v_12_0, v_3_0, v_8_0, v_18_0, v_21_0, v_18_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_32_0 = iszero_v(v_26_0);


/* DUP1 */
/* op_0 = InstructionRef((32, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((32, 0)) */
const uint256_t v_34_0 = iszero_v(v_32_0);


/* PUSH2 */
/* val = [727] */

/* JUMPI */
/* op_0 = Constant((35, 727)) */
/* op_1 = InstructionRef((34, 0)) */
if ( v_34_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
 
 goto pc_2d7;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
}pc_2ce:
{ /* <============ */ 
on_bb_start(718);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2d7:
{ /* <============ */ 
on_bb_start(727);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_2db:
{ /* <============ */ 
on_bb_start(731);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_25, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_25, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = sload_v(v_18_0);


/* CALLVALUE */
const uint256_t v_20_0 = callvalue_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_23_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((24, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((23, 0)) */
const uint256_t v_25_0 = and_v(g_25, v_23_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((26, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((25, 0)) */
const uint256_t v_27_0 = and_v(g_25, v_25_0);


/* DUP2 */
/* op_0 = Constant((22, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((22, 0)) */
/* op_1 = InstructionRef((27, 0)) */
mstore_v(c_0, v_27_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((30, 32)) */
/* op_1 = Constant((22, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((31, 32)) */
/* op_1 = Constant((21, 1)) */

/* DUP2 */
/* op_0 = Constant((31, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((31, 32)) */
/* op_1 = Constant((21, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((35, 32)) */
/* op_1 = Constant((31, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((37, 0)) */
/* op_1 = Constant((36, 64)) */
const uint256_t v_38_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((38, 0)) */
const uint256_t v_39_0 = sload_v(v_38_0);


/* ADD */
/* op_0 = InstructionRef((39, 0)) */
/* op_1 = InstructionRef((20, 0)) */
const uint256_t v_40_0 = add_v(v_39_0, v_20_0);


/* GT */
/* op_0 = InstructionRef((40, 0)) */
/* op_1 = InstructionRef((19, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_40_0, v_19_0);
const uint256_t v_41_0 = gt_v(v_40_0, v_19_0);


/* ISZERO */
/* op_0 = InstructionRef((41, 0)) */
const uint256_t v_42_0 = iszero_v(v_41_0);


/* ISZERO */
/* op_0 = InstructionRef((42, 0)) */
const uint256_t v_43_0 = iszero_v(v_42_0);


/* PUSH2 */
/* val = [870] */

/* JUMPI */
/* op_0 = Constant((44, 870)) */
/* op_1 = InstructionRef((43, 0)) */
if ( v_43_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_366;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_365:
{ /* <============ */ 
on_bb_start(869);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_366:
{ /* <============ */ 
on_bb_start(870);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_4_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(g_25, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_25, v_6_0);


/* DUP2 */
/* op_0 = Constant((3, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((3, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(c_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((3, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 1)) */

/* DUP2 */
/* op_0 = Constant((12, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((12, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((18, 0)) */
/* op_1 = Constant((17, 64)) */
const uint256_t v_19_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((19, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_23_0 = sload_v(v_19_0);


/* ADD */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_24_0 = add_v(v_23_0, v_1_0);


/* SWAP3 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((24, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((19, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((24, 0)) */
sstore_v(v_19_0, v_24_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_3b5:
{ /* <============ */ 
on_bb_start(949);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3b6:
{ /* <============ */ 
on_bb_start(950);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_38, s_0_3);


/* GT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 4)) */
TRACE_COMP(eevm::Opcode::GT, v_2_0, s_0_4);
const uint256_t v_3_0 = gt_v(v_2_0, s_0_4);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3b6 (inst offset 4; byte 0xd5)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3c1:
{ /* <============ */ 
on_bb_start(961);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3c1 (inst offset 0; byte 0xcd)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3c2:
{ /* <============ */ 
on_bb_start(962);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3c2 (inst offset 0; byte 0xc4)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3c3:
{ /* <============ */ 
on_bb_start(963);
/* GAS */
const uint256_t v_0_0 = gas_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3c3 (inst offset 1; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3c5:
{ /* <============ */ 
on_bb_start(965);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* BALANCE */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_0_0 = balance_v(s_0_0);


/* DUP6 */
/* op_0 = StackRef((0, 5)) */

/* ADDMOD */
/* op_0 = StackRef((0, 5)) */
/* op_1 = InstructionRef((0, 0)) */
/* op_2 = StackRef((0, 1)) */
const uint256_t v_2_0 = addmod_v(s_0_5, v_0_0, s_0_1);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3c5 (inst offset 3; byte 0xad)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3c9:
{ /* <============ */ 
on_bb_start(969);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3c9 (inst offset 0; byte 0xac)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3ca:
{ /* <============ */ 
on_bb_start(970);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* SWAP5 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 5)) */

/* SELFDESTRUCT */
/* op_0 = StackRef((0, 5)) */
selfdestruct_v(s_0_5);
goto exit_label;


/* BB finalizer */
ctxt->s.set(5, s_0_0);
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_3cc:
{ /* <============ */ 
on_bb_start(972);
const uint256_t s_0_11 = ctxt->s.peek(11);
/* DUP12 */
/* op_0 = StackRef((0, 11)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3cc (inst offset 1; byte 0xaf)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3ce:
{ /* <============ */ 
on_bb_start(974);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3ce (inst offset 0; byte 0xc9)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3cf:
{ /* <============ */ 
on_bb_start(975);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3cf (inst offset 0; byte 0xd1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3d0:
{ /* <============ */ 
on_bb_start(976);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* BLOCKHASH */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_0_0 = blockhash_v(s_0_0);


/* CODESIZE */
/* val = [993] */
const uint256_t v_1_0 = codesize_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3d0 (inst offset 2; byte 0x22)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3d3:
{ /* <============ */ 
on_bb_start(979);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3d3 (inst offset 0; byte 0x1e)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3d4:
{ /* <============ */ 
on_bb_start(980);
const uint256_t s_0_13 = ctxt->s.peek(13);
/* TIMESTAMP */
const uint256_t v_0_0 = timestamp_v();


/* CALLER */
const uint256_t v_1_0 = caller_v();


/* DUP16 */
/* op_0 = StackRef((0, 13)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x3d4 (inst offset 3; byte 0xd8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3d8:
{ /* <============ */ 
on_bb_start(984);
/* PUSH5 */
/* val = [947755370855] */

/* PUSH11 */
/* val = [41] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((0, 947755370855))*/
ctxt->s.push(g_39);
/* BB return 1 Constant((1, 41))*/
ctxt->s.push(c_29);
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x3,0xe1,0x80,0x61,0x0,0x20,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x62,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x2e,0x1a,0x7d,0x4d,0x14,0x61,0x0,0x67,0x57,0x80,0x63,0x3e,0x32,0x60,0x48,0x14,0x61,0x0,0x94,0x57,0x80,0x63,0x4d,0xda,0xf8,0xf2,0x14,0x61,0x0,0xab,0x57,0x80,0x63,0xd0,0xe3,0xd,0xb0,0x14,0x61,0x0,0xee,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x73,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x92,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x0,0xf8,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xa0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xa9,0x61,0x1,0xdd,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xb7,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xec,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x2,0x1f,0x56,0x5b,0x0,0x5b,0x61,0x0,0xf6,0x61,0x2,0xdb,0x56,0x5b,0x0,0x5b,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x81,0x11,0x15,0x15,0x15,0x61,0x1,0x46,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x82,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x1,0x8c,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x80,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x3,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x50,0x56,0x5b,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x56,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x2,0x7a,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x2,0xd7,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x56,0x5b,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x34,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x1,0x11,0x15,0x15,0x61,0x3,0x66,0x57,0xfe,0x5b,0x34,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x1,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x11,0xd5,0xcd,0xc4,0x5a,0x29,0x31,0x85,0x8,0xad,0xac,0x94,0xff,0x8b,0xaf,0xc9,0xd1,0x40,0x38,0x22,0x1e,0x42,0x33,0x8f,0xd8,0x64,0xdc,0xaa,0x9f,0x49,0x67,0x6a,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_wallet_03_wrong_constructor::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_wallet_03_wrong_constructor::constructor_args() {
    return _constructor_args;
}
