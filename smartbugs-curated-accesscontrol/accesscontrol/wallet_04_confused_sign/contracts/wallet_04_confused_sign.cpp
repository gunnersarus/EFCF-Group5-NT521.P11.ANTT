// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/wallet_04_confused_sign.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x57,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x2e,0x1a,0x7d,0x4d,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x5c,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x4d,0xda,0xf8,0xf2,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x89,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0xd0,0xe3,0x0d,0xb0,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xcc,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x5b, /* [87'0x57] JUMPDEST */
0x60, /* [88'0x58] PUSH1 */
0x00,/* constant data */
0x80, /* [90'0x5a] DUP1 */
0xfd, /* [91'0x5b] REVERT */
0x5b, /* [92'0x5c] JUMPDEST */
0x34, /* [93'0x5d] CALLVALUE */
0x80, /* [94'0x5e] DUP1 */
0x15, /* [95'0x5f] ISZERO */
0x61, /* [96'0x60] PUSH2 */
0x00,0x68,/* constant data */
0x57, /* [99'0x63] JUMPI */
0x60, /* [100'0x64] PUSH1 */
0x00,/* constant data */
0x80, /* [102'0x66] DUP1 */
0xfd, /* [103'0x67] REVERT */
0x5b, /* [104'0x68] JUMPDEST */
0x50, /* [105'0x69] POP */
0x61, /* [106'0x6a] PUSH2 */
0x00,0x87,/* constant data */
0x60, /* [109'0x6d] PUSH1 */
0x04,/* constant data */
0x80, /* [111'0x6f] DUP1 */
0x36, /* [112'0x70] CALLDATASIZE */
0x03, /* [113'0x71] SUB */
0x81, /* [114'0x72] DUP2 */
0x01, /* [115'0x73] ADD */
0x90, /* [116'0x74] SWAP1 */
0x80, /* [117'0x75] DUP1 */
0x80, /* [118'0x76] DUP1 */
0x35, /* [119'0x77] CALLDATALOAD */
0x90, /* [120'0x78] SWAP1 */
0x60, /* [121'0x79] PUSH1 */
0x20,/* constant data */
0x01, /* [123'0x7b] ADD */
0x90, /* [124'0x7c] SWAP1 */
0x92, /* [125'0x7d] SWAP3 */
0x91, /* [126'0x7e] SWAP2 */
0x90, /* [127'0x7f] SWAP1 */
0x50, /* [128'0x80] POP */
0x50, /* [129'0x81] POP */
0x50, /* [130'0x82] POP */
0x61, /* [131'0x83] PUSH2 */
0x00,0xd6,/* constant data */
0x56, /* [134'0x86] JUMP */
0x5b, /* [135'0x87] JUMPDEST */
0x00, /* [136'0x88] STOP */
0x5b, /* [137'0x89] JUMPDEST */
0x34, /* [138'0x8a] CALLVALUE */
0x80, /* [139'0x8b] DUP1 */
0x15, /* [140'0x8c] ISZERO */
0x61, /* [141'0x8d] PUSH2 */
0x00,0x95,/* constant data */
0x57, /* [144'0x90] JUMPI */
0x60, /* [145'0x91] PUSH1 */
0x00,/* constant data */
0x80, /* [147'0x93] DUP1 */
0xfd, /* [148'0x94] REVERT */
0x5b, /* [149'0x95] JUMPDEST */
0x50, /* [150'0x96] POP */
0x61, /* [151'0x97] PUSH2 */
0x00,0xca,/* constant data */
0x60, /* [154'0x9a] PUSH1 */
0x04,/* constant data */
0x80, /* [156'0x9c] DUP1 */
0x36, /* [157'0x9d] CALLDATASIZE */
0x03, /* [158'0x9e] SUB */
0x81, /* [159'0x9f] DUP2 */
0x01, /* [160'0xa0] ADD */
0x90, /* [161'0xa1] SWAP1 */
0x80, /* [162'0xa2] DUP1 */
0x80, /* [163'0xa3] DUP1 */
0x35, /* [164'0xa4] CALLDATALOAD */
0x73, /* [165'0xa5] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [186'0xba] AND */
0x90, /* [187'0xbb] SWAP1 */
0x60, /* [188'0xbc] PUSH1 */
0x20,/* constant data */
0x01, /* [190'0xbe] ADD */
0x90, /* [191'0xbf] SWAP1 */
0x92, /* [192'0xc0] SWAP3 */
0x91, /* [193'0xc1] SWAP2 */
0x90, /* [194'0xc2] SWAP1 */
0x50, /* [195'0xc3] POP */
0x50, /* [196'0xc4] POP */
0x50, /* [197'0xc5] POP */
0x61, /* [198'0xc6] PUSH2 */
0x01,0xbb,/* constant data */
0x56, /* [201'0xc9] JUMP */
0x5b, /* [202'0xca] JUMPDEST */
0x00, /* [203'0xcb] STOP */
0x5b, /* [204'0xcc] JUMPDEST */
0x61, /* [205'0xcd] PUSH2 */
0x00,0xd4,/* constant data */
0x61, /* [208'0xd0] PUSH2 */
0x02,0x77,/* constant data */
0x56, /* [211'0xd3] JUMP */
0x5b, /* [212'0xd4] JUMPDEST */
0x00, /* [213'0xd5] STOP */
0x5b, /* [214'0xd6] JUMPDEST */
0x60, /* [215'0xd7] PUSH1 */
0x01,/* constant data */
0x60, /* [217'0xd9] PUSH1 */
0x00,/* constant data */
0x33, /* [219'0xdb] CALLER */
0x73, /* [220'0xdc] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [241'0xf1] AND */
0x73, /* [242'0xf2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [263'0x107] AND */
0x81, /* [264'0x108] DUP2 */
0x52, /* [265'0x109] MSTORE */
0x60, /* [266'0x10a] PUSH1 */
0x20,/* constant data */
0x01, /* [268'0x10c] ADD */
0x90, /* [269'0x10d] SWAP1 */
0x81, /* [270'0x10e] DUP2 */
0x52, /* [271'0x10f] MSTORE */
0x60, /* [272'0x110] PUSH1 */
0x20,/* constant data */
0x01, /* [274'0x112] ADD */
0x60, /* [275'0x113] PUSH1 */
0x00,/* constant data */
0x20, /* [277'0x115] SHA3 */
0x54, /* [278'0x116] SLOAD */
0x81, /* [279'0x117] DUP2 */
0x10, /* [280'0x118] LT */
0x15, /* [281'0x119] ISZERO */
0x15, /* [282'0x11a] ISZERO */
0x15, /* [283'0x11b] ISZERO */
0x61, /* [284'0x11c] PUSH2 */
0x01,0x24,/* constant data */
0x57, /* [287'0x11f] JUMPI */
0x60, /* [288'0x120] PUSH1 */
0x00,/* constant data */
0x80, /* [290'0x122] DUP1 */
0xfd, /* [291'0x123] REVERT */
0x5b, /* [292'0x124] JUMPDEST */
0x33, /* [293'0x125] CALLER */
0x73, /* [294'0x126] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [315'0x13b] AND */
0x61, /* [316'0x13c] PUSH2 */
0x08,0xfc,/* constant data */
0x82, /* [319'0x13f] DUP3 */
0x90, /* [320'0x140] SWAP1 */
0x81, /* [321'0x141] DUP2 */
0x15, /* [322'0x142] ISZERO */
0x02, /* [323'0x143] MUL */
0x90, /* [324'0x144] SWAP1 */
0x60, /* [325'0x145] PUSH1 */
0x40,/* constant data */
0x51, /* [327'0x147] MLOAD */
0x60, /* [328'0x148] PUSH1 */
0x00,/* constant data */
0x60, /* [330'0x14a] PUSH1 */
0x40,/* constant data */
0x51, /* [332'0x14c] MLOAD */
0x80, /* [333'0x14d] DUP1 */
0x83, /* [334'0x14e] DUP4 */
0x03, /* [335'0x14f] SUB */
0x81, /* [336'0x150] DUP2 */
0x85, /* [337'0x151] DUP6 */
0x88, /* [338'0x152] DUP9 */
0x88, /* [339'0x153] DUP9 */
0xf1, /* [340'0x154] CALL */
0x93, /* [341'0x155] SWAP4 */
0x50, /* [342'0x156] POP */
0x50, /* [343'0x157] POP */
0x50, /* [344'0x158] POP */
0x50, /* [345'0x159] POP */
0x15, /* [346'0x15a] ISZERO */
0x80, /* [347'0x15b] DUP1 */
0x15, /* [348'0x15c] ISZERO */
0x61, /* [349'0x15d] PUSH2 */
0x01,0x6a,/* constant data */
0x57, /* [352'0x160] JUMPI */
0x3d, /* [353'0x161] RETURNDATASIZE */
0x60, /* [354'0x162] PUSH1 */
0x00,/* constant data */
0x80, /* [356'0x164] DUP1 */
0x3e, /* [357'0x165] RETURNDATACOPY */
0x3d, /* [358'0x166] RETURNDATASIZE */
0x60, /* [359'0x167] PUSH1 */
0x00,/* constant data */
0xfd, /* [361'0x169] REVERT */
0x5b, /* [362'0x16a] JUMPDEST */
0x50, /* [363'0x16b] POP */
0x80, /* [364'0x16c] DUP1 */
0x60, /* [365'0x16d] PUSH1 */
0x01,/* constant data */
0x60, /* [367'0x16f] PUSH1 */
0x00,/* constant data */
0x33, /* [369'0x171] CALLER */
0x73, /* [370'0x172] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [391'0x187] AND */
0x73, /* [392'0x188] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [413'0x19d] AND */
0x81, /* [414'0x19e] DUP2 */
0x52, /* [415'0x19f] MSTORE */
0x60, /* [416'0x1a0] PUSH1 */
0x20,/* constant data */
0x01, /* [418'0x1a2] ADD */
0x90, /* [419'0x1a3] SWAP1 */
0x81, /* [420'0x1a4] DUP2 */
0x52, /* [421'0x1a5] MSTORE */
0x60, /* [422'0x1a6] PUSH1 */
0x20,/* constant data */
0x01, /* [424'0x1a8] ADD */
0x60, /* [425'0x1a9] PUSH1 */
0x00,/* constant data */
0x20, /* [427'0x1ab] SHA3 */
0x60, /* [428'0x1ac] PUSH1 */
0x00,/* constant data */
0x82, /* [430'0x1ae] DUP3 */
0x82, /* [431'0x1af] DUP3 */
0x54, /* [432'0x1b0] SLOAD */
0x03, /* [433'0x1b1] SUB */
0x92, /* [434'0x1b2] SWAP3 */
0x50, /* [435'0x1b3] POP */
0x50, /* [436'0x1b4] POP */
0x81, /* [437'0x1b5] DUP2 */
0x90, /* [438'0x1b6] SWAP1 */
0x55, /* [439'0x1b7] SSTORE */
0x50, /* [440'0x1b8] POP */
0x50, /* [441'0x1b9] POP */
0x56, /* [442'0x1ba] JUMP */
0x5b, /* [443'0x1bb] JUMPDEST */
0x33, /* [444'0x1bc] CALLER */
0x73, /* [445'0x1bd] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [466'0x1d2] AND */
0x60, /* [467'0x1d3] PUSH1 */
0x00,/* constant data */
0x80, /* [469'0x1d5] DUP1 */
0x90, /* [470'0x1d6] SWAP1 */
0x54, /* [471'0x1d7] SLOAD */
0x90, /* [472'0x1d8] SWAP1 */
0x61, /* [473'0x1d9] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [476'0x1dc] EXP */
0x90, /* [477'0x1dd] SWAP1 */
0x04, /* [478'0x1de] DIV */
0x73, /* [479'0x1df] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [500'0x1f4] AND */
0x73, /* [501'0x1f5] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [522'0x20a] AND */
0x14, /* [523'0x20b] EQ */
0x15, /* [524'0x20c] ISZERO */
0x15, /* [525'0x20d] ISZERO */
0x61, /* [526'0x20e] PUSH2 */
0x02,0x16,/* constant data */
0x57, /* [529'0x211] JUMPI */
0x60, /* [530'0x212] PUSH1 */
0x00,/* constant data */
0x80, /* [532'0x214] DUP1 */
0xfd, /* [533'0x215] REVERT */
0x5b, /* [534'0x216] JUMPDEST */
0x80, /* [535'0x217] DUP1 */
0x73, /* [536'0x218] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [557'0x22d] AND */
0x61, /* [558'0x22e] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [561'0x231] ADDRESS */
0x73, /* [562'0x232] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [583'0x247] AND */
0x31, /* [584'0x248] BALANCE */
0x90, /* [585'0x249] SWAP1 */
0x81, /* [586'0x24a] DUP2 */
0x15, /* [587'0x24b] ISZERO */
0x02, /* [588'0x24c] MUL */
0x90, /* [589'0x24d] SWAP1 */
0x60, /* [590'0x24e] PUSH1 */
0x40,/* constant data */
0x51, /* [592'0x250] MLOAD */
0x60, /* [593'0x251] PUSH1 */
0x00,/* constant data */
0x60, /* [595'0x253] PUSH1 */
0x40,/* constant data */
0x51, /* [597'0x255] MLOAD */
0x80, /* [598'0x256] DUP1 */
0x83, /* [599'0x257] DUP4 */
0x03, /* [600'0x258] SUB */
0x81, /* [601'0x259] DUP2 */
0x85, /* [602'0x25a] DUP6 */
0x88, /* [603'0x25b] DUP9 */
0x88, /* [604'0x25c] DUP9 */
0xf1, /* [605'0x25d] CALL */
0x93, /* [606'0x25e] SWAP4 */
0x50, /* [607'0x25f] POP */
0x50, /* [608'0x260] POP */
0x50, /* [609'0x261] POP */
0x50, /* [610'0x262] POP */
0x15, /* [611'0x263] ISZERO */
0x80, /* [612'0x264] DUP1 */
0x15, /* [613'0x265] ISZERO */
0x61, /* [614'0x266] PUSH2 */
0x02,0x73,/* constant data */
0x57, /* [617'0x269] JUMPI */
0x3d, /* [618'0x26a] RETURNDATASIZE */
0x60, /* [619'0x26b] PUSH1 */
0x00,/* constant data */
0x80, /* [621'0x26d] DUP1 */
0x3e, /* [622'0x26e] RETURNDATACOPY */
0x3d, /* [623'0x26f] RETURNDATASIZE */
0x60, /* [624'0x270] PUSH1 */
0x00,/* constant data */
0xfd, /* [626'0x272] REVERT */
0x5b, /* [627'0x273] JUMPDEST */
0x50, /* [628'0x274] POP */
0x50, /* [629'0x275] POP */
0x56, /* [630'0x276] JUMP */
0x5b, /* [631'0x277] JUMPDEST */
0x60, /* [632'0x278] PUSH1 */
0x01,/* constant data */
0x60, /* [634'0x27a] PUSH1 */
0x00,/* constant data */
0x33, /* [636'0x27c] CALLER */
0x73, /* [637'0x27d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [658'0x292] AND */
0x73, /* [659'0x293] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [680'0x2a8] AND */
0x81, /* [681'0x2a9] DUP2 */
0x52, /* [682'0x2aa] MSTORE */
0x60, /* [683'0x2ab] PUSH1 */
0x20,/* constant data */
0x01, /* [685'0x2ad] ADD */
0x90, /* [686'0x2ae] SWAP1 */
0x81, /* [687'0x2af] DUP2 */
0x52, /* [688'0x2b0] MSTORE */
0x60, /* [689'0x2b1] PUSH1 */
0x20,/* constant data */
0x01, /* [691'0x2b3] ADD */
0x60, /* [692'0x2b4] PUSH1 */
0x00,/* constant data */
0x20, /* [694'0x2b6] SHA3 */
0x54, /* [695'0x2b7] SLOAD */
0x34, /* [696'0x2b8] CALLVALUE */
0x60, /* [697'0x2b9] PUSH1 */
0x01,/* constant data */
0x60, /* [699'0x2bb] PUSH1 */
0x00,/* constant data */
0x33, /* [701'0x2bd] CALLER */
0x73, /* [702'0x2be] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [723'0x2d3] AND */
0x73, /* [724'0x2d4] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [745'0x2e9] AND */
0x81, /* [746'0x2ea] DUP2 */
0x52, /* [747'0x2eb] MSTORE */
0x60, /* [748'0x2ec] PUSH1 */
0x20,/* constant data */
0x01, /* [750'0x2ee] ADD */
0x90, /* [751'0x2ef] SWAP1 */
0x81, /* [752'0x2f0] DUP2 */
0x52, /* [753'0x2f1] MSTORE */
0x60, /* [754'0x2f2] PUSH1 */
0x20,/* constant data */
0x01, /* [756'0x2f4] ADD */
0x60, /* [757'0x2f5] PUSH1 */
0x00,/* constant data */
0x20, /* [759'0x2f7] SHA3 */
0x54, /* [760'0x2f8] SLOAD */
0x01, /* [761'0x2f9] ADD */
0x11, /* [762'0x2fa] GT */
0x15, /* [763'0x2fb] ISZERO */
0x15, /* [764'0x2fc] ISZERO */
0x61, /* [765'0x2fd] PUSH2 */
0x03,0x02,/* constant data */
0x57, /* [768'0x300] JUMPI */
0xfe, /* [769'0x301] INVALID */
0x5b, /* [770'0x302] JUMPDEST */
0x34, /* [771'0x303] CALLVALUE */
0x60, /* [772'0x304] PUSH1 */
0x01,/* constant data */
0x60, /* [774'0x306] PUSH1 */
0x00,/* constant data */
0x33, /* [776'0x308] CALLER */
0x73, /* [777'0x309] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [798'0x31e] AND */
0x73, /* [799'0x31f] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [820'0x334] AND */
0x81, /* [821'0x335] DUP2 */
0x52, /* [822'0x336] MSTORE */
0x60, /* [823'0x337] PUSH1 */
0x20,/* constant data */
0x01, /* [825'0x339] ADD */
0x90, /* [826'0x33a] SWAP1 */
0x81, /* [827'0x33b] DUP2 */
0x52, /* [828'0x33c] MSTORE */
0x60, /* [829'0x33d] PUSH1 */
0x20,/* constant data */
0x01, /* [831'0x33f] ADD */
0x60, /* [832'0x340] PUSH1 */
0x00,/* constant data */
0x20, /* [834'0x342] SHA3 */
0x60, /* [835'0x343] PUSH1 */
0x00,/* constant data */
0x82, /* [837'0x345] DUP3 */
0x82, /* [838'0x346] DUP3 */
0x54, /* [839'0x347] SLOAD */
0x01, /* [840'0x348] ADD */
0x92, /* [841'0x349] SWAP3 */
0x50, /* [842'0x34a] POP */
0x50, /* [843'0x34b] POP */
0x81, /* [844'0x34c] DUP2 */
0x90, /* [845'0x34d] SWAP1 */
0x55, /* [846'0x34e] SSTORE */
0x50, /* [847'0x34f] POP */
0x56, /* [848'0x350] JUMP */
0x00, /* [849'0x351] STOP */
0xa1, /* [850'0x352] LOG1 */
0x65, /* [851'0x353] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [858'0x35a] SHA3 */
0xae, /* [859'0x35b] INVALID' byte */
0x48, /* [860'0x35c] INVALID' byte */
0xb7, /* [861'0x35d] INVALID' byte */
0x66, /* [862'0x35e] PUSH7 */
0x60,0x8b,0xd9,0xe6,0x2b,0xf1,0x34,/* constant data */
0xf2, /* [870'0x366] CALLCODE */
0x54, /* [871'0x367] SLOAD */
0xfc, /* [872'0x368] INVALID' byte */
0xf2, /* [873'0x369] CALLCODE */
0x24, /* [874'0x36a] INVALID' byte */
0x45, /* [875'0x36b] GASLIMIT */
0x41, /* [876'0x36c] COINBASE */
0x25, /* [877'0x36d] INVALID' byte */
0xff, /* [878'0x36e] SELFDESTRUCT */
0x80, /* [879'0x36f] DUP1 */
0x25, /* [880'0x370] INVALID' byte */
0x36, /* [881'0x371] CALLDATASIZE */
0xf8, /* [882'0x372] INVALID' byte */
0x9b, /* [883'0x373] SWAP12 */
0x8d, /* [884'0x374] DUP14 */
0x5c, /* [885'0x375] INVALID' byte */
0x2b, /* [886'0x376] INVALID' byte */
0xb9, /* [887'0x377] INVALID' byte */
0xd3, /* [888'0x378] INVALID' byte */
0xc7, /* [889'0x379] INVALID' byte */
0x3a, /* [890'0x37a] GASPRICE */
0x00, /* [891'0x37b] STOP */
0x29, /* [892'0x37c] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_wallet_04_confused_sign::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_wallet_04_confused_sign::_contract_name = "wallet_04_confused_sign";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_wallet_04_confused_sign> eevm::EVM2CPP_wallet_04_confused_sign::reg{};
const std::string& eevm::EVM2CPP_wallet_04_confused_sign::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_57 = 0x57_u256;
constexpr uint256_t c_5c = 0x5c_u256;
constexpr uint256_t c_68 = 0x68_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_87 = 0x87_u256;
constexpr uint256_t c_89 = 0x89_u256;
constexpr uint256_t c_95 = 0x95_u256;
constexpr uint256_t c_ca = 0xca_u256;
constexpr uint256_t c_cc = 0xcc_u256;
constexpr uint256_t c_d4 = 0xd4_u256;
constexpr uint256_t c_d6 = 0xd6_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_124 = 0x124_u256;
constexpr uint256_t c_16a = 0x16a_u256;
constexpr uint256_t c_1bb = 0x1bb_u256;
constexpr uint256_t c_216 = 0x216_u256;
constexpr uint256_t c_273 = 0x273_u256;
constexpr uint256_t c_277 = 0x277_u256;
constexpr uint256_t c_302 = 0x302_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_2e1a7d4d = 0x2e1a7d4d_u256;
constexpr uint256_t c_4ddaf8f2 = 0x4ddaf8f2_u256;
constexpr uint256_t c_d0e30db0 = 0xd0e30db0_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_32 = 0x627a7a723058_u256;
constexpr uint256_t g_33 = 0x608bd9e62bf134_u256;
constexpr uint256_t g_20 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_wallet_04_confused_sign::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_57,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_68,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_87,
&&__invld,
&&pc_89,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_95,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ca,
&&__invld,
&&pc_cc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d4,
&&__invld,
&&pc_d6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_124,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_16a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1bb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_216,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_273,
&&__invld,
&&__invld,
&&__invld,
&&pc_277,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_302,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [87] */

/* JUMPI */
/* op_0 = Constant((6, 87)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_57;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [773487949] */

/* EQ */
/* op_0 = Constant((8, 773487949)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_2e1a7d4d, v_6_0);


/* PUSH2 */
/* val = [92] */

/* JUMPI */
/* op_0 = Constant((10, 92)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_5c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1306196210] */

/* EQ */
/* op_0 = Constant((1, 1306196210)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_4ddaf8f2, s_0_0);


/* PUSH2 */
/* val = [137] */

/* JUMPI */
/* op_0 = Constant((3, 137)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_89;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3504541104] */

/* EQ */
/* op_0 = Constant((1, 3504541104)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d0e30db0, s_0_0);


/* PUSH2 */
/* val = [204] */

/* JUMPI */
/* op_0 = Constant((3, 204)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_cc;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_5c:
{ /* <============ */ 
on_bb_start(92);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [104] */

/* JUMPI */
/* op_0 = Constant((4, 104)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_68;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_64:
{ /* <============ */ 
on_bb_start(100);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_68:
{ /* <============ */ 
on_bb_start(104);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [135] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [214] */

/* JUMP */
/* op_0 = Constant((23, 214)) */
/* BB finalizer */
ctxt->s.set(0, c_87);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);

goto pc_d6;


}pc_87:
{ /* <============ */ 
on_bb_start(135);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_89:
{ /* <============ */ 
on_bb_start(137);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [149] */

/* JUMPI */
/* op_0 = Constant((4, 149)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_95;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_91:
{ /* <============ */ 
on_bb_start(145);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_95:
{ /* <============ */ 
on_bb_start(149);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [202] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_20, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [443] */

/* JUMP */
/* op_0 = Constant((25, 443)) */
/* BB finalizer */
ctxt->s.set(0, c_ca);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_1bb;


}pc_ca:
{ /* <============ */ 
on_bb_start(202);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_cc:
{ /* <============ */ 
on_bb_start(204);
/* JUMPDEST */

/* PUSH2 */
/* val = [212] */

/* PUSH2 */
/* val = [631] */

/* JUMP */
/* op_0 = Constant((2, 631)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 212))*/
ctxt->s.push(c_d4);

goto pc_277;


}pc_d4:
{ /* <============ */ 
on_bb_start(212);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d6:
{ /* <============ */ 
on_bb_start(214);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_20, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_20, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = sload_v(v_18_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* LT */
/* op_0 = StackRef((0, 0)) */
/* op_1 = InstructionRef((19, 0)) */
TRACE_COMP(eevm::Opcode::LT, s_0_0, v_19_0);
const uint256_t v_21_0 = lt_v(s_0_0, v_19_0);


/* ISZERO */
/* op_0 = InstructionRef((21, 0)) */
const uint256_t v_22_0 = iszero_v(v_21_0);


/* ISZERO */
/* op_0 = InstructionRef((22, 0)) */
const uint256_t v_23_0 = iszero_v(v_22_0);


/* ISZERO */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_24_0 = iszero_v(v_23_0);


/* PUSH2 */
/* val = [292] */

/* JUMPI */
/* op_0 = Constant((25, 292)) */
/* op_1 = InstructionRef((24, 0)) */
if ( v_24_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_124;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_120:
{ /* <============ */ 
on_bb_start(288);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_124:
{ /* <============ */ 
on_bb_start(292);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_20, v_1_0);


/* PUSH2 */
/* val = [2300] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_8_0 = iszero_v(s_0_0);


/* MUL */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_9_0 = mul_v(v_8_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((11, 64)) */
const uint256_t v_12_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_12_0, v_15_0);


/* DUP2 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((9, 0)) */

/* CALL */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((15, 0)) */
/* op_4 = InstructionRef((18, 0)) */
/* op_5 = InstructionRef((15, 0)) */
/* op_6 = Constant((13, 0)) */
const uint256_t v_23_0 = call_v(v_9_0, v_3_0, s_0_0, v_15_0, v_18_0, v_15_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((23, 0)) */
const uint256_t v_29_0 = iszero_v(v_23_0);


/* DUP1 */
/* op_0 = InstructionRef((29, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = iszero_v(v_29_0);


/* PUSH2 */
/* val = [362] */

/* JUMPI */
/* op_0 = Constant((32, 362)) */
/* op_1 = InstructionRef((31, 0)) */
if ( v_31_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
 
 goto pc_16a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((29, 0))*/
ctxt->s.push(v_29_0);
}pc_161:
{ /* <============ */ 
on_bb_start(353);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_16a:
{ /* <============ */ 
on_bb_start(362);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* DUP1 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_5_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_20, v_5_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((8, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_9_0 = and_v(g_20, v_7_0);


/* DUP2 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((4, 0)) */
/* op_1 = InstructionRef((9, 0)) */
mstore_v(c_0, v_9_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((4, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 1)) */

/* DUP2 */
/* op_0 = Constant((13, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((13, 32)) */
/* op_1 = Constant((3, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((17, 32)) */
/* op_1 = Constant((13, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((19, 0)) */
/* op_1 = Constant((18, 64)) */
const uint256_t v_20_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* DUP3 */
/* op_0 = InstructionRef((20, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((20, 0)) */
const uint256_t v_24_0 = sload_v(v_20_0);


/* SUB */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_25_0 = sub_v(v_24_0, s_0_1);


/* SWAP3 */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((25, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((25, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((25, 0)) */
sstore_v(v_20_0, v_25_0);


/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_1bb:
{ /* <============ */ 
on_bb_start(443);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_20, v_1_0);


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((4, 0)) */
/* op_1 = Constant((4, 0)) */

/* SLOAD */
/* op_0 = Constant((4, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((4, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((9, 256)) */
/* op_1 = Constant((4, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((10, 1)) */
/* op_1 = InstructionRef((7, 0)) */

/* DIV */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((10, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_14_0 = and_v(g_20, v_7_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_20, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((3, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_3_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [534] */

/* JUMPI */
/* op_0 = Constant((20, 534)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_216;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_212:
{ /* <============ */ 
on_bb_start(530);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_216:
{ /* <============ */ 
on_bb_start(534);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_3_0 = and_v(g_20, s_0_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_5_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_20, v_5_0);


/* BALANCE */
/* op_0 = InstructionRef((7, 0)) */
const uint256_t v_8_0 = balance_v(v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((8, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((8, 0)) */
const uint256_t v_11_0 = iszero_v(v_8_0);


/* MUL */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_12_0 = mul_v(v_11_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((17, 64)) */
const uint256_t v_18_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((15, 0)) */

/* SUB */
/* op_0 = InstructionRef((15, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_21_0 = sub_v(v_15_0, v_18_0);


/* DUP2 */
/* op_0 = InstructionRef((18, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((8, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((12, 0)) */

/* CALL */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = InstructionRef((8, 0)) */
/* op_3 = InstructionRef((18, 0)) */
/* op_4 = InstructionRef((21, 0)) */
/* op_5 = InstructionRef((18, 0)) */
/* op_6 = Constant((16, 0)) */
const uint256_t v_26_0 = call_v(v_12_0, v_3_0, v_8_0, v_18_0, v_21_0, v_18_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* ISZERO */
/* op_0 = InstructionRef((26, 0)) */
const uint256_t v_32_0 = iszero_v(v_26_0);


/* DUP1 */
/* op_0 = InstructionRef((32, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((32, 0)) */
const uint256_t v_34_0 = iszero_v(v_32_0);


/* PUSH2 */
/* val = [627] */

/* JUMPI */
/* op_0 = Constant((35, 627)) */
/* op_1 = InstructionRef((34, 0)) */
if ( v_34_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
 
 goto pc_273;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((32, 0))*/
ctxt->s.push(v_32_0);
}pc_26a:
{ /* <============ */ 
on_bb_start(618);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_273:
{ /* <============ */ 
on_bb_start(627);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_277:
{ /* <============ */ 
on_bb_start(631);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_20, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_20, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = sload_v(v_18_0);


/* CALLVALUE */
const uint256_t v_20_0 = callvalue_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_23_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((24, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((23, 0)) */
const uint256_t v_25_0 = and_v(g_20, v_23_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((26, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((25, 0)) */
const uint256_t v_27_0 = and_v(g_20, v_25_0);


/* DUP2 */
/* op_0 = Constant((22, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((22, 0)) */
/* op_1 = InstructionRef((27, 0)) */
mstore_v(c_0, v_27_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((30, 32)) */
/* op_1 = Constant((22, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((31, 32)) */
/* op_1 = Constant((21, 1)) */

/* DUP2 */
/* op_0 = Constant((31, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((31, 32)) */
/* op_1 = Constant((21, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((35, 32)) */
/* op_1 = Constant((31, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((37, 0)) */
/* op_1 = Constant((36, 64)) */
const uint256_t v_38_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((38, 0)) */
const uint256_t v_39_0 = sload_v(v_38_0);


/* ADD */
/* op_0 = InstructionRef((39, 0)) */
/* op_1 = InstructionRef((20, 0)) */
const uint256_t v_40_0 = add_v(v_39_0, v_20_0);


/* GT */
/* op_0 = InstructionRef((40, 0)) */
/* op_1 = InstructionRef((19, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_40_0, v_19_0);
const uint256_t v_41_0 = gt_v(v_40_0, v_19_0);


/* ISZERO */
/* op_0 = InstructionRef((41, 0)) */
const uint256_t v_42_0 = iszero_v(v_41_0);


/* ISZERO */
/* op_0 = InstructionRef((42, 0)) */
const uint256_t v_43_0 = iszero_v(v_42_0);


/* PUSH2 */
/* val = [770] */

/* JUMPI */
/* op_0 = Constant((44, 770)) */
/* op_1 = InstructionRef((43, 0)) */
if ( v_43_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_302;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_301:
{ /* <============ */ 
on_bb_start(769);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_302:
{ /* <============ */ 
on_bb_start(770);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_4_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(g_20, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_20, v_6_0);


/* DUP2 */
/* op_0 = Constant((3, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((3, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(c_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((3, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 1)) */

/* DUP2 */
/* op_0 = Constant((12, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((12, 32)) */
/* op_1 = Constant((2, 1)) */
mstore_v(c_20, c_1);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((12, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((18, 0)) */
/* op_1 = Constant((17, 64)) */
const uint256_t v_19_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = InstructionRef((1, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((19, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_23_0 = sload_v(v_19_0);


/* ADD */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_24_0 = add_v(v_23_0, v_1_0);


/* SWAP3 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((1, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((24, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((19, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = InstructionRef((24, 0)) */
sstore_v(v_19_0, v_24_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_351:
{ /* <============ */ 
on_bb_start(849);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_352:
{ /* <============ */ 
on_bb_start(850);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_32, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x352 (inst offset 3; byte 0xae)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_35c:
{ /* <============ */ 
on_bb_start(860);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x35c (inst offset 0; byte 0x48)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_35d:
{ /* <============ */ 
on_bb_start(861);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x35d (inst offset 0; byte 0xb7)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_35e:
{ /* <============ */ 
on_bb_start(862);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* PUSH7 */
/* val = [27175365750026548] */

/* CALLCODE */
/* op_0 = Constant((0, 27175365750026548)) */
/* op_1 = StackRef((0, 0)) */
/* op_2 = StackRef((0, 1)) */
/* op_3 = StackRef((0, 2)) */
/* op_4 = StackRef((0, 3)) */
/* op_5 = StackRef((0, 4)) */
/* op_6 = StackRef((0, 5)) */
const uint256_t v_1_0 = callcode_v(g_33, s_0_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5);
if (ctxt->error) goto exit_label;


/* SLOAD */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_2_0 = sload_v(v_1_0);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x35e (inst offset 3; byte 0xfc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_369:
{ /* <============ */ 
on_bb_start(873);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* CALLCODE */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
/* op_4 = StackRef((0, 4)) */
/* op_5 = StackRef((0, 5)) */
/* op_6 = StackRef((0, 6)) */
const uint256_t v_0_0 = callcode_v(s_0_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5, s_0_6);
if (ctxt->error) goto exit_label;


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x369 (inst offset 1; byte 0x24)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_36b:
{ /* <============ */ 
on_bb_start(875);
/* GASLIMIT */
const uint256_t v_0_0 = gaslimit_v();


/* COINBASE */
const uint256_t v_1_0 = coinbase_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x36b (inst offset 2; byte 0x25)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_36e:
{ /* <============ */ 
on_bb_start(878);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* SELFDESTRUCT */
/* op_0 = StackRef((0, 0)) */
selfdestruct_v(s_0_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_36f:
{ /* <============ */ 
on_bb_start(879);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x36f (inst offset 1; byte 0x25)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_371:
{ /* <============ */ 
on_bb_start(881);
/* CALLDATASIZE */
const uint256_t v_0_0 = calldatasize_v();


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x371 (inst offset 1; byte 0xf8)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_373:
{ /* <============ */ 
on_bb_start(883);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_12 = ctxt->s.peek(12);
const uint256_t s_0_13 = ctxt->s.peek(13);
/* SWAP12 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 12)) */

/* DUP14 */
/* op_0 = StackRef((0, 13)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x373 (inst offset 2; byte 0x5c)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_376:
{ /* <============ */ 
on_bb_start(886);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x376 (inst offset 0; byte 0x2b)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_377:
{ /* <============ */ 
on_bb_start(887);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x377 (inst offset 0; byte 0xb9)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_378:
{ /* <============ */ 
on_bb_start(888);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x378 (inst offset 0; byte 0xd3)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_379:
{ /* <============ */ 
on_bb_start(889);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x379 (inst offset 0; byte 0xc7)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_37a:
{ /* <============ */ 
on_bb_start(890);
/* GASPRICE */
const uint256_t v_0_0 = gasprice_v();


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((0, 0))*/
ctxt->s.push(v_0_0);
}pc_37c:
{ /* <============ */ 
on_bb_start(892);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x37c (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x3,0x7d,0x80,0x61,0x0,0x60,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x57,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x2e,0x1a,0x7d,0x4d,0x14,0x61,0x0,0x5c,0x57,0x80,0x63,0x4d,0xda,0xf8,0xf2,0x14,0x61,0x0,0x89,0x57,0x80,0x63,0xd0,0xe3,0xd,0xb0,0x14,0x61,0x0,0xcc,0x57,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x34,0x80,0x15,0x61,0x0,0x68,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x87,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x0,0xd6,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x95,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xca,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xbb,0x56,0x5b,0x0,0x5b,0x61,0x0,0xd4,0x61,0x2,0x77,0x56,0x5b,0x0,0x5b,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x81,0x10,0x15,0x15,0x15,0x61,0x1,0x24,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x82,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x1,0x6a,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x80,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x3,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x50,0x56,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x2,0x16,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x2,0x73,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x56,0x5b,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x34,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x1,0x11,0x15,0x15,0x61,0x3,0x2,0x57,0xfe,0x5b,0x34,0x60,0x1,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x1,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0xae,0x48,0xb7,0x66,0x60,0x8b,0xd9,0xe6,0x2b,0xf1,0x34,0xf2,0x54,0xfc,0xf2,0x24,0x45,0x41,0x25,0xff,0x80,0x25,0x36,0xf8,0x9b,0x8d,0x5c,0x2b,0xb9,0xd3,0xc7,0x3a,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_wallet_04_confused_sign::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_wallet_04_confused_sign::constructor_args() {
    return _constructor_args;
}
