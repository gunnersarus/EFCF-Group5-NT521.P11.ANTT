[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(1)] ✔️
[Trimmer Stage: Transactions(0)] ❌
[Trimmer Stage: TransactionHeader(0, BlockAdvance(0))] ✔️
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(0, 7)] ❌
[Trimmer Stage: Sender(0, 6)] ❌
[Trimmer Stage: Sender(0, 5)] ✔️
[Trimmer Stage: Sender(0, 4)] ✔️
[Trimmer Stage: Sender(0, 3)] ❌
[Trimmer Stage: Sender(0, 2)] ❌
[Trimmer Stage: Sender(0, 1)] ❌
[Trimmer Stage: Sender(0, 0)] ❌
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(100000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10000))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ❌
[Trimmer Stage: BlockHeader(InitialEther(1))] ❌
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ we try sorting the transaction list ]
reduced testcases from 108 to 92 bytes (by 15 %) edit distance 20
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1073741824

TX[0] with tx_sender[202]; tx_receiver[0]; call_value: 0x0; length: 36; block+=1; #returns=0
  func: withdraw(uint256) (0x2e1a7d4d)
  input: { uint(5),  }
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 0; block+=0; #returns=0
  input: 
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 5

TX[0] with tx_sender[4]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=0
  func: withdraw(uint256) (0x2e1a7d4d)
  input: { uint(5),  }
