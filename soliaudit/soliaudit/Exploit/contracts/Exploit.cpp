// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/Exploit.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x57,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x41,0xc0,0xe1,0xb5,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x61,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x4a,0x4a,0x2a,0x97,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x78,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0x82,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x5b, /* [87'0x57] JUMPDEST */
0x61, /* [88'0x58] PUSH2 */
0x00,0x5f,/* constant data */
0x61, /* [91'0x5b] PUSH2 */
0x00,0xd9,/* constant data */
0x56, /* [94'0x5e] JUMP */
0x5b, /* [95'0x5f] JUMPDEST */
0x00, /* [96'0x60] STOP */
0x5b, /* [97'0x61] JUMPDEST */
0x34, /* [98'0x62] CALLVALUE */
0x80, /* [99'0x63] DUP1 */
0x15, /* [100'0x64] ISZERO */
0x61, /* [101'0x65] PUSH2 */
0x00,0x6d,/* constant data */
0x57, /* [104'0x68] JUMPI */
0x60, /* [105'0x69] PUSH1 */
0x00,/* constant data */
0x80, /* [107'0x6b] DUP1 */
0xfd, /* [108'0x6c] REVERT */
0x5b, /* [109'0x6d] JUMPDEST */
0x50, /* [110'0x6e] POP */
0x61, /* [111'0x6f] PUSH2 */
0x00,0x76,/* constant data */
0x61, /* [114'0x72] PUSH2 */
0x01,0xfd,/* constant data */
0x56, /* [117'0x75] JUMP */
0x5b, /* [118'0x76] JUMPDEST */
0x00, /* [119'0x77] STOP */
0x5b, /* [120'0x78] JUMPDEST */
0x61, /* [121'0x79] PUSH2 */
0x00,0x80,/* constant data */
0x61, /* [124'0x7c] PUSH2 */
0x00,0xd9,/* constant data */
0x56, /* [127'0x7f] JUMP */
0x5b, /* [128'0x80] JUMPDEST */
0x00, /* [129'0x81] STOP */
0x5b, /* [130'0x82] JUMPDEST */
0x34, /* [131'0x83] CALLVALUE */
0x80, /* [132'0x84] DUP1 */
0x15, /* [133'0x85] ISZERO */
0x61, /* [134'0x86] PUSH2 */
0x00,0x8e,/* constant data */
0x57, /* [137'0x89] JUMPI */
0x60, /* [138'0x8a] PUSH1 */
0x00,/* constant data */
0x80, /* [140'0x8c] DUP1 */
0xfd, /* [141'0x8d] REVERT */
0x5b, /* [142'0x8e] JUMPDEST */
0x50, /* [143'0x8f] POP */
0x61, /* [144'0x90] PUSH2 */
0x00,0x97,/* constant data */
0x61, /* [147'0x93] PUSH2 */
0x02,0x92,/* constant data */
0x56, /* [150'0x96] JUMP */
0x5b, /* [151'0x97] JUMPDEST */
0x60, /* [152'0x98] PUSH1 */
0x40,/* constant data */
0x51, /* [154'0x9a] MLOAD */
0x80, /* [155'0x9b] DUP1 */
0x82, /* [156'0x9c] DUP3 */
0x73, /* [157'0x9d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [178'0xb2] AND */
0x73, /* [179'0xb3] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [200'0xc8] AND */
0x81, /* [201'0xc9] DUP2 */
0x52, /* [202'0xca] MSTORE */
0x60, /* [203'0xcb] PUSH1 */
0x20,/* constant data */
0x01, /* [205'0xcd] ADD */
0x91, /* [206'0xce] SWAP2 */
0x50, /* [207'0xcf] POP */
0x50, /* [208'0xd0] POP */
0x60, /* [209'0xd1] PUSH1 */
0x40,/* constant data */
0x51, /* [211'0xd3] MLOAD */
0x80, /* [212'0xd4] DUP1 */
0x91, /* [213'0xd5] SWAP2 */
0x03, /* [214'0xd6] SUB */
0x90, /* [215'0xd7] SWAP1 */
0xf3, /* [216'0xd8] RETURN */
0x5b, /* [217'0xd9] JUMPDEST */
0x67, /* [218'0xda] PUSH8 */
0x01,0x63,0x45,0x78,0x5d,0x8a,0x00,0x00,/* constant data */
0x34, /* [227'0xe3] CALLVALUE */
0x10, /* [228'0xe4] LT */
0x15, /* [229'0xe5] ISZERO */
0x15, /* [230'0xe6] ISZERO */
0x15, /* [231'0xe7] ISZERO */
0x61, /* [232'0xe8] PUSH2 */
0x00,0xf0,/* constant data */
0x57, /* [235'0xeb] JUMPI */
0x60, /* [236'0xec] PUSH1 */
0x00,/* constant data */
0x80, /* [238'0xee] DUP1 */
0xfd, /* [239'0xef] REVERT */
0x5b, /* [240'0xf0] JUMPDEST */
0x60, /* [241'0xf1] PUSH1 */
0x01,/* constant data */
0x60, /* [243'0xf3] PUSH1 */
0x00,/* constant data */
0x90, /* [245'0xf5] SWAP1 */
0x54, /* [246'0xf6] SLOAD */
0x90, /* [247'0xf7] SWAP1 */
0x61, /* [248'0xf8] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [251'0xfb] EXP */
0x90, /* [252'0xfc] SWAP1 */
0x04, /* [253'0xfd] DIV */
0x73, /* [254'0xfe] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [275'0x113] AND */
0x73, /* [276'0x114] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [297'0x129] AND */
0x63, /* [298'0x12a] PUSH4 */
0x0f,0x2c,0x93,0x29,/* constant data */
0x60, /* [303'0x12f] PUSH1 */
0x01,/* constant data */
0x33, /* [305'0x131] CALLER */
0x33, /* [306'0x132] CALLER */
0x60, /* [307'0x133] PUSH1 */
0x40,/* constant data */
0x51, /* [309'0x135] MLOAD */
0x84, /* [310'0x136] DUP5 */
0x63, /* [311'0x137] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [316'0x13c] AND */
0x7c, /* [317'0x13d] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x02, /* [347'0x15b] MUL */
0x81, /* [348'0x15c] DUP2 */
0x52, /* [349'0x15d] MSTORE */
0x60, /* [350'0x15e] PUSH1 */
0x04,/* constant data */
0x01, /* [352'0x160] ADD */
0x80, /* [353'0x161] DUP1 */
0x83, /* [354'0x162] DUP4 */
0x73, /* [355'0x163] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [376'0x178] AND */
0x73, /* [377'0x179] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [398'0x18e] AND */
0x81, /* [399'0x18f] DUP2 */
0x52, /* [400'0x190] MSTORE */
0x60, /* [401'0x191] PUSH1 */
0x20,/* constant data */
0x01, /* [403'0x193] ADD */
0x82, /* [404'0x194] DUP3 */
0x73, /* [405'0x195] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [426'0x1aa] AND */
0x73, /* [427'0x1ab] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [448'0x1c0] AND */
0x81, /* [449'0x1c1] DUP2 */
0x52, /* [450'0x1c2] MSTORE */
0x60, /* [451'0x1c3] PUSH1 */
0x20,/* constant data */
0x01, /* [453'0x1c5] ADD */
0x92, /* [454'0x1c6] SWAP3 */
0x50, /* [455'0x1c7] POP */
0x50, /* [456'0x1c8] POP */
0x50, /* [457'0x1c9] POP */
0x60, /* [458'0x1ca] PUSH1 */
0x00,/* constant data */
0x60, /* [460'0x1cc] PUSH1 */
0x40,/* constant data */
0x51, /* [462'0x1ce] MLOAD */
0x80, /* [463'0x1cf] DUP1 */
0x83, /* [464'0x1d0] DUP4 */
0x03, /* [465'0x1d1] SUB */
0x81, /* [466'0x1d2] DUP2 */
0x85, /* [467'0x1d3] DUP6 */
0x88, /* [468'0x1d4] DUP9 */
0x80, /* [469'0x1d5] DUP1 */
0x3b, /* [470'0x1d6] EXTCODESIZE */
0x15, /* [471'0x1d7] ISZERO */
0x80, /* [472'0x1d8] DUP1 */
0x15, /* [473'0x1d9] ISZERO */
0x61, /* [474'0x1da] PUSH2 */
0x01,0xe2,/* constant data */
0x57, /* [477'0x1dd] JUMPI */
0x60, /* [478'0x1de] PUSH1 */
0x00,/* constant data */
0x80, /* [480'0x1e0] DUP1 */
0xfd, /* [481'0x1e1] REVERT */
0x5b, /* [482'0x1e2] JUMPDEST */
0x50, /* [483'0x1e3] POP */
0x5a, /* [484'0x1e4] GAS */
0xf1, /* [485'0x1e5] CALL */
0x15, /* [486'0x1e6] ISZERO */
0x80, /* [487'0x1e7] DUP1 */
0x15, /* [488'0x1e8] ISZERO */
0x61, /* [489'0x1e9] PUSH2 */
0x01,0xf6,/* constant data */
0x57, /* [492'0x1ec] JUMPI */
0x3d, /* [493'0x1ed] RETURNDATASIZE */
0x60, /* [494'0x1ee] PUSH1 */
0x00,/* constant data */
0x80, /* [496'0x1f0] DUP1 */
0x3e, /* [497'0x1f1] RETURNDATACOPY */
0x3d, /* [498'0x1f2] RETURNDATASIZE */
0x60, /* [499'0x1f3] PUSH1 */
0x00,/* constant data */
0xfd, /* [501'0x1f5] REVERT */
0x5b, /* [502'0x1f6] JUMPDEST */
0x50, /* [503'0x1f7] POP */
0x50, /* [504'0x1f8] POP */
0x50, /* [505'0x1f9] POP */
0x50, /* [506'0x1fa] POP */
0x50, /* [507'0x1fb] POP */
0x56, /* [508'0x1fc] JUMP */
0x5b, /* [509'0x1fd] JUMPDEST */
0x33, /* [510'0x1fe] CALLER */
0x73, /* [511'0x1ff] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [532'0x214] AND */
0x60, /* [533'0x215] PUSH1 */
0x00,/* constant data */
0x80, /* [535'0x217] DUP1 */
0x90, /* [536'0x218] SWAP1 */
0x54, /* [537'0x219] SLOAD */
0x90, /* [538'0x21a] SWAP1 */
0x61, /* [539'0x21b] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [542'0x21e] EXP */
0x90, /* [543'0x21f] SWAP1 */
0x04, /* [544'0x220] DIV */
0x73, /* [545'0x221] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [566'0x236] AND */
0x73, /* [567'0x237] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [588'0x24c] AND */
0x14, /* [589'0x24d] EQ */
0x15, /* [590'0x24e] ISZERO */
0x15, /* [591'0x24f] ISZERO */
0x61, /* [592'0x250] PUSH2 */
0x02,0x58,/* constant data */
0x57, /* [595'0x253] JUMPI */
0x60, /* [596'0x254] PUSH1 */
0x00,/* constant data */
0x80, /* [598'0x256] DUP1 */
0xfd, /* [599'0x257] REVERT */
0x5b, /* [600'0x258] JUMPDEST */
0x60, /* [601'0x259] PUSH1 */
0x00,/* constant data */
0x80, /* [603'0x25b] DUP1 */
0x90, /* [604'0x25c] SWAP1 */
0x54, /* [605'0x25d] SLOAD */
0x90, /* [606'0x25e] SWAP1 */
0x61, /* [607'0x25f] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [610'0x262] EXP */
0x90, /* [611'0x263] SWAP1 */
0x04, /* [612'0x264] DIV */
0x73, /* [613'0x265] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [634'0x27a] AND */
0x73, /* [635'0x27b] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [656'0x290] AND */
0xff, /* [657'0x291] SELFDESTRUCT */
0x5b, /* [658'0x292] JUMPDEST */
0x60, /* [659'0x293] PUSH1 */
0x00,/* constant data */
0x80, /* [661'0x295] DUP1 */
0x90, /* [662'0x296] SWAP1 */
0x54, /* [663'0x297] SLOAD */
0x90, /* [664'0x298] SWAP1 */
0x61, /* [665'0x299] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [668'0x29c] EXP */
0x90, /* [669'0x29d] SWAP1 */
0x04, /* [670'0x29e] DIV */
0x73, /* [671'0x29f] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [692'0x2b4] AND */
0x81, /* [693'0x2b5] DUP2 */
0x56, /* [694'0x2b6] JUMP */
0x00, /* [695'0x2b7] STOP */
0xa1, /* [696'0x2b8] LOG1 */
0x65, /* [697'0x2b9] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [704'0x2c0] SHA3 */
0x89, /* [705'0x2c1] DUP10 */
0x04, /* [706'0x2c2] DIV */
0xcc, /* [707'0x2c3] INVALID' byte */
0x17, /* [708'0x2c4] OR */
0xd6, /* [709'0x2c5] INVALID' byte */
0x74, /* [710'0x2c6] PUSH21 */
0x9e,0xd3,0xed,0x7e,0x51,0x93,0x65,0x6b,0xc6,0x83,0x39,0xfd,0x92,0xd2,0x39,0xcd,0x67,0xb8,0x15,0x42,0x4c,/* constant data */
0xa5, /* [732'0x2dc] INVALID' byte */
0x92, /* [733'0x2dd] SWAP3 */
0xdc, /* [734'0x2de] INVALID' byte */
0xc5, /* [735'0x2df] INVALID' byte */
0x95, /* [736'0x2e0] SWAP6 */
0x00, /* [737'0x2e1] STOP */
0x29, /* [738'0x2e2] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_Exploit::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_Exploit::_contract_name = "Exploit";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_Exploit> eevm::EVM2CPP_Exploit::reg{};
const std::string& eevm::EVM2CPP_Exploit::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_57 = 0x57_u256;
constexpr uint256_t c_5f = 0x5f_u256;
constexpr uint256_t c_61 = 0x61_u256;
constexpr uint256_t c_6d = 0x6d_u256;
constexpr uint256_t c_76 = 0x76_u256;
constexpr uint256_t c_78 = 0x78_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_82 = 0x82_u256;
constexpr uint256_t c_8e = 0x8e_u256;
constexpr uint256_t c_97 = 0x97_u256;
constexpr uint256_t c_d9 = 0xd9_u256;
constexpr uint256_t c_f0 = 0xf0_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_1e2 = 0x1e2_u256;
constexpr uint256_t c_1f6 = 0x1f6_u256;
constexpr uint256_t c_1fd = 0x1fd_u256;
constexpr uint256_t c_258 = 0x258_u256;
constexpr uint256_t c_292 = 0x292_u256;
constexpr uint256_t c_f2c9329 = 0xf2c9329_u256;
constexpr uint256_t c_41c0e1b5 = 0x41c0e1b5_u256;
constexpr uint256_t c_4a4a2a97 = 0x4a4a2a97_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_32 = 0x627a7a723058_u256;
constexpr uint256_t g_23 = 0x16345785d8a0000_u256;
constexpr uint256_t g_21 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_28 = 0xf2c932900000000000000000000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_Exploit::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_57,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_5f,
&&__invld,
&&pc_61,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_76,
&&__invld,
&&pc_78,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_80,
&&__invld,
&&pc_82,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_8e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_97,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_f0,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1e2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1f6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1fd,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_258,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_292,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [87] */

/* JUMPI */
/* op_0 = Constant((6, 87)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_57;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [1103159733] */

/* EQ */
/* op_0 = Constant((8, 1103159733)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_41c0e1b5, v_6_0);


/* PUSH2 */
/* val = [97] */

/* JUMPI */
/* op_0 = Constant((10, 97)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_61;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1246374551] */

/* EQ */
/* op_0 = Constant((1, 1246374551)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_4a4a2a97, s_0_0);


/* PUSH2 */
/* val = [120] */

/* JUMPI */
/* op_0 = Constant((3, 120)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_78;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((1, 2376452955)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8da5cb5b, s_0_0);


/* PUSH2 */
/* val = [130] */

/* JUMPI */
/* op_0 = Constant((3, 130)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_82;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
/* JUMPDEST */

/* PUSH2 */
/* val = [95] */

/* PUSH2 */
/* val = [217] */

/* JUMP */
/* op_0 = Constant((2, 217)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 95))*/
ctxt->s.push(c_5f);

goto pc_d9;


}pc_5f:
{ /* <============ */ 
on_bb_start(95);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_61:
{ /* <============ */ 
on_bb_start(97);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [109] */

/* JUMPI */
/* op_0 = Constant((4, 109)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_6d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_69:
{ /* <============ */ 
on_bb_start(105);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [118] */

/* PUSH2 */
/* val = [509] */

/* JUMP */
/* op_0 = Constant((3, 509)) */
/* BB finalizer */
ctxt->s.set(0, c_76);
/* no pops at end */
/* no BB returns */

goto pc_1fd;


}pc_76:
{ /* <============ */ 
on_bb_start(118);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_78:
{ /* <============ */ 
on_bb_start(120);
/* JUMPDEST */

/* PUSH2 */
/* val = [128] */

/* PUSH2 */
/* val = [217] */

/* JUMP */
/* op_0 = Constant((2, 217)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 128))*/
ctxt->s.push(c_80);

goto pc_d9;


}pc_80:
{ /* <============ */ 
on_bb_start(128);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_82:
{ /* <============ */ 
on_bb_start(130);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [142] */

/* JUMPI */
/* op_0 = Constant((4, 142)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_8e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_8a:
{ /* <============ */ 
on_bb_start(138);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_8e:
{ /* <============ */ 
on_bb_start(142);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [151] */

/* PUSH2 */
/* val = [658] */

/* JUMP */
/* op_0 = Constant((3, 658)) */
/* BB finalizer */
ctxt->s.set(0, c_97);
/* no pops at end */
/* no BB returns */

goto pc_292;


}pc_97:
{ /* <============ */ 
on_bb_start(151);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_21, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_21, v_6_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(v_2_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((16, 64)) */
const uint256_t v_17_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((17, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_20_0 = sub_v(v_12_0, v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* RETURN */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((20, 0)) */
return_v(v_17_0, v_20_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_d9:
{ /* <============ */ 
on_bb_start(217);
/* JUMPDEST */

/* PUSH8 */
/* val = [100000000000000000] */

/* CALLVALUE */
const uint256_t v_2_0 = callvalue_v();


/* LT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((1, 100000000000000000)) */
const uint256_t v_3_0 = lt_v(v_2_0, g_23);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = iszero_v(v_4_0);


/* ISZERO */
/* op_0 = InstructionRef((5, 0)) */
const uint256_t v_6_0 = iszero_v(v_5_0);


/* PUSH2 */
/* val = [240] */

/* JUMPI */
/* op_0 = Constant((7, 240)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_f0;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_ec:
{ /* <============ */ 
on_bb_start(236);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_f0:
{ /* <============ */ 
on_bb_start(240);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((1, 1)) */

/* SLOAD */
/* op_0 = Constant((1, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_21, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_21, v_11_0);


/* PUSH4 */
/* val = [254579497] */

/* PUSH1 */
/* val = [1] */

/* CALLER */
const uint256_t v_16_0 = caller_v();


/* CALLER */
const uint256_t v_17_0 = caller_v();


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((18, 64)) */
const uint256_t v_19_0 = mload_v(c_40);


/* DUP5 */
/* op_0 = Constant((14, 254579497)) */
/* val = [254579497] */

/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((21, 4294967295)) */
/* op_1 = Constant((14, 254579497)) */
/* val = [254579497] */

/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* MUL */
/* op_0 = Constant((23, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = Constant((22, 254579497)) */
/* val = [6863449661670036302154511983344868806020315387606734404331399102129453924352] */

/* DUP2 */
/* op_0 = InstructionRef((19, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = Constant((24, 6863449661670036302154511983344868806020315387606734404331399102129453924352)) */
mstore_v(v_19_0, g_28);


/* PUSH1 */
/* val = [4] */

/* ADD */
/* op_0 = Constant((27, 4)) */
/* op_1 = InstructionRef((19, 0)) */
const uint256_t v_28_0 = add_v(c_4, v_19_0);


/* DUP1 */
/* op_0 = InstructionRef((28, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((16, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((31, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((16, 0)) */
const uint256_t v_32_0 = and_v(g_21, v_16_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((33, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((32, 0)) */
const uint256_t v_34_0 = and_v(g_21, v_32_0);


/* DUP2 */
/* op_0 = InstructionRef((28, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((28, 0)) */
/* op_1 = InstructionRef((34, 0)) */
mstore_v(v_28_0, v_34_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((37, 32)) */
/* op_1 = InstructionRef((28, 0)) */
const uint256_t v_38_0 = add_v(c_20, v_28_0);


/* DUP3 */
/* op_0 = InstructionRef((17, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((40, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_41_0 = and_v(g_21, v_17_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((42, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((41, 0)) */
const uint256_t v_43_0 = and_v(g_21, v_41_0);


/* DUP2 */
/* op_0 = InstructionRef((38, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((38, 0)) */
/* op_1 = InstructionRef((43, 0)) */
mstore_v(v_38_0, v_43_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((46, 32)) */
/* op_1 = InstructionRef((38, 0)) */
const uint256_t v_47_0 = add_v(c_20, v_38_0);


/* SWAP3 */
/* op_0 = InstructionRef((47, 0)) */
/* op_1 = InstructionRef((16, 0)) */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((53, 64)) */
const uint256_t v_54_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((54, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((47, 0)) */

/* SUB */
/* op_0 = InstructionRef((47, 0)) */
/* op_1 = InstructionRef((54, 0)) */
const uint256_t v_57_0 = sub_v(v_47_0, v_54_0);


/* DUP2 */
/* op_0 = InstructionRef((54, 0)) */

/* DUP6 */
/* op_0 = Constant((15, 1)) */
/* val = [1] */

/* DUP9 */
/* op_0 = InstructionRef((13, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* EXTCODESIZE */
/* op_0 = InstructionRef((13, 0)) */
const uint256_t v_62_0 = extcodesize_v(v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((62, 0)) */
const uint256_t v_63_0 = iszero_v(v_62_0);


/* DUP1 */
/* op_0 = InstructionRef((63, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((63, 0)) */
const uint256_t v_65_0 = iszero_v(v_63_0);


/* PUSH2 */
/* val = [482] */

/* JUMPI */
/* op_0 = Constant((66, 482)) */
/* op_1 = InstructionRef((65, 0)) */
if ( v_65_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 1 Constant((14, 254579497))*/
ctxt->s.push(c_f2c9329);
/* BB return 2 Constant((15, 1))*/
ctxt->s.push(c_1);
/* BB return 3 InstructionRef((47, 0))*/
ctxt->s.push(v_47_0);
/* BB return 4 Constant((52, 0))*/
ctxt->s.push(c_0);
/* BB return 5 InstructionRef((54, 0))*/
ctxt->s.push(v_54_0);
/* BB return 6 InstructionRef((57, 0))*/
ctxt->s.push(v_57_0);
/* BB return 7 InstructionRef((54, 0))*/
ctxt->s.push(v_54_0);
/* BB return 8 Constant((15, 1))*/
ctxt->s.push(c_1);
/* BB return 9 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 10 InstructionRef((63, 0))*/
ctxt->s.push(v_63_0);
 
 goto pc_1e2;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 1 Constant((14, 254579497))*/
ctxt->s.push(c_f2c9329);
/* BB return 2 Constant((15, 1))*/
ctxt->s.push(c_1);
/* BB return 3 InstructionRef((47, 0))*/
ctxt->s.push(v_47_0);
/* BB return 4 Constant((52, 0))*/
ctxt->s.push(c_0);
/* BB return 5 InstructionRef((54, 0))*/
ctxt->s.push(v_54_0);
/* BB return 6 InstructionRef((57, 0))*/
ctxt->s.push(v_57_0);
/* BB return 7 InstructionRef((54, 0))*/
ctxt->s.push(v_54_0);
/* BB return 8 Constant((15, 1))*/
ctxt->s.push(c_1);
/* BB return 9 InstructionRef((13, 0))*/
ctxt->s.push(v_13_0);
/* BB return 10 InstructionRef((63, 0))*/
ctxt->s.push(v_63_0);
}pc_1de:
{ /* <============ */ 
on_bb_start(478);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1e2:
{ /* <============ */ 
on_bb_start(482);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* JUMPDEST */

/* POP */

/* GAS */
const uint256_t v_2_0 = gas_v();


/* CALL */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
/* op_3 = StackRef((0, 3)) */
/* op_4 = StackRef((0, 4)) */
/* op_5 = StackRef((0, 5)) */
/* op_6 = StackRef((0, 6)) */
const uint256_t v_3_0 = call_v(v_2_0, s_0_1, s_0_2, s_0_3, s_0_4, s_0_5, s_0_6);
if (ctxt->error) goto exit_label;


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [502] */

/* JUMPI */
/* op_0 = Constant((7, 502)) */
/* op_1 = InstructionRef((6, 0)) */
if ( v_6_0 ) { 
 /* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
 
 goto pc_1f6;
 
 }

/* BB finalizer */
ctxt->s.set(6, v_4_0);
ctxt->s.pop_drop_n(6);
/* no BB returns */
}pc_1ed:
{ /* <============ */ 
on_bb_start(493);
/* RETURNDATASIZE */
const uint256_t v_0_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* RETURNDATACOPY */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
/* op_2 = InstructionRef((0, 0)) */
returndatacopy_v(c_0, c_0, v_0_0);


/* RETURNDATASIZE */
const uint256_t v_4_0 = returndatasize_v();


/* PUSH1 */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((5, 0)) */
/* op_1 = InstructionRef((4, 0)) */
revert_v(c_0, v_4_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1f6:
{ /* <============ */ 
on_bb_start(502);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* JUMPDEST */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 5)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(6);
/* no BB returns */

JUMP(s_0_5);


}pc_1fd:
{ /* <============ */ 
on_bb_start(509);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_21, v_1_0);


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((4, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((4, 0)) */
/* op_1 = Constant((4, 0)) */

/* SLOAD */
/* op_0 = Constant((4, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((4, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((9, 256)) */
/* op_1 = Constant((4, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((10, 1)) */
/* op_1 = InstructionRef((7, 0)) */

/* DIV */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((10, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_14_0 = and_v(g_21, v_7_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_21, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((3, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_3_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [600] */

/* JUMPI */
/* op_0 = Constant((20, 600)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_258;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_254:
{ /* <============ */ 
on_bb_start(596);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_258:
{ /* <============ */ 
on_bb_start(600);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_21, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_21, v_11_0);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((13, 0)) */
selfdestruct_v(v_13_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_292:
{ /* <============ */ 
on_bb_start(658);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_21, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_2b7:
{ /* <============ */ 
on_bb_start(695);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2b8:
{ /* <============ */ 
on_bb_start(696);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_12 = ctxt->s.peek(12);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_32, s_0_3);


/* DUP10 */
/* op_0 = StackRef((0, 12)) */

/* DIV */
/* op_0 = StackRef((0, 12)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_4_0 = div_v(s_0_12, v_2_0);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2b8 (inst offset 5; byte 0xcc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2c4:
{ /* <============ */ 
on_bb_start(708);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* OR */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = or_v(s_0_0, s_0_1);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2c4 (inst offset 1; byte 0xd6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2c6:
{ /* <============ */ 
on_bb_start(710);
/* PUSH21 */
/* val = [232127152031445365219175744969749212010692732076620] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2c6 (inst offset 1; byte 0xa5)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2dd:
{ /* <============ */ 
on_bb_start(733);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* SWAP3 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 3)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2dd (inst offset 1; byte 0xdc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2df:
{ /* <============ */ 
on_bb_start(735);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2df (inst offset 0; byte 0xc5)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2e0:
{ /* <============ */ 
on_bb_start(736);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* SWAP6 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 6)) */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(0, s_0_6);

ctxt->s.set(6, s_0_0);
/* no pops at end */
/* no BB returns */
}pc_2e2:
{ /* <============ */ 
on_bb_start(738);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x2e2 (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x73,0x5f,0xd,0xc,0x4c,0x15,0x99,0x70,0xfd,0xa5,0xad,0xc9,0x3a,0x6b,0x7f,0x17,0x70,0x6f,0xd3,0x25,0x5c,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x34,0x80,0x15,0x61,0x0,0x65,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x2,0xe3,0x80,0x61,0x0,0xb5,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x57,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x41,0xc0,0xe1,0xb5,0x14,0x61,0x0,0x61,0x57,0x80,0x63,0x4a,0x4a,0x2a,0x97,0x14,0x61,0x0,0x78,0x57,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x0,0x82,0x57,0x5b,0x61,0x0,0x5f,0x61,0x0,0xd9,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x6d,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x76,0x61,0x1,0xfd,0x56,0x5b,0x0,0x5b,0x61,0x0,0x80,0x61,0x0,0xd9,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x8e,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x97,0x61,0x2,0x92,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x67,0x1,0x63,0x45,0x78,0x5d,0x8a,0x0,0x0,0x34,0x10,0x15,0x15,0x15,0x61,0x0,0xf0,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x1,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x63,0xf,0x2c,0x93,0x29,0x60,0x1,0x33,0x33,0x60,0x40,0x51,0x84,0x63,0xff,0xff,0xff,0xff,0x16,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x81,0x52,0x60,0x4,0x1,0x80,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x92,0x50,0x50,0x50,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x80,0x3b,0x15,0x80,0x15,0x61,0x1,0xe2,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x5a,0xf1,0x15,0x80,0x15,0x61,0x1,0xf6,0x57,0x3d,0x60,0x0,0x80,0x3e,0x3d,0x60,0x0,0xfd,0x5b,0x50,0x50,0x50,0x50,0x50,0x56,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x2,0x58,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x89,0x4,0xcc,0x17,0xd6,0x74,0x9e,0xd3,0xed,0x7e,0x51,0x93,0x65,0x6b,0xc6,0x83,0x39,0xfd,0x92,0xd2,0x39,0xcd,0x67,0xb8,0x15,0x42,0x4c,0xa5,0x92,0xdc,0xc5,0x95,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_Exploit::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_Exploit::constructor_args() {
    return _constructor_args;
}
