// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/HelpMeSave.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x6d,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x06,0xb5,0xad,0x18,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x77,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x22,0xd1,0x22,0xa9,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x01,0x14,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x3c,0xcf,0xd6,0x0b,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x01,0x2b,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x01,0x42,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x80, /* [98'0x62] DUP1 */
0x63, /* [99'0x63] PUSH4 */
0xd0,0xe3,0x0d,0xb0,/* constant data */
0x14, /* [104'0x68] EQ */
0x61, /* [105'0x69] PUSH2 */
0x01,0x99,/* constant data */
0x57, /* [108'0x6c] JUMPI */
0x5b, /* [109'0x6d] JUMPDEST */
0x61, /* [110'0x6e] PUSH2 */
0x00,0x75,/* constant data */
0x61, /* [113'0x71] PUSH2 */
0x01,0xa3,/* constant data */
0x56, /* [116'0x74] JUMP */
0x5b, /* [117'0x75] JUMPDEST */
0x00, /* [118'0x76] STOP */
0x5b, /* [119'0x77] JUMPDEST */
0x34, /* [120'0x78] CALLVALUE */
0x80, /* [121'0x79] DUP1 */
0x15, /* [122'0x7a] ISZERO */
0x61, /* [123'0x7b] PUSH2 */
0x00,0x83,/* constant data */
0x57, /* [126'0x7e] JUMPI */
0x60, /* [127'0x7f] PUSH1 */
0x00,/* constant data */
0x80, /* [129'0x81] DUP1 */
0xfd, /* [130'0x82] REVERT */
0x5b, /* [131'0x83] JUMPDEST */
0x50, /* [132'0x84] POP */
0x61, /* [133'0x85] PUSH2 */
0x00,0xfe,/* constant data */
0x60, /* [136'0x88] PUSH1 */
0x04,/* constant data */
0x80, /* [138'0x8a] DUP1 */
0x36, /* [139'0x8b] CALLDATASIZE */
0x03, /* [140'0x8c] SUB */
0x81, /* [141'0x8d] DUP2 */
0x01, /* [142'0x8e] ADD */
0x90, /* [143'0x8f] SWAP1 */
0x80, /* [144'0x90] DUP1 */
0x80, /* [145'0x91] DUP1 */
0x35, /* [146'0x92] CALLDATALOAD */
0x90, /* [147'0x93] SWAP1 */
0x60, /* [148'0x94] PUSH1 */
0x20,/* constant data */
0x01, /* [150'0x96] ADD */
0x90, /* [151'0x97] SWAP1 */
0x82, /* [152'0x98] DUP3 */
0x01, /* [153'0x99] ADD */
0x80, /* [154'0x9a] DUP1 */
0x35, /* [155'0x9b] CALLDATALOAD */
0x90, /* [156'0x9c] SWAP1 */
0x60, /* [157'0x9d] PUSH1 */
0x20,/* constant data */
0x01, /* [159'0x9f] ADD */
0x90, /* [160'0xa0] SWAP1 */
0x80, /* [161'0xa1] DUP1 */
0x80, /* [162'0xa2] DUP1 */
0x60, /* [163'0xa3] PUSH1 */
0x1f,/* constant data */
0x01, /* [165'0xa5] ADD */
0x60, /* [166'0xa6] PUSH1 */
0x20,/* constant data */
0x80, /* [168'0xa8] DUP1 */
0x91, /* [169'0xa9] SWAP2 */
0x04, /* [170'0xaa] DIV */
0x02, /* [171'0xab] MUL */
0x60, /* [172'0xac] PUSH1 */
0x20,/* constant data */
0x01, /* [174'0xae] ADD */
0x60, /* [175'0xaf] PUSH1 */
0x40,/* constant data */
0x51, /* [177'0xb1] MLOAD */
0x90, /* [178'0xb2] SWAP1 */
0x81, /* [179'0xb3] DUP2 */
0x01, /* [180'0xb4] ADD */
0x60, /* [181'0xb5] PUSH1 */
0x40,/* constant data */
0x52, /* [183'0xb7] MSTORE */
0x80, /* [184'0xb8] DUP1 */
0x93, /* [185'0xb9] SWAP4 */
0x92, /* [186'0xba] SWAP3 */
0x91, /* [187'0xbb] SWAP2 */
0x90, /* [188'0xbc] SWAP1 */
0x81, /* [189'0xbd] DUP2 */
0x81, /* [190'0xbe] DUP2 */
0x52, /* [191'0xbf] MSTORE */
0x60, /* [192'0xc0] PUSH1 */
0x20,/* constant data */
0x01, /* [194'0xc2] ADD */
0x83, /* [195'0xc3] DUP4 */
0x83, /* [196'0xc4] DUP4 */
0x80, /* [197'0xc5] DUP1 */
0x82, /* [198'0xc6] DUP3 */
0x84, /* [199'0xc7] DUP5 */
0x37, /* [200'0xc8] CALLDATACOPY */
0x82, /* [201'0xc9] DUP3 */
0x01, /* [202'0xca] ADD */
0x91, /* [203'0xcb] SWAP2 */
0x50, /* [204'0xcc] POP */
0x50, /* [205'0xcd] POP */
0x50, /* [206'0xce] POP */
0x50, /* [207'0xcf] POP */
0x50, /* [208'0xd0] POP */
0x50, /* [209'0xd1] POP */
0x91, /* [210'0xd2] SWAP2 */
0x92, /* [211'0xd3] SWAP3 */
0x91, /* [212'0xd4] SWAP2 */
0x92, /* [213'0xd5] SWAP3 */
0x90, /* [214'0xd6] SWAP1 */
0x80, /* [215'0xd7] DUP1 */
0x35, /* [216'0xd8] CALLDATALOAD */
0x73, /* [217'0xd9] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [238'0xee] AND */
0x90, /* [239'0xef] SWAP1 */
0x60, /* [240'0xf0] PUSH1 */
0x20,/* constant data */
0x01, /* [242'0xf2] ADD */
0x90, /* [243'0xf3] SWAP1 */
0x92, /* [244'0xf4] SWAP3 */
0x91, /* [245'0xf5] SWAP2 */
0x90, /* [246'0xf6] SWAP1 */
0x50, /* [247'0xf7] POP */
0x50, /* [248'0xf8] POP */
0x50, /* [249'0xf9] POP */
0x61, /* [250'0xfa] PUSH2 */
0x01,0xa5,/* constant data */
0x56, /* [253'0xfd] JUMP */
0x5b, /* [254'0xfe] JUMPDEST */
0x60, /* [255'0xff] PUSH1 */
0x40,/* constant data */
0x51, /* [257'0x101] MLOAD */
0x80, /* [258'0x102] DUP1 */
0x82, /* [259'0x103] DUP3 */
0x81, /* [260'0x104] DUP2 */
0x52, /* [261'0x105] MSTORE */
0x60, /* [262'0x106] PUSH1 */
0x20,/* constant data */
0x01, /* [264'0x108] ADD */
0x91, /* [265'0x109] SWAP2 */
0x50, /* [266'0x10a] POP */
0x50, /* [267'0x10b] POP */
0x60, /* [268'0x10c] PUSH1 */
0x40,/* constant data */
0x51, /* [270'0x10e] MLOAD */
0x80, /* [271'0x10f] DUP1 */
0x91, /* [272'0x110] SWAP2 */
0x03, /* [273'0x111] SUB */
0x90, /* [274'0x112] SWAP1 */
0xf3, /* [275'0x113] RETURN */
0x5b, /* [276'0x114] JUMPDEST */
0x34, /* [277'0x115] CALLVALUE */
0x80, /* [278'0x116] DUP1 */
0x15, /* [279'0x117] ISZERO */
0x61, /* [280'0x118] PUSH2 */
0x01,0x20,/* constant data */
0x57, /* [283'0x11b] JUMPI */
0x60, /* [284'0x11c] PUSH1 */
0x00,/* constant data */
0x80, /* [286'0x11e] DUP1 */
0xfd, /* [287'0x11f] REVERT */
0x5b, /* [288'0x120] JUMPDEST */
0x50, /* [289'0x121] POP */
0x61, /* [290'0x122] PUSH2 */
0x01,0x29,/* constant data */
0x61, /* [293'0x125] PUSH2 */
0x02,0xa1,/* constant data */
0x56, /* [296'0x128] JUMP */
0x5b, /* [297'0x129] JUMPDEST */
0x00, /* [298'0x12a] STOP */
0x5b, /* [299'0x12b] JUMPDEST */
0x34, /* [300'0x12c] CALLVALUE */
0x80, /* [301'0x12d] DUP1 */
0x15, /* [302'0x12e] ISZERO */
0x61, /* [303'0x12f] PUSH2 */
0x01,0x37,/* constant data */
0x57, /* [306'0x132] JUMPI */
0x60, /* [307'0x133] PUSH1 */
0x00,/* constant data */
0x80, /* [309'0x135] DUP1 */
0xfd, /* [310'0x136] REVERT */
0x5b, /* [311'0x137] JUMPDEST */
0x50, /* [312'0x138] POP */
0x61, /* [313'0x139] PUSH2 */
0x01,0x40,/* constant data */
0x61, /* [316'0x13c] PUSH2 */
0x02,0xe3,/* constant data */
0x56, /* [319'0x13f] JUMP */
0x5b, /* [320'0x140] JUMPDEST */
0x00, /* [321'0x141] STOP */
0x5b, /* [322'0x142] JUMPDEST */
0x34, /* [323'0x143] CALLVALUE */
0x80, /* [324'0x144] DUP1 */
0x15, /* [325'0x145] ISZERO */
0x61, /* [326'0x146] PUSH2 */
0x01,0x4e,/* constant data */
0x57, /* [329'0x149] JUMPI */
0x60, /* [330'0x14a] PUSH1 */
0x00,/* constant data */
0x80, /* [332'0x14c] DUP1 */
0xfd, /* [333'0x14d] REVERT */
0x5b, /* [334'0x14e] JUMPDEST */
0x50, /* [335'0x14f] POP */
0x61, /* [336'0x150] PUSH2 */
0x01,0x57,/* constant data */
0x61, /* [339'0x153] PUSH2 */
0x03,0xfc,/* constant data */
0x56, /* [342'0x156] JUMP */
0x5b, /* [343'0x157] JUMPDEST */
0x60, /* [344'0x158] PUSH1 */
0x40,/* constant data */
0x51, /* [346'0x15a] MLOAD */
0x80, /* [347'0x15b] DUP1 */
0x82, /* [348'0x15c] DUP3 */
0x73, /* [349'0x15d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [370'0x172] AND */
0x73, /* [371'0x173] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [392'0x188] AND */
0x81, /* [393'0x189] DUP2 */
0x52, /* [394'0x18a] MSTORE */
0x60, /* [395'0x18b] PUSH1 */
0x20,/* constant data */
0x01, /* [397'0x18d] ADD */
0x91, /* [398'0x18e] SWAP2 */
0x50, /* [399'0x18f] POP */
0x50, /* [400'0x190] POP */
0x60, /* [401'0x191] PUSH1 */
0x40,/* constant data */
0x51, /* [403'0x193] MLOAD */
0x80, /* [404'0x194] DUP1 */
0x91, /* [405'0x195] SWAP2 */
0x03, /* [406'0x196] SUB */
0x90, /* [407'0x197] SWAP1 */
0xf3, /* [408'0x198] RETURN */
0x5b, /* [409'0x199] JUMPDEST */
0x61, /* [410'0x19a] PUSH2 */
0x01,0xa1,/* constant data */
0x61, /* [413'0x19d] PUSH2 */
0x01,0xa3,/* constant data */
0x56, /* [416'0x1a0] JUMP */
0x5b, /* [417'0x1a1] JUMPDEST */
0x00, /* [418'0x1a2] STOP */
0x5b, /* [419'0x1a3] JUMPDEST */
0x56, /* [420'0x1a4] JUMP */
0x5b, /* [421'0x1a5] JUMPDEST */
0x60, /* [422'0x1a6] PUSH1 */
0x00,/* constant data */
0x65, /* [424'0x1a8] PUSH6 */
0x56,0x47,0x91,0x71,0xe7,0x04,/* constant data */
0x65, /* [431'0x1af] PUSH6 */
0x5a,0xf3,0x10,0x7a,0x40,0x00,/* constant data */
0x83, /* [438'0x1b6] DUP4 */
0x60, /* [439'0x1b7] PUSH1 */
0x40,/* constant data */
0x51, /* [441'0x1b9] MLOAD */
0x80, /* [442'0x1ba] DUP1 */
0x82, /* [443'0x1bb] DUP3 */
0x73, /* [444'0x1bc] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [465'0x1d1] AND */
0x73, /* [466'0x1d2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [487'0x1e7] AND */
0x6c, /* [488'0x1e8] PUSH13 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x02, /* [502'0x1f6] MUL */
0x81, /* [503'0x1f7] DUP2 */
0x52, /* [504'0x1f8] MSTORE */
0x60, /* [505'0x1f9] PUSH1 */
0x14,/* constant data */
0x01, /* [507'0x1fb] ADD */
0x91, /* [508'0x1fc] SWAP2 */
0x50, /* [509'0x1fd] POP */
0x50, /* [510'0x1fe] POP */
0x60, /* [511'0x1ff] PUSH1 */
0x40,/* constant data */
0x51, /* [513'0x201] MLOAD */
0x80, /* [514'0x202] DUP1 */
0x91, /* [515'0x203] SWAP2 */
0x03, /* [516'0x204] SUB */
0x90, /* [517'0x205] SWAP1 */
0x20, /* [518'0x206] SHA3 */
0x60, /* [519'0x207] PUSH1 */
0x01,/* constant data */
0x90, /* [521'0x209] SWAP1 */
0x04, /* [522'0x20a] DIV */
0x81, /* [523'0x20b] DUP2 */
0x15, /* [524'0x20c] ISZERO */
0x15, /* [525'0x20d] ISZERO */
0x61, /* [526'0x20e] PUSH2 */
0x02,0x13,/* constant data */
0x57, /* [529'0x211] JUMPI */
0xfe, /* [530'0x212] INVALID */
0x5b, /* [531'0x213] JUMPDEST */
0x06, /* [532'0x214] MOD */
0x14, /* [533'0x215] EQ */
0x15, /* [534'0x216] ISZERO */
0x61, /* [535'0x217] PUSH2 */
0x02,0x33,/* constant data */
0x57, /* [538'0x21a] JUMPI */
0x81, /* [539'0x21b] DUP2 */
0x73, /* [540'0x21c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [561'0x231] AND */
0xff, /* [562'0x232] SELFDESTRUCT */
0x5b, /* [563'0x233] JUMPDEST */
0x65, /* [564'0x234] PUSH6 */
0x5a,0xf3,0x10,0x7a,0x40,0x00,/* constant data */
0x82, /* [571'0x23b] DUP3 */
0x60, /* [572'0x23c] PUSH1 */
0x40,/* constant data */
0x51, /* [574'0x23e] MLOAD */
0x80, /* [575'0x23f] DUP1 */
0x82, /* [576'0x240] DUP3 */
0x73, /* [577'0x241] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [598'0x256] AND */
0x73, /* [599'0x257] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [620'0x26c] AND */
0x6c, /* [621'0x26d] PUSH13 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x02, /* [635'0x27b] MUL */
0x81, /* [636'0x27c] DUP2 */
0x52, /* [637'0x27d] MSTORE */
0x60, /* [638'0x27e] PUSH1 */
0x14,/* constant data */
0x01, /* [640'0x280] ADD */
0x91, /* [641'0x281] SWAP2 */
0x50, /* [642'0x282] POP */
0x50, /* [643'0x283] POP */
0x60, /* [644'0x284] PUSH1 */
0x40,/* constant data */
0x51, /* [646'0x286] MLOAD */
0x80, /* [647'0x287] DUP1 */
0x91, /* [648'0x288] SWAP2 */
0x03, /* [649'0x289] SUB */
0x90, /* [650'0x28a] SWAP1 */
0x20, /* [651'0x28b] SHA3 */
0x60, /* [652'0x28c] PUSH1 */
0x01,/* constant data */
0x90, /* [654'0x28e] SWAP1 */
0x04, /* [655'0x28f] DIV */
0x81, /* [656'0x290] DUP2 */
0x15, /* [657'0x291] ISZERO */
0x15, /* [658'0x292] ISZERO */
0x61, /* [659'0x293] PUSH2 */
0x02,0x98,/* constant data */
0x57, /* [662'0x296] JUMPI */
0xfe, /* [663'0x297] INVALID */
0x5b, /* [664'0x298] JUMPDEST */
0x06, /* [665'0x299] MOD */
0x90, /* [666'0x29a] SWAP1 */
0x50, /* [667'0x29b] POP */
0x92, /* [668'0x29c] SWAP3 */
0x91, /* [669'0x29d] SWAP2 */
0x50, /* [670'0x29e] POP */
0x50, /* [671'0x29f] POP */
0x56, /* [672'0x2a0] JUMP */
0x5b, /* [673'0x2a1] JUMPDEST */
0x33, /* [674'0x2a2] CALLER */
0x60, /* [675'0x2a3] PUSH1 */
0x00,/* constant data */
0x80, /* [677'0x2a5] DUP1 */
0x61, /* [678'0x2a6] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [681'0x2a9] EXP */
0x81, /* [682'0x2aa] DUP2 */
0x54, /* [683'0x2ab] SLOAD */
0x81, /* [684'0x2ac] DUP2 */
0x73, /* [685'0x2ad] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [706'0x2c2] MUL */
0x19, /* [707'0x2c3] NOT */
0x16, /* [708'0x2c4] AND */
0x90, /* [709'0x2c5] SWAP1 */
0x83, /* [710'0x2c6] DUP4 */
0x73, /* [711'0x2c7] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [732'0x2dc] AND */
0x02, /* [733'0x2dd] MUL */
0x17, /* [734'0x2de] OR */
0x90, /* [735'0x2df] SWAP1 */
0x55, /* [736'0x2e0] SSTORE */
0x50, /* [737'0x2e1] POP */
0x56, /* [738'0x2e2] JUMP */
0x5b, /* [739'0x2e3] JUMPDEST */
0x60, /* [740'0x2e4] PUSH1 */
0x00,/* constant data */
0x80, /* [742'0x2e6] DUP1 */
0x60, /* [743'0x2e7] PUSH1 */
0x00,/* constant data */
0x90, /* [745'0x2e9] SWAP1 */
0x54, /* [746'0x2ea] SLOAD */
0x90, /* [747'0x2eb] SWAP1 */
0x61, /* [748'0x2ec] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [751'0x2ef] EXP */
0x90, /* [752'0x2f0] SWAP1 */
0x04, /* [753'0x2f1] DIV */
0x73, /* [754'0x2f2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [775'0x307] AND */
0x73, /* [776'0x308] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [797'0x31d] AND */
0x33, /* [798'0x31e] CALLER */
0x73, /* [799'0x31f] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [820'0x334] AND */
0x14, /* [821'0x335] EQ */
0x15, /* [822'0x336] ISZERO */
0x61, /* [823'0x337] PUSH2 */
0x03,0xf9,/* constant data */
0x57, /* [826'0x33a] JUMPI */
0x30, /* [827'0x33b] ADDRESS */
0x73, /* [828'0x33c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [849'0x351] AND */
0x31, /* [850'0x352] BALANCE */
0x90, /* [851'0x353] SWAP1 */
0x50, /* [852'0x354] POP */
0x60, /* [853'0x355] PUSH1 */
0x00,/* constant data */
0x80, /* [855'0x357] DUP1 */
0x90, /* [856'0x358] SWAP1 */
0x54, /* [857'0x359] SLOAD */
0x90, /* [858'0x35a] SWAP1 */
0x61, /* [859'0x35b] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [862'0x35e] EXP */
0x90, /* [863'0x35f] SWAP1 */
0x04, /* [864'0x360] DIV */
0x73, /* [865'0x361] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [886'0x376] AND */
0x73, /* [887'0x377] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [908'0x38c] AND */
0x33, /* [909'0x38d] CALLER */
0x73, /* [910'0x38e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [931'0x3a3] AND */
0x14, /* [932'0x3a4] EQ */
0x15, /* [933'0x3a5] ISZERO */
0x80, /* [934'0x3a6] DUP1 */
0x61, /* [935'0x3a7] PUSH2 */
0x03,0xb8,/* constant data */
0x57, /* [938'0x3aa] JUMPI */
0x50, /* [939'0x3ab] POP */
0x68, /* [940'0x3ac] PUSH9 */
0x36,0x35,0xc9,0xad,0xc5,0xde,0xa0,0x00,0x00,/* constant data */
0x81, /* [950'0x3b6] DUP2 */
0x10, /* [951'0x3b7] LT */
0x5b, /* [952'0x3b8] JUMPDEST */
0x15, /* [953'0x3b9] ISZERO */
0x61, /* [954'0x3ba] PUSH2 */
0x03,0xc2,/* constant data */
0x57, /* [957'0x3bd] JUMPI */
0x60, /* [958'0x3be] PUSH1 */
0x00,/* constant data */
0x90, /* [960'0x3c0] SWAP1 */
0x50, /* [961'0x3c1] POP */
0x5b, /* [962'0x3c2] JUMPDEST */
0x33, /* [963'0x3c3] CALLER */
0x73, /* [964'0x3c4] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [985'0x3d9] AND */
0x61, /* [986'0x3da] PUSH2 */
0x08,0xfc,/* constant data */
0x82, /* [989'0x3dd] DUP3 */
0x90, /* [990'0x3de] SWAP1 */
0x81, /* [991'0x3df] DUP2 */
0x15, /* [992'0x3e0] ISZERO */
0x02, /* [993'0x3e1] MUL */
0x90, /* [994'0x3e2] SWAP1 */
0x60, /* [995'0x3e3] PUSH1 */
0x40,/* constant data */
0x51, /* [997'0x3e5] MLOAD */
0x60, /* [998'0x3e6] PUSH1 */
0x00,/* constant data */
0x60, /* [1000'0x3e8] PUSH1 */
0x40,/* constant data */
0x51, /* [1002'0x3ea] MLOAD */
0x80, /* [1003'0x3eb] DUP1 */
0x83, /* [1004'0x3ec] DUP4 */
0x03, /* [1005'0x3ed] SUB */
0x81, /* [1006'0x3ee] DUP2 */
0x85, /* [1007'0x3ef] DUP6 */
0x88, /* [1008'0x3f0] DUP9 */
0x88, /* [1009'0x3f1] DUP9 */
0xf1, /* [1010'0x3f2] CALL */
0x93, /* [1011'0x3f3] SWAP4 */
0x50, /* [1012'0x3f4] POP */
0x50, /* [1013'0x3f5] POP */
0x50, /* [1014'0x3f6] POP */
0x50, /* [1015'0x3f7] POP */
0x50, /* [1016'0x3f8] POP */
0x5b, /* [1017'0x3f9] JUMPDEST */
0x50, /* [1018'0x3fa] POP */
0x56, /* [1019'0x3fb] JUMP */
0x5b, /* [1020'0x3fc] JUMPDEST */
0x60, /* [1021'0x3fd] PUSH1 */
0x00,/* constant data */
0x80, /* [1023'0x3ff] DUP1 */
0x90, /* [1024'0x400] SWAP1 */
0x54, /* [1025'0x401] SLOAD */
0x90, /* [1026'0x402] SWAP1 */
0x61, /* [1027'0x403] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [1030'0x406] EXP */
0x90, /* [1031'0x407] SWAP1 */
0x04, /* [1032'0x408] DIV */
0x73, /* [1033'0x409] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1054'0x41e] AND */
0x81, /* [1055'0x41f] DUP2 */
0x56, /* [1056'0x420] JUMP */
0x00, /* [1057'0x421] STOP */
0xa1, /* [1058'0x422] LOG1 */
0x65, /* [1059'0x423] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [1066'0x42a] SHA3 */
0x29, /* [1067'0x42b] INVALID' byte */
0xc1, /* [1068'0x42c] INVALID' byte */
0x28, /* [1069'0x42d] INVALID' byte */
0xc6, /* [1070'0x42e] INVALID' byte */
0x4e, /* [1071'0x42f] INVALID' byte */
0xfc, /* [1072'0x430] INVALID' byte */
0x3a, /* [1073'0x431] GASPRICE */
0x07, /* [1074'0x432] SMOD */
0x26, /* [1075'0x433] INVALID' byte */
0x3e, /* [1076'0x434] RETURNDATACOPY */
0x7b, /* [1077'0x435] PUSH28 */
0xea,0x87,0x96,0x18,0x85,0x14,0x19,0xfe,0x4b,0x21,0xbd,0x03,0x6c,0x8a,0xcb,0x51,0x90,0x8c,0xda,0x08,0x1f,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_HelpMeSave::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_HelpMeSave::_contract_name = "HelpMeSave";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_HelpMeSave> eevm::EVM2CPP_HelpMeSave::reg{};
const std::string& eevm::EVM2CPP_HelpMeSave::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_14 = 0x14_u256;
constexpr uint256_t c_1f = 0x1f_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_6d = 0x6d_u256;
constexpr uint256_t c_75 = 0x75_u256;
constexpr uint256_t c_77 = 0x77_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_83 = 0x83_u256;
constexpr uint256_t c_fe = 0xfe_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_114 = 0x114_u256;
constexpr uint256_t c_120 = 0x120_u256;
constexpr uint256_t c_129 = 0x129_u256;
constexpr uint256_t c_12b = 0x12b_u256;
constexpr uint256_t c_137 = 0x137_u256;
constexpr uint256_t c_140 = 0x140_u256;
constexpr uint256_t c_142 = 0x142_u256;
constexpr uint256_t c_14e = 0x14e_u256;
constexpr uint256_t c_157 = 0x157_u256;
constexpr uint256_t c_199 = 0x199_u256;
constexpr uint256_t c_1a1 = 0x1a1_u256;
constexpr uint256_t c_1a3 = 0x1a3_u256;
constexpr uint256_t c_1a5 = 0x1a5_u256;
constexpr uint256_t c_213 = 0x213_u256;
constexpr uint256_t c_233 = 0x233_u256;
constexpr uint256_t c_298 = 0x298_u256;
constexpr uint256_t c_2a1 = 0x2a1_u256;
constexpr uint256_t c_2e3 = 0x2e3_u256;
constexpr uint256_t c_3b8 = 0x3b8_u256;
constexpr uint256_t c_3c2 = 0x3c2_u256;
constexpr uint256_t c_3f9 = 0x3f9_u256;
constexpr uint256_t c_3fc = 0x3fc_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_6b5ad18 = 0x6b5ad18_u256;
constexpr uint256_t c_22d122a9 = 0x22d122a9_u256;
constexpr uint256_t c_3ccfd60b = 0x3ccfd60b_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_d0e30db0 = 0xd0e30db0_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_37 = 0x56479171e704_u256;
constexpr uint256_t g_38 = 0x5af3107a4000_u256;
constexpr uint256_t g_52 = 0x627a7a723058_u256;
constexpr uint256_t g_49 = 0x3635c9adc5dea00000_u256;
constexpr uint256_t g_39 = 0x1000000000000000000000000_u256;
constexpr uint256_t g_24 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_53 = 0xea879618851419fe4b21bd036c8acb51908cda081f0029_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_46 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_HelpMeSave::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_75,
&&__invld,
&&pc_77,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_83,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_fe,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_114,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_120,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_129,
&&__invld,
&&pc_12b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_137,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_140,
&&__invld,
&&pc_142,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_14e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_157,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_199,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1a1,
&&__invld,
&&pc_1a3,
&&__invld,
&&pc_1a5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_213,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_233,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_298,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2a1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2e3,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3b8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3c2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f9,
&&__invld,
&&__invld,
&&pc_3fc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [109] */

/* JUMPI */
/* op_0 = Constant((6, 109)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_6d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [112569624] */

/* EQ */
/* op_0 = Constant((8, 112569624)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_6b5ad18, v_6_0);


/* PUSH2 */
/* val = [119] */

/* JUMPI */
/* op_0 = Constant((10, 119)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_77;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [584131241] */

/* EQ */
/* op_0 = Constant((1, 584131241)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_22d122a9, s_0_0);


/* PUSH2 */
/* val = [276] */

/* JUMPI */
/* op_0 = Constant((3, 276)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_114;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1020253707] */

/* EQ */
/* op_0 = Constant((1, 1020253707)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_3ccfd60b, s_0_0);


/* PUSH2 */
/* val = [299] */

/* JUMPI */
/* op_0 = Constant((3, 299)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_12b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((1, 2376452955)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8da5cb5b, s_0_0);


/* PUSH2 */
/* val = [322] */

/* JUMPI */
/* op_0 = Constant((3, 322)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_142;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3504541104] */

/* EQ */
/* op_0 = Constant((1, 3504541104)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d0e30db0, s_0_0);


/* PUSH2 */
/* val = [409] */

/* JUMPI */
/* op_0 = Constant((3, 409)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_199;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
/* JUMPDEST */

/* PUSH2 */
/* val = [117] */

/* PUSH2 */
/* val = [419] */

/* JUMP */
/* op_0 = Constant((2, 419)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 117))*/
ctxt->s.push(c_75);

goto pc_1a3;


}pc_75:
{ /* <============ */ 
on_bb_start(117);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_77:
{ /* <============ */ 
on_bb_start(119);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [131] */

/* JUMPI */
/* op_0 = Constant((4, 131)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_83;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_7f:
{ /* <============ */ 
on_bb_start(127);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_83:
{ /* <============ */ 
on_bb_start(131);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [254] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* DUP3 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = add_v(c_4, v_12_0);


/* DUP1 */
/* op_0 = InstructionRef((18, 0)) */

/* CALLDATALOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_20_0 = calldataload_v(v_18_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((18, 0)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((22, 32)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_23_0 = add_v(c_20, v_18_0);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((20, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((20, 0)) */

/* PUSH1 */
/* val = [31] */

/* ADD */
/* op_0 = Constant((27, 31)) */
/* op_1 = InstructionRef((20, 0)) */
const uint256_t v_28_0 = add_v(c_1f, v_20_0);


/* PUSH1 */
/* val = [32] */

/* DUP1 */
/* op_0 = Constant((29, 32)) */
/* val = [32] */

/* SWAP2 */
/* op_0 = Constant((29, 32)) */
/* op_1 = InstructionRef((28, 0)) */

/* DIV */
/* op_0 = InstructionRef((28, 0)) */
/* op_1 = Constant((29, 32)) */
const uint256_t v_32_0 = div_v(v_28_0, c_20);


/* MUL */
/* op_0 = InstructionRef((32, 0)) */
/* op_1 = Constant((29, 32)) */
const uint256_t v_33_0 = mul_v(v_32_0, c_20);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((34, 32)) */
/* op_1 = InstructionRef((33, 0)) */
const uint256_t v_35_0 = add_v(c_20, v_33_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((36, 64)) */
const uint256_t v_37_0 = mload_v(c_40);


/* SWAP1 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((35, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((37, 0)) */

/* ADD */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((35, 0)) */
const uint256_t v_40_0 = add_v(v_37_0, v_35_0);


/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((41, 64)) */
/* op_1 = InstructionRef((40, 0)) */
mstore_v(c_40, v_40_0);


/* DUP1 */
/* op_0 = InstructionRef((37, 0)) */

/* SWAP4 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((23, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((20, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((37, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((20, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((37, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = InstructionRef((20, 0)) */
mstore_v(v_37_0, v_20_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((51, 32)) */
/* op_1 = InstructionRef((37, 0)) */
const uint256_t v_52_0 = add_v(c_20, v_37_0);


/* DUP4 */
/* op_0 = InstructionRef((23, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((20, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((20, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((23, 0)) */

/* DUP5 */
/* op_0 = InstructionRef((52, 0)) */

/* CALLDATACOPY */
/* op_0 = InstructionRef((52, 0)) */
/* op_1 = InstructionRef((23, 0)) */
/* op_2 = InstructionRef((20, 0)) */
calldatacopy_v(v_52_0, v_23_0, v_20_0);


/* DUP3 */
/* op_0 = InstructionRef((52, 0)) */

/* ADD */
/* op_0 = InstructionRef((52, 0)) */
/* op_1 = InstructionRef((20, 0)) */
const uint256_t v_60_0 = add_v(v_52_0, v_20_0);


/* SWAP2 */
/* op_0 = InstructionRef((60, 0)) */
/* op_1 = InstructionRef((52, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* SWAP2 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP3 */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((37, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((37, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* DUP1 */
/* op_0 = Constant((15, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((15, 36)) */
const uint256_t v_74_0 = calldataload_v(c_24);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((75, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((74, 0)) */
const uint256_t v_76_0 = and_v(g_24, v_74_0);


/* SWAP1 */
/* op_0 = InstructionRef((76, 0)) */
/* op_1 = Constant((15, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((78, 32)) */
/* op_1 = Constant((15, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((79, 68)) */
/* op_1 = InstructionRef((76, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((76, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((79, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [421] */

/* JUMP */
/* op_0 = Constant((87, 421)) */
/* BB finalizer */
ctxt->s.set(0, c_fe);
/* no pops at end */
/* BB return 0 InstructionRef((37, 0))*/
ctxt->s.push(v_37_0);
/* BB return 1 InstructionRef((76, 0))*/
ctxt->s.push(v_76_0);

goto pc_1a5;


}pc_fe:
{ /* <============ */ 
on_bb_start(254);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_114:
{ /* <============ */ 
on_bb_start(276);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [288] */

/* JUMPI */
/* op_0 = Constant((4, 288)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_120;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_11c:
{ /* <============ */ 
on_bb_start(284);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_120:
{ /* <============ */ 
on_bb_start(288);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [297] */

/* PUSH2 */
/* val = [673] */

/* JUMP */
/* op_0 = Constant((3, 673)) */
/* BB finalizer */
ctxt->s.set(0, c_129);
/* no pops at end */
/* no BB returns */

goto pc_2a1;


}pc_129:
{ /* <============ */ 
on_bb_start(297);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_12b:
{ /* <============ */ 
on_bb_start(299);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [311] */

/* JUMPI */
/* op_0 = Constant((4, 311)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_137;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_133:
{ /* <============ */ 
on_bb_start(307);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_137:
{ /* <============ */ 
on_bb_start(311);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [320] */

/* PUSH2 */
/* val = [739] */

/* JUMP */
/* op_0 = Constant((3, 739)) */
/* BB finalizer */
ctxt->s.set(0, c_140);
/* no pops at end */
/* no BB returns */

goto pc_2e3;


}pc_140:
{ /* <============ */ 
on_bb_start(320);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_142:
{ /* <============ */ 
on_bb_start(322);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [334] */

/* JUMPI */
/* op_0 = Constant((4, 334)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_14e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_14a:
{ /* <============ */ 
on_bb_start(330);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_14e:
{ /* <============ */ 
on_bb_start(334);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [343] */

/* PUSH2 */
/* val = [1020] */

/* JUMP */
/* op_0 = Constant((3, 1020)) */
/* BB finalizer */
ctxt->s.set(0, c_157);
/* no pops at end */
/* no BB returns */

goto pc_3fc;


}pc_157:
{ /* <============ */ 
on_bb_start(343);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_24, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_24, v_6_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(v_2_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((16, 64)) */
const uint256_t v_17_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((17, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_20_0 = sub_v(v_12_0, v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* RETURN */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((20, 0)) */
return_v(v_17_0, v_20_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_199:
{ /* <============ */ 
on_bb_start(409);
/* JUMPDEST */

/* PUSH2 */
/* val = [417] */

/* PUSH2 */
/* val = [419] */

/* JUMP */
/* op_0 = Constant((2, 419)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 417))*/
ctxt->s.push(c_1a1);

goto pc_1a3;


}pc_1a1:
{ /* <============ */ 
on_bb_start(417);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a3:
{ /* <============ */ 
on_bb_start(419);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_1a5:
{ /* <============ */ 
on_bb_start(421);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* PUSH6 */
/* val = [94865382827780] */

/* PUSH6 */
/* val = [100000000000000] */

/* DUP4 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((5, 64)) */
const uint256_t v_6_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_10_0 = and_v(g_24, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((10, 0)) */
const uint256_t v_12_0 = and_v(g_24, v_10_0);


/* PUSH13 */
/* val = [79228162514264337593543950336] */

/* MUL */
/* op_0 = Constant((13, 79228162514264337593543950336)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = mul_v(g_39, v_12_0);


/* DUP2 */
/* op_0 = InstructionRef((6, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((6, 0)) */
/* op_1 = InstructionRef((14, 0)) */
mstore_v(v_6_0, v_14_0);


/* PUSH1 */
/* val = [20] */

/* ADD */
/* op_0 = Constant((17, 20)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_18_0 = add_v(c_14, v_6_0);


/* SWAP2 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((22, 64)) */
const uint256_t v_23_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((23, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((18, 0)) */

/* SUB */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((23, 0)) */
const uint256_t v_26_0 = sub_v(v_18_0, v_23_0);


/* SWAP1 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((23, 0)) */

/* SHA3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_28_0 = sha3_v(v_23_0, v_26_0);


/* PUSH1 */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((29, 1)) */
/* op_1 = InstructionRef((28, 0)) */

/* DIV */
/* op_0 = InstructionRef((28, 0)) */
/* op_1 = Constant((29, 1)) */
/* val = [] */

/* DUP2 */
/* op_0 = Constant((3, 100000000000000)) */
/* val = [100000000000000] */

/* ISZERO */
/* op_0 = Constant((3, 100000000000000)) */
/* val = [0] */

/* ISZERO */
/* op_0 = Constant((33, 0)) */
/* val = [1] */

/* PUSH2 */
/* val = [531] */

/* JUMPI */
/* op_0 = Constant((35, 531)) */
/* op_1 = Constant((34, 1)) */
if ( c_1 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 94865382827780))*/
ctxt->s.push(g_37);
/* BB return 2 Constant((3, 100000000000000))*/
ctxt->s.push(g_38);
/* BB return 3 InstructionRef((28, 0))*/
ctxt->s.push(v_28_0);
 
 goto pc_213;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
/* BB return 1 Constant((2, 94865382827780))*/
ctxt->s.push(g_37);
/* BB return 2 Constant((3, 100000000000000))*/
ctxt->s.push(g_38);
/* BB return 3 InstructionRef((28, 0))*/
ctxt->s.push(v_28_0);
}pc_212:
{ /* <============ */ 
on_bb_start(530);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_213:
{ /* <============ */ 
on_bb_start(531);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* MOD */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_1_0 = mod_v(s_0_0, s_0_1);


/* EQ */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 2)) */
TRACE_COMP(eevm::Opcode::EQ, v_1_0, s_0_2);
const uint256_t v_2_0 = eq_v(v_1_0, s_0_2);


/* ISZERO */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = iszero_v(v_2_0);


/* PUSH2 */
/* val = [563] */

/* JUMPI */
/* op_0 = Constant((4, 563)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */
 
 goto pc_233;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */
}pc_21b:
{ /* <============ */ 
on_bb_start(539);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((1, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_2_0 = and_v(g_24, s_0_1);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((2, 0)) */
selfdestruct_v(v_2_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_233:
{ /* <============ */ 
on_bb_start(563);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH6 */
/* val = [100000000000000] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((3, 64)) */
const uint256_t v_4_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((4, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_8_0 = and_v(g_24, s_0_1);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((8, 0)) */
const uint256_t v_10_0 = and_v(g_24, v_8_0);


/* PUSH13 */
/* val = [79228162514264337593543950336] */

/* MUL */
/* op_0 = Constant((11, 79228162514264337593543950336)) */
/* op_1 = InstructionRef((10, 0)) */
const uint256_t v_12_0 = mul_v(g_39, v_10_0);


/* DUP2 */
/* op_0 = InstructionRef((4, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = InstructionRef((12, 0)) */
mstore_v(v_4_0, v_12_0);


/* PUSH1 */
/* val = [20] */

/* ADD */
/* op_0 = Constant((15, 20)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_16_0 = add_v(c_14, v_4_0);


/* SWAP2 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = StackRef((0, 1)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((20, 64)) */
const uint256_t v_21_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((21, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((16, 0)) */

/* SUB */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((21, 0)) */
const uint256_t v_24_0 = sub_v(v_16_0, v_21_0);


/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((21, 0)) */

/* SHA3 */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((24, 0)) */
const uint256_t v_26_0 = sha3_v(v_21_0, v_24_0);


/* PUSH1 */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((27, 1)) */
/* op_1 = InstructionRef((26, 0)) */

/* DIV */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = Constant((27, 1)) */
/* val = [] */

/* DUP2 */
/* op_0 = Constant((1, 100000000000000)) */
/* val = [100000000000000] */

/* ISZERO */
/* op_0 = Constant((1, 100000000000000)) */
/* val = [0] */

/* ISZERO */
/* op_0 = Constant((31, 0)) */
/* val = [1] */

/* PUSH2 */
/* val = [664] */

/* JUMPI */
/* op_0 = Constant((33, 664)) */
/* op_1 = Constant((32, 1)) */
if ( c_1 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 100000000000000))*/
ctxt->s.push(g_38);
/* BB return 1 InstructionRef((26, 0))*/
ctxt->s.push(v_26_0);
 
 goto pc_298;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 100000000000000))*/
ctxt->s.push(g_38);
/* BB return 1 InstructionRef((26, 0))*/
ctxt->s.push(v_26_0);
}pc_297:
{ /* <============ */ 
on_bb_start(663);
/* INVALID */
invalid_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_298:
{ /* <============ */ 
on_bb_start(664);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_4 = ctxt->s.peek(4);
const uint256_t s_0_5 = ctxt->s.peek(5);
/* JUMPDEST */

/* MOD */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_1_0 = mod_v(s_0_0, s_0_1);


/* SWAP1 */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 2)) */

/* POP */

/* SWAP3 */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = StackRef((0, 5)) */

/* SWAP2 */
/* op_0 = StackRef((0, 5)) */
/* op_1 = StackRef((0, 4)) */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 5)) */
/* BB finalizer */
ctxt->s.set(5, v_1_0);
ctxt->s.pop_drop_n(5);
/* no BB returns */

JUMP(s_0_5);


}pc_2a1:
{ /* <============ */ 
on_bb_start(673);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* SLOAD */
/* op_0 = Constant((2, 0)) */
const uint256_t v_7_0 = sload_v(c_0);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_46, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_24, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 0)) */

/* SSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_0, v_18_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_2e3:
{ /* <============ */ 
on_bb_start(739);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_5_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((7, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((8, 1)) */
/* op_1 = InstructionRef((5, 0)) */

/* DIV */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((8, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_12_0 = and_v(g_24, v_5_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_24, v_12_0);


/* CALLER */
const uint256_t v_15_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_17_0 = and_v(g_24, v_15_0);


/* EQ */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((14, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_17_0, v_14_0);
const uint256_t v_18_0 = eq_v(v_17_0, v_14_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [1017] */

/* JUMPI */
/* op_0 = Constant((20, 1017)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
 
 goto pc_3f9;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
}pc_33b:
{ /* <============ */ 
on_bb_start(827);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* ADDRESS */
const uint256_t v_0_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((1, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((0, 0)) */
const uint256_t v_2_0 = and_v(g_24, v_0_0);


/* BALANCE */
/* op_0 = InstructionRef((2, 0)) */
const uint256_t v_3_0 = balance_v(v_2_0);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((6, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((6, 0)) */
/* op_1 = Constant((6, 0)) */

/* SLOAD */
/* op_0 = Constant((6, 0)) */
const uint256_t v_9_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = Constant((6, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((11, 256)) */
/* op_1 = Constant((6, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((12, 1)) */
/* op_1 = InstructionRef((9, 0)) */

/* DIV */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = Constant((12, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((9, 0)) */
const uint256_t v_16_0 = and_v(g_24, v_9_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((17, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((16, 0)) */
const uint256_t v_18_0 = and_v(g_24, v_16_0);


/* CALLER */
const uint256_t v_19_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((20, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((19, 0)) */
const uint256_t v_21_0 = and_v(g_24, v_19_0);


/* EQ */
/* op_0 = InstructionRef((21, 0)) */
/* op_1 = InstructionRef((18, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_21_0, v_18_0);
const uint256_t v_22_0 = eq_v(v_21_0, v_18_0);


/* ISZERO */
/* op_0 = InstructionRef((22, 0)) */
const uint256_t v_23_0 = iszero_v(v_22_0);


/* DUP1 */
/* op_0 = InstructionRef((23, 0)) */

/* PUSH2 */
/* val = [952] */

/* JUMPI */
/* op_0 = Constant((25, 952)) */
/* op_1 = InstructionRef((23, 0)) */
if ( v_23_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* BB return 0 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);
 
 goto pc_3b8;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* BB return 0 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);
}pc_3ab:
{ /* <============ */ 
on_bb_start(939);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* POP */

/* PUSH9 */
/* val = [1000000000000000000000] */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* LT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((1, 1000000000000000000000)) */
const uint256_t v_3_0 = lt_v(s_0_1, g_49);


/* BB finalizer */
ctxt->s.set(0, v_3_0);
/* no pops at end */
/* no BB returns */
}pc_3b8:
{ /* <============ */ 
on_bb_start(952);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_1_0 = iszero_v(s_0_0);


/* PUSH2 */
/* val = [962] */

/* JUMPI */
/* op_0 = Constant((2, 962)) */
/* op_1 = InstructionRef((1, 0)) */
if ( v_1_0 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
 
 goto pc_3c2;
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_3be:
{ /* <============ */ 
on_bb_start(958);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((0, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* BB finalizer */
ctxt->s.set(0, c_0);
/* no pops at end */
/* no BB returns */
}pc_3c2:
{ /* <============ */ 
on_bb_start(962);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_24, v_1_0);


/* PUSH2 */
/* val = [2300] */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((4, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* ISZERO */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_8_0 = iszero_v(s_0_0);


/* MUL */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((4, 2300)) */
const uint256_t v_9_0 = mul_v(v_8_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((11, 64)) */
const uint256_t v_12_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((14, 64)) */
const uint256_t v_15_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_18_0 = sub_v(v_12_0, v_15_0);


/* DUP2 */
/* op_0 = InstructionRef((15, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((3, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((9, 0)) */

/* CALL */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = InstructionRef((3, 0)) */
/* op_2 = StackRef((0, 0)) */
/* op_3 = InstructionRef((15, 0)) */
/* op_4 = InstructionRef((18, 0)) */
/* op_5 = InstructionRef((15, 0)) */
/* op_6 = Constant((13, 0)) */
const uint256_t v_23_0 = call_v(v_9_0, v_3_0, s_0_0, v_15_0, v_18_0, v_15_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((3, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f9:
{ /* <============ */ 
on_bb_start(1017);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_3fc:
{ /* <============ */ 
on_bb_start(1020);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_24, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_421:
{ /* <============ */ 
on_bb_start(1057);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_422:
{ /* <============ */ 
on_bb_start(1058);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_52, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x422 (inst offset 3; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42c:
{ /* <============ */ 
on_bb_start(1068);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x42c (inst offset 0; byte 0xc1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42d:
{ /* <============ */ 
on_bb_start(1069);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x42d (inst offset 0; byte 0x28)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42e:
{ /* <============ */ 
on_bb_start(1070);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x42e (inst offset 0; byte 0xc6)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42f:
{ /* <============ */ 
on_bb_start(1071);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x42f (inst offset 0; byte 0x4e)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_430:
{ /* <============ */ 
on_bb_start(1072);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x430 (inst offset 0; byte 0xfc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_431:
{ /* <============ */ 
on_bb_start(1073);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* GASPRICE */
const uint256_t v_0_0 = gasprice_v();


/* SMOD */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_1_0 = smod_v(v_0_0, s_0_0);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x431 (inst offset 2; byte 0x26)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_434:
{ /* <============ */ 
on_bb_start(1076);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* RETURNDATACOPY */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
returndatacopy_v(s_0_0, s_0_1, s_0_2);


/* PUSH28 */
/* val = [22463476146978908895750222348889130599719345188893556777] */

/* BB finalizer */
ctxt->s.set(2, g_53);
ctxt->s.pop_drop_n(2);
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x0,0x10,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x4,0x4d,0x80,0x61,0x0,0x20,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x6d,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x6,0xb5,0xad,0x18,0x14,0x61,0x0,0x77,0x57,0x80,0x63,0x22,0xd1,0x22,0xa9,0x14,0x61,0x1,0x14,0x57,0x80,0x63,0x3c,0xcf,0xd6,0xb,0x14,0x61,0x1,0x2b,0x57,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x1,0x42,0x57,0x80,0x63,0xd0,0xe3,0xd,0xb0,0x14,0x61,0x1,0x99,0x57,0x5b,0x61,0x0,0x75,0x61,0x1,0xa3,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x83,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xfe,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x82,0x1,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x80,0x80,0x60,0x1f,0x1,0x60,0x20,0x80,0x91,0x4,0x2,0x60,0x20,0x1,0x60,0x40,0x51,0x90,0x81,0x1,0x60,0x40,0x52,0x80,0x93,0x92,0x91,0x90,0x81,0x81,0x52,0x60,0x20,0x1,0x83,0x83,0x80,0x82,0x84,0x37,0x82,0x1,0x91,0x50,0x50,0x50,0x50,0x50,0x50,0x91,0x92,0x91,0x92,0x90,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xa5,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x1,0x20,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x29,0x61,0x2,0xa1,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x37,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x40,0x61,0x2,0xe3,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x4e,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x57,0x61,0x3,0xfc,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x61,0x1,0xa1,0x61,0x1,0xa3,0x56,0x5b,0x0,0x5b,0x56,0x5b,0x60,0x0,0x65,0x56,0x47,0x91,0x71,0xe7,0x4,0x65,0x5a,0xf3,0x10,0x7a,0x40,0x0,0x83,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x6c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x81,0x52,0x60,0x14,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0x20,0x60,0x1,0x90,0x4,0x81,0x15,0x15,0x61,0x2,0x13,0x57,0xfe,0x5b,0x6,0x14,0x15,0x61,0x2,0x33,0x57,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x65,0x5a,0xf3,0x10,0x7a,0x40,0x0,0x82,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x6c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x81,0x52,0x60,0x14,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0x20,0x60,0x1,0x90,0x4,0x81,0x15,0x15,0x61,0x2,0x98,0x57,0xfe,0x5b,0x6,0x90,0x50,0x92,0x91,0x50,0x50,0x56,0x5b,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x56,0x5b,0x60,0x0,0x80,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x61,0x3,0xf9,0x57,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x50,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x80,0x61,0x3,0xb8,0x57,0x50,0x68,0x36,0x35,0xc9,0xad,0xc5,0xde,0xa0,0x0,0x0,0x81,0x10,0x5b,0x15,0x61,0x3,0xc2,0x57,0x60,0x0,0x90,0x50,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x82,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x50,0x5b,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x29,0xc1,0x28,0xc6,0x4e,0xfc,0x3a,0x7,0x26,0x3e,0x7b,0xea,0x87,0x96,0x18,0x85,0x14,0x19,0xfe,0x4b,0x21,0xbd,0x3,0x6c,0x8a,0xcb,0x51,0x90,0x8c,0xda,0x8,0x1f,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_HelpMeSave::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_HelpMeSave::constructor_args() {
    return _constructor_args;
}
