[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(3)] ❌
[Trimmer Stage: Transactions(2)] ❌
[Trimmer Stage: Transactions(1)] ✔️
[Trimmer Stage: Transactions(0)] ✔️
[Trimmer Stage: TransactionHeader(1, BlockAdvance(0))] ✔️
[Trimmer Stage: TransactionHeader(0, BlockAdvance(0))] ✔️
[Trimmer Stage: Returns(1, 1)] ✔️
[Trimmer Stage: Returns(1, 0)] ✔️
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(1, 7)] ❌
[Trimmer Stage: Sender(1, 6)] ❌
[Trimmer Stage: Sender(1, 5)] ❌
[Trimmer Stage: Sender(1, 4)] ✔️
[Trimmer Stage: Sender(1, 3)] ❌
[Trimmer Stage: Sender(1, 2)] ❌
[Trimmer Stage: Sender(1, 1)] ❌
[Trimmer Stage: Sender(1, 0)] ❌
[Trimmer Stage: Sender(0, 7)] ❌
[Trimmer Stage: Sender(0, 6)] ❌
[Trimmer Stage: Sender(0, 5)] ❌
[Trimmer Stage: Sender(0, 4)] ✔️
[Trimmer Stage: Sender(0, 3)] ❌
[Trimmer Stage: Sender(0, 2)] ❌
[Trimmer Stage: Sender(0, 1)] ❌
[Trimmer Stage: Sender(0, 0)] ❌
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(3814697265625))] ❌
[Trimmer Stage: BlockHeader(InitialEther(100000))] ❌
[Trimmer Stage: BlockHeader(InitialEther(10000))] ❌
[Trimmer Stage: BlockHeader(InitialEther(10))] ❌
[Trimmer Stage: BlockHeader(InitialEther(5))] ❌
[Trimmer Stage: BlockHeader(InitialEther(2))] ❌
[Trimmer Stage: BlockHeader(InitialEther(1))] ❌
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ we try sorting the transaction list ]
reduced testcases from 540 to 80 bytes (by 86 %) edit distance 485
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 10000000000000000000

TX[0] with tx_sender[1]; tx_receiver[0]; call_value: 0x150894e849b39000000000000000000; length: 0; block+=0; #returns=0
  input: 
TX[1] with tx_sender[3]; tx_receiver[0]; call_value: 0x0; length: 132; block+=1; #returns=0
  func: recovery(string,address):(uint256) (0x6b5ad18)
  input: { string[32]("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"), address(0xc3cf2af7ea37d6d9d0a23bdf84c71e8c099d03c2),  }
TX[2] with tx_sender[58]; tx_receiver[0]; call_value: 0x0; length: 4; block+=1; #returns=0
  func: MyTestWallet7() (0x22d122a9)
  input: {  }
TX[3] with tx_sender[46]; tx_receiver[0]; call_value: 0x0; length: 4; block+=1; #returns=2
  func: withdraw() (0x3ccfd60b)
  input: {  }
  returns:
    return val: 1; allows reenter: 0; data: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000000
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 10000000000000000000

TX[0] with tx_sender[4]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: MyTestWallet7() (0x22d122a9)
  input: {  }
TX[1] with tx_sender[4]; tx_receiver[0]; call_value: 0x0; length: 4; block+=0; #returns=0
  func: withdraw() (0x3ccfd60b)
  input: {  }
