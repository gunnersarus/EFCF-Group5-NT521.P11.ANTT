// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/MyNewBank.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x78,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x2e,0x1a,0x7d,0x4d,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x82,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x41,0xc0,0xe1,0xb5,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0xaf,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x8d,0xa5,0xcb,0x5b,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xc6,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0xd0,0xe3,0x0d,0xb0,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x01,0x1d,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x80, /* [98'0x62] DUP1 */
0x63, /* [99'0x63] PUSH4 */
0xe1,0xc7,0x39,0x2a,/* constant data */
0x14, /* [104'0x68] EQ */
0x61, /* [105'0x69] PUSH2 */
0x01,0x27,/* constant data */
0x57, /* [108'0x6c] JUMPI */
0x80, /* [109'0x6d] DUP1 */
0x63, /* [110'0x6e] PUSH4 */
0xfc,0x7e,0x28,0x6d,/* constant data */
0x14, /* [115'0x73] EQ */
0x61, /* [116'0x74] PUSH2 */
0x01,0x3e,/* constant data */
0x57, /* [119'0x77] JUMPI */
0x5b, /* [120'0x78] JUMPDEST */
0x61, /* [121'0x79] PUSH2 */
0x00,0x80,/* constant data */
0x61, /* [124'0x7c] PUSH2 */
0x01,0x95,/* constant data */
0x56, /* [127'0x7f] JUMP */
0x5b, /* [128'0x80] JUMPDEST */
0x00, /* [129'0x81] STOP */
0x5b, /* [130'0x82] JUMPDEST */
0x34, /* [131'0x83] CALLVALUE */
0x80, /* [132'0x84] DUP1 */
0x15, /* [133'0x85] ISZERO */
0x61, /* [134'0x86] PUSH2 */
0x00,0x8e,/* constant data */
0x57, /* [137'0x89] JUMPI */
0x60, /* [138'0x8a] PUSH1 */
0x00,/* constant data */
0x80, /* [140'0x8c] DUP1 */
0xfd, /* [141'0x8d] REVERT */
0x5b, /* [142'0x8e] JUMPDEST */
0x50, /* [143'0x8f] POP */
0x61, /* [144'0x90] PUSH2 */
0x00,0xad,/* constant data */
0x60, /* [147'0x93] PUSH1 */
0x04,/* constant data */
0x80, /* [149'0x95] DUP1 */
0x36, /* [150'0x96] CALLDATASIZE */
0x03, /* [151'0x97] SUB */
0x81, /* [152'0x98] DUP2 */
0x01, /* [153'0x99] ADD */
0x90, /* [154'0x9a] SWAP1 */
0x80, /* [155'0x9b] DUP1 */
0x80, /* [156'0x9c] DUP1 */
0x35, /* [157'0x9d] CALLDATALOAD */
0x90, /* [158'0x9e] SWAP1 */
0x60, /* [159'0x9f] PUSH1 */
0x20,/* constant data */
0x01, /* [161'0xa1] ADD */
0x90, /* [162'0xa2] SWAP1 */
0x92, /* [163'0xa3] SWAP3 */
0x91, /* [164'0xa4] SWAP2 */
0x90, /* [165'0xa5] SWAP1 */
0x50, /* [166'0xa6] POP */
0x50, /* [167'0xa7] POP */
0x50, /* [168'0xa8] POP */
0x61, /* [169'0xa9] PUSH2 */
0x01,0xff,/* constant data */
0x56, /* [172'0xac] JUMP */
0x5b, /* [173'0xad] JUMPDEST */
0x00, /* [174'0xae] STOP */
0x5b, /* [175'0xaf] JUMPDEST */
0x34, /* [176'0xb0] CALLVALUE */
0x80, /* [177'0xb1] DUP1 */
0x15, /* [178'0xb2] ISZERO */
0x61, /* [179'0xb3] PUSH2 */
0x00,0xbb,/* constant data */
0x57, /* [182'0xb6] JUMPI */
0x60, /* [183'0xb7] PUSH1 */
0x00,/* constant data */
0x80, /* [185'0xb9] DUP1 */
0xfd, /* [186'0xba] REVERT */
0x5b, /* [187'0xbb] JUMPDEST */
0x50, /* [188'0xbc] POP */
0x61, /* [189'0xbd] PUSH2 */
0x00,0xc4,/* constant data */
0x61, /* [192'0xc0] PUSH2 */
0x02,0xfa,/* constant data */
0x56, /* [195'0xc3] JUMP */
0x5b, /* [196'0xc4] JUMPDEST */
0x00, /* [197'0xc5] STOP */
0x5b, /* [198'0xc6] JUMPDEST */
0x34, /* [199'0xc7] CALLVALUE */
0x80, /* [200'0xc8] DUP1 */
0x15, /* [201'0xc9] ISZERO */
0x61, /* [202'0xca] PUSH2 */
0x00,0xd2,/* constant data */
0x57, /* [205'0xcd] JUMPI */
0x60, /* [206'0xce] PUSH1 */
0x00,/* constant data */
0x80, /* [208'0xd0] DUP1 */
0xfd, /* [209'0xd1] REVERT */
0x5b, /* [210'0xd2] JUMPDEST */
0x50, /* [211'0xd3] POP */
0x61, /* [212'0xd4] PUSH2 */
0x00,0xdb,/* constant data */
0x61, /* [215'0xd7] PUSH2 */
0x03,0x90,/* constant data */
0x56, /* [218'0xda] JUMP */
0x5b, /* [219'0xdb] JUMPDEST */
0x60, /* [220'0xdc] PUSH1 */
0x40,/* constant data */
0x51, /* [222'0xde] MLOAD */
0x80, /* [223'0xdf] DUP1 */
0x82, /* [224'0xe0] DUP3 */
0x73, /* [225'0xe1] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [246'0xf6] AND */
0x73, /* [247'0xf7] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [268'0x10c] AND */
0x81, /* [269'0x10d] DUP2 */
0x52, /* [270'0x10e] MSTORE */
0x60, /* [271'0x10f] PUSH1 */
0x20,/* constant data */
0x01, /* [273'0x111] ADD */
0x91, /* [274'0x112] SWAP2 */
0x50, /* [275'0x113] POP */
0x50, /* [276'0x114] POP */
0x60, /* [277'0x115] PUSH1 */
0x40,/* constant data */
0x51, /* [279'0x117] MLOAD */
0x80, /* [280'0x118] DUP1 */
0x91, /* [281'0x119] SWAP2 */
0x03, /* [282'0x11a] SUB */
0x90, /* [283'0x11b] SWAP1 */
0xf3, /* [284'0x11c] RETURN */
0x5b, /* [285'0x11d] JUMPDEST */
0x61, /* [286'0x11e] PUSH2 */
0x01,0x25,/* constant data */
0x61, /* [289'0x121] PUSH2 */
0x01,0x95,/* constant data */
0x56, /* [292'0x124] JUMP */
0x5b, /* [293'0x125] JUMPDEST */
0x00, /* [294'0x126] STOP */
0x5b, /* [295'0x127] JUMPDEST */
0x34, /* [296'0x128] CALLVALUE */
0x80, /* [297'0x129] DUP1 */
0x15, /* [298'0x12a] ISZERO */
0x61, /* [299'0x12b] PUSH2 */
0x01,0x33,/* constant data */
0x57, /* [302'0x12e] JUMPI */
0x60, /* [303'0x12f] PUSH1 */
0x00,/* constant data */
0x80, /* [305'0x131] DUP1 */
0xfd, /* [306'0x132] REVERT */
0x5b, /* [307'0x133] JUMPDEST */
0x50, /* [308'0x134] POP */
0x61, /* [309'0x135] PUSH2 */
0x01,0x3c,/* constant data */
0x61, /* [312'0x138] PUSH2 */
0x03,0xb6,/* constant data */
0x56, /* [315'0x13b] JUMP */
0x5b, /* [316'0x13c] JUMPDEST */
0x00, /* [317'0x13d] STOP */
0x5b, /* [318'0x13e] JUMPDEST */
0x34, /* [319'0x13f] CALLVALUE */
0x80, /* [320'0x140] DUP1 */
0x15, /* [321'0x141] ISZERO */
0x61, /* [322'0x142] PUSH2 */
0x01,0x4a,/* constant data */
0x57, /* [325'0x145] JUMPI */
0x60, /* [326'0x146] PUSH1 */
0x00,/* constant data */
0x80, /* [328'0x148] DUP1 */
0xfd, /* [329'0x149] REVERT */
0x5b, /* [330'0x14a] JUMPDEST */
0x50, /* [331'0x14b] POP */
0x61, /* [332'0x14c] PUSH2 */
0x01,0x7f,/* constant data */
0x60, /* [335'0x14f] PUSH1 */
0x04,/* constant data */
0x80, /* [337'0x151] DUP1 */
0x36, /* [338'0x152] CALLDATASIZE */
0x03, /* [339'0x153] SUB */
0x81, /* [340'0x154] DUP2 */
0x01, /* [341'0x155] ADD */
0x90, /* [342'0x156] SWAP1 */
0x80, /* [343'0x157] DUP1 */
0x80, /* [344'0x158] DUP1 */
0x35, /* [345'0x159] CALLDATALOAD */
0x73, /* [346'0x15a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [367'0x16f] AND */
0x90, /* [368'0x170] SWAP1 */
0x60, /* [369'0x171] PUSH1 */
0x20,/* constant data */
0x01, /* [371'0x173] ADD */
0x90, /* [372'0x174] SWAP1 */
0x92, /* [373'0x175] SWAP3 */
0x91, /* [374'0x176] SWAP2 */
0x90, /* [375'0x177] SWAP1 */
0x50, /* [376'0x178] POP */
0x50, /* [377'0x179] POP */
0x50, /* [378'0x17a] POP */
0x61, /* [379'0x17b] PUSH2 */
0x03,0xf9,/* constant data */
0x56, /* [382'0x17e] JUMP */
0x5b, /* [383'0x17f] JUMPDEST */
0x60, /* [384'0x180] PUSH1 */
0x40,/* constant data */
0x51, /* [386'0x182] MLOAD */
0x80, /* [387'0x183] DUP1 */
0x82, /* [388'0x184] DUP3 */
0x81, /* [389'0x185] DUP2 */
0x52, /* [390'0x186] MSTORE */
0x60, /* [391'0x187] PUSH1 */
0x20,/* constant data */
0x01, /* [393'0x189] ADD */
0x91, /* [394'0x18a] SWAP2 */
0x50, /* [395'0x18b] POP */
0x50, /* [396'0x18c] POP */
0x60, /* [397'0x18d] PUSH1 */
0x40,/* constant data */
0x51, /* [399'0x18f] MLOAD */
0x80, /* [400'0x190] DUP1 */
0x91, /* [401'0x191] SWAP2 */
0x03, /* [402'0x192] SUB */
0x90, /* [403'0x193] SWAP1 */
0xf3, /* [404'0x194] RETURN */
0x5b, /* [405'0x195] JUMPDEST */
0x67, /* [406'0x196] PUSH8 */
0x01,0x63,0x45,0x78,0x5d,0x8a,0x00,0x00,/* constant data */
0x34, /* [415'0x19f] CALLVALUE */
0x10, /* [416'0x1a0] LT */
0x15, /* [417'0x1a1] ISZERO */
0x15, /* [418'0x1a2] ISZERO */
0x61, /* [419'0x1a3] PUSH2 */
0x01,0xf8,/* constant data */
0x57, /* [422'0x1a6] JUMPI */
0x34, /* [423'0x1a7] CALLVALUE */
0x60, /* [424'0x1a8] PUSH1 */
0x02,/* constant data */
0x60, /* [426'0x1aa] PUSH1 */
0x00,/* constant data */
0x33, /* [428'0x1ac] CALLER */
0x73, /* [429'0x1ad] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [450'0x1c2] AND */
0x73, /* [451'0x1c3] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [472'0x1d8] AND */
0x81, /* [473'0x1d9] DUP2 */
0x52, /* [474'0x1da] MSTORE */
0x60, /* [475'0x1db] PUSH1 */
0x20,/* constant data */
0x01, /* [477'0x1dd] ADD */
0x90, /* [478'0x1de] SWAP1 */
0x81, /* [479'0x1df] DUP2 */
0x52, /* [480'0x1e0] MSTORE */
0x60, /* [481'0x1e1] PUSH1 */
0x20,/* constant data */
0x01, /* [483'0x1e3] ADD */
0x60, /* [484'0x1e4] PUSH1 */
0x00,/* constant data */
0x20, /* [486'0x1e6] SHA3 */
0x60, /* [487'0x1e7] PUSH1 */
0x00,/* constant data */
0x82, /* [489'0x1e9] DUP3 */
0x82, /* [490'0x1ea] DUP3 */
0x54, /* [491'0x1eb] SLOAD */
0x01, /* [492'0x1ec] ADD */
0x92, /* [493'0x1ed] SWAP3 */
0x50, /* [494'0x1ee] POP */
0x50, /* [495'0x1ef] POP */
0x81, /* [496'0x1f0] DUP2 */
0x90, /* [497'0x1f1] SWAP1 */
0x55, /* [498'0x1f2] SSTORE */
0x50, /* [499'0x1f3] POP */
0x61, /* [500'0x1f4] PUSH2 */
0x01,0xfd,/* constant data */
0x56, /* [503'0x1f7] JUMP */
0x5b, /* [504'0x1f8] JUMPDEST */
0x60, /* [505'0x1f9] PUSH1 */
0x00,/* constant data */
0x80, /* [507'0x1fb] DUP1 */
0xfd, /* [508'0x1fc] REVERT */
0x5b, /* [509'0x1fd] JUMPDEST */
0x56, /* [510'0x1fe] JUMP */
0x5b, /* [511'0x1ff] JUMPDEST */
0x60, /* [512'0x200] PUSH1 */
0x00,/* constant data */
0x80, /* [514'0x202] DUP1 */
0x60, /* [515'0x203] PUSH1 */
0x00,/* constant data */
0x90, /* [517'0x205] SWAP1 */
0x54, /* [518'0x206] SLOAD */
0x90, /* [519'0x207] SWAP1 */
0x61, /* [520'0x208] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [523'0x20b] EXP */
0x90, /* [524'0x20c] SWAP1 */
0x04, /* [525'0x20d] DIV */
0x73, /* [526'0x20e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [547'0x223] AND */
0x73, /* [548'0x224] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [569'0x239] AND */
0x33, /* [570'0x23a] CALLER */
0x73, /* [571'0x23b] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [592'0x250] AND */
0x14, /* [593'0x251] EQ */
0x15, /* [594'0x252] ISZERO */
0x15, /* [595'0x253] ISZERO */
0x61, /* [596'0x254] PUSH2 */
0x02,0x5c,/* constant data */
0x57, /* [599'0x257] JUMPI */
0x60, /* [600'0x258] PUSH1 */
0x00,/* constant data */
0x80, /* [602'0x25a] DUP1 */
0xfd, /* [603'0x25b] REVERT */
0x5b, /* [604'0x25c] JUMPDEST */
0x60, /* [605'0x25d] PUSH1 */
0x00,/* constant data */
0x82, /* [607'0x25f] DUP3 */
0x11, /* [608'0x260] GT */
0x15, /* [609'0x261] ISZERO */
0x15, /* [610'0x262] ISZERO */
0x61, /* [611'0x263] PUSH2 */
0x02,0x6b,/* constant data */
0x57, /* [614'0x266] JUMPI */
0x60, /* [615'0x267] PUSH1 */
0x00,/* constant data */
0x80, /* [617'0x269] DUP1 */
0xfd, /* [618'0x26a] REVERT */
0x5b, /* [619'0x26b] JUMPDEST */
0x60, /* [620'0x26c] PUSH1 */
0x02,/* constant data */
0x60, /* [622'0x26e] PUSH1 */
0x00,/* constant data */
0x33, /* [624'0x270] CALLER */
0x73, /* [625'0x271] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [646'0x286] AND */
0x73, /* [647'0x287] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [668'0x29c] AND */
0x81, /* [669'0x29d] DUP2 */
0x52, /* [670'0x29e] MSTORE */
0x60, /* [671'0x29f] PUSH1 */
0x20,/* constant data */
0x01, /* [673'0x2a1] ADD */
0x90, /* [674'0x2a2] SWAP1 */
0x81, /* [675'0x2a3] DUP2 */
0x52, /* [676'0x2a4] MSTORE */
0x60, /* [677'0x2a5] PUSH1 */
0x20,/* constant data */
0x01, /* [679'0x2a7] ADD */
0x60, /* [680'0x2a8] PUSH1 */
0x00,/* constant data */
0x20, /* [682'0x2aa] SHA3 */
0x54, /* [683'0x2ab] SLOAD */
0x90, /* [684'0x2ac] SWAP1 */
0x50, /* [685'0x2ad] POP */
0x80, /* [686'0x2ae] DUP1 */
0x82, /* [687'0x2af] DUP3 */
0x11, /* [688'0x2b0] GT */
0x15, /* [689'0x2b1] ISZERO */
0x15, /* [690'0x2b2] ISZERO */
0x61, /* [691'0x2b3] PUSH2 */
0x02,0xf1,/* constant data */
0x57, /* [694'0x2b6] JUMPI */
0x33, /* [695'0x2b7] CALLER */
0x73, /* [696'0x2b8] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [717'0x2cd] AND */
0x61, /* [718'0x2ce] PUSH2 */
0x08,0xfc,/* constant data */
0x83, /* [721'0x2d1] DUP4 */
0x90, /* [722'0x2d2] SWAP1 */
0x81, /* [723'0x2d3] DUP2 */
0x15, /* [724'0x2d4] ISZERO */
0x02, /* [725'0x2d5] MUL */
0x90, /* [726'0x2d6] SWAP1 */
0x60, /* [727'0x2d7] PUSH1 */
0x40,/* constant data */
0x51, /* [729'0x2d9] MLOAD */
0x60, /* [730'0x2da] PUSH1 */
0x00,/* constant data */
0x60, /* [732'0x2dc] PUSH1 */
0x40,/* constant data */
0x51, /* [734'0x2de] MLOAD */
0x80, /* [735'0x2df] DUP1 */
0x83, /* [736'0x2e0] DUP4 */
0x03, /* [737'0x2e1] SUB */
0x81, /* [738'0x2e2] DUP2 */
0x85, /* [739'0x2e3] DUP6 */
0x88, /* [740'0x2e4] DUP9 */
0x88, /* [741'0x2e5] DUP9 */
0xf1, /* [742'0x2e6] CALL */
0x93, /* [743'0x2e7] SWAP4 */
0x50, /* [744'0x2e8] POP */
0x50, /* [745'0x2e9] POP */
0x50, /* [746'0x2ea] POP */
0x50, /* [747'0x2eb] POP */
0x50, /* [748'0x2ec] POP */
0x61, /* [749'0x2ed] PUSH2 */
0x02,0xf6,/* constant data */
0x56, /* [752'0x2f0] JUMP */
0x5b, /* [753'0x2f1] JUMPDEST */
0x60, /* [754'0x2f2] PUSH1 */
0x00,/* constant data */
0x80, /* [756'0x2f4] DUP1 */
0xfd, /* [757'0x2f5] REVERT */
0x5b, /* [758'0x2f6] JUMPDEST */
0x50, /* [759'0x2f7] POP */
0x50, /* [760'0x2f8] POP */
0x56, /* [761'0x2f9] JUMP */
0x5b, /* [762'0x2fa] JUMPDEST */
0x60, /* [763'0x2fb] PUSH1 */
0x00,/* constant data */
0x80, /* [765'0x2fd] DUP1 */
0x90, /* [766'0x2fe] SWAP1 */
0x54, /* [767'0x2ff] SLOAD */
0x90, /* [768'0x300] SWAP1 */
0x61, /* [769'0x301] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [772'0x304] EXP */
0x90, /* [773'0x305] SWAP1 */
0x04, /* [774'0x306] DIV */
0x73, /* [775'0x307] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [796'0x31c] AND */
0x73, /* [797'0x31d] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [818'0x332] AND */
0x33, /* [819'0x333] CALLER */
0x73, /* [820'0x334] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [841'0x349] AND */
0x14, /* [842'0x34a] EQ */
0x15, /* [843'0x34b] ISZERO */
0x15, /* [844'0x34c] ISZERO */
0x61, /* [845'0x34d] PUSH2 */
0x03,0x55,/* constant data */
0x57, /* [848'0x350] JUMPI */
0x60, /* [849'0x351] PUSH1 */
0x00,/* constant data */
0x80, /* [851'0x353] DUP1 */
0xfd, /* [852'0x354] REVERT */
0x5b, /* [853'0x355] JUMPDEST */
0x60, /* [854'0x356] PUSH1 */
0x00,/* constant data */
0x30, /* [856'0x358] ADDRESS */
0x73, /* [857'0x359] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [878'0x36e] AND */
0x31, /* [879'0x36f] BALANCE */
0x14, /* [880'0x370] EQ */
0x15, /* [881'0x371] ISZERO */
0x61, /* [882'0x372] PUSH2 */
0x03,0x8e,/* constant data */
0x57, /* [885'0x375] JUMPI */
0x33, /* [886'0x376] CALLER */
0x73, /* [887'0x377] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [908'0x38c] AND */
0xff, /* [909'0x38d] SELFDESTRUCT */
0x5b, /* [910'0x38e] JUMPDEST */
0x56, /* [911'0x38f] JUMP */
0x5b, /* [912'0x390] JUMPDEST */
0x60, /* [913'0x391] PUSH1 */
0x01,/* constant data */
0x60, /* [915'0x393] PUSH1 */
0x00,/* constant data */
0x90, /* [917'0x395] SWAP1 */
0x54, /* [918'0x396] SLOAD */
0x90, /* [919'0x397] SWAP1 */
0x61, /* [920'0x398] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [923'0x39b] EXP */
0x90, /* [924'0x39c] SWAP1 */
0x04, /* [925'0x39d] DIV */
0x73, /* [926'0x39e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [947'0x3b3] AND */
0x81, /* [948'0x3b4] DUP2 */
0x56, /* [949'0x3b5] JUMP */
0x5b, /* [950'0x3b6] JUMPDEST */
0x33, /* [951'0x3b7] CALLER */
0x60, /* [952'0x3b8] PUSH1 */
0x01,/* constant data */
0x60, /* [954'0x3ba] PUSH1 */
0x00,/* constant data */
0x61, /* [956'0x3bc] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [959'0x3bf] EXP */
0x81, /* [960'0x3c0] DUP2 */
0x54, /* [961'0x3c1] SLOAD */
0x81, /* [962'0x3c2] DUP2 */
0x73, /* [963'0x3c3] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [984'0x3d8] MUL */
0x19, /* [985'0x3d9] NOT */
0x16, /* [986'0x3da] AND */
0x90, /* [987'0x3db] SWAP1 */
0x83, /* [988'0x3dc] DUP4 */
0x73, /* [989'0x3dd] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1010'0x3f2] AND */
0x02, /* [1011'0x3f3] MUL */
0x17, /* [1012'0x3f4] OR */
0x90, /* [1013'0x3f5] SWAP1 */
0x55, /* [1014'0x3f6] SSTORE */
0x50, /* [1015'0x3f7] POP */
0x56, /* [1016'0x3f8] JUMP */
0x5b, /* [1017'0x3f9] JUMPDEST */
0x60, /* [1018'0x3fa] PUSH1 */
0x02,/* constant data */
0x60, /* [1020'0x3fc] PUSH1 */
0x20,/* constant data */
0x52, /* [1022'0x3fe] MSTORE */
0x80, /* [1023'0x3ff] DUP1 */
0x60, /* [1024'0x400] PUSH1 */
0x00,/* constant data */
0x52, /* [1026'0x402] MSTORE */
0x60, /* [1027'0x403] PUSH1 */
0x40,/* constant data */
0x60, /* [1029'0x405] PUSH1 */
0x00,/* constant data */
0x20, /* [1031'0x407] SHA3 */
0x60, /* [1032'0x408] PUSH1 */
0x00,/* constant data */
0x91, /* [1034'0x40a] SWAP2 */
0x50, /* [1035'0x40b] POP */
0x90, /* [1036'0x40c] SWAP1 */
0x50, /* [1037'0x40d] POP */
0x54, /* [1038'0x40e] SLOAD */
0x81, /* [1039'0x40f] DUP2 */
0x56, /* [1040'0x410] JUMP */
0x00, /* [1041'0x411] STOP */
0xa1, /* [1042'0x412] LOG1 */
0x65, /* [1043'0x413] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [1050'0x41a] SHA3 */
0x92, /* [1051'0x41b] SWAP3 */
0xe7, /* [1052'0x41c] INVALID' byte */
0x7d, /* [1053'0x41d] PUSH30 */
0xe3,0x84,0xcd,0x07,0x17,0xc5,0xea,0x4a,0x07,0x92,0xf2,0x1b,0x35,0xd6,0x57,0xed,0xaa,0x3e,0x5d,0x4b,0x48,0x91,0x6b,0x7b,0xf2,0x9c,0x6a,0x19,0xaa,0x00,/* constant data */
0x29, /* [1084'0x43c] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_MyNewBank::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_MyNewBank::_contract_name = "MyNewBank";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_MyNewBank> eevm::EVM2CPP_MyNewBank::reg{};
const std::string& eevm::EVM2CPP_MyNewBank::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_78 = 0x78_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_82 = 0x82_u256;
constexpr uint256_t c_8e = 0x8e_u256;
constexpr uint256_t c_ad = 0xad_u256;
constexpr uint256_t c_af = 0xaf_u256;
constexpr uint256_t c_bb = 0xbb_u256;
constexpr uint256_t c_c4 = 0xc4_u256;
constexpr uint256_t c_c6 = 0xc6_u256;
constexpr uint256_t c_d2 = 0xd2_u256;
constexpr uint256_t c_db = 0xdb_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_11d = 0x11d_u256;
constexpr uint256_t c_125 = 0x125_u256;
constexpr uint256_t c_127 = 0x127_u256;
constexpr uint256_t c_133 = 0x133_u256;
constexpr uint256_t c_13c = 0x13c_u256;
constexpr uint256_t c_13e = 0x13e_u256;
constexpr uint256_t c_14a = 0x14a_u256;
constexpr uint256_t c_17f = 0x17f_u256;
constexpr uint256_t c_195 = 0x195_u256;
constexpr uint256_t c_1f8 = 0x1f8_u256;
constexpr uint256_t c_1fd = 0x1fd_u256;
constexpr uint256_t c_1ff = 0x1ff_u256;
constexpr uint256_t c_25c = 0x25c_u256;
constexpr uint256_t c_26b = 0x26b_u256;
constexpr uint256_t c_2f1 = 0x2f1_u256;
constexpr uint256_t c_2f6 = 0x2f6_u256;
constexpr uint256_t c_2fa = 0x2fa_u256;
constexpr uint256_t c_355 = 0x355_u256;
constexpr uint256_t c_38e = 0x38e_u256;
constexpr uint256_t c_390 = 0x390_u256;
constexpr uint256_t c_3b6 = 0x3b6_u256;
constexpr uint256_t c_3f9 = 0x3f9_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_2e1a7d4d = 0x2e1a7d4d_u256;
constexpr uint256_t c_41c0e1b5 = 0x41c0e1b5_u256;
constexpr uint256_t c_8da5cb5b = 0x8da5cb5b_u256;
constexpr uint256_t c_d0e30db0 = 0xd0e30db0_u256;
constexpr uint256_t c_e1c7392a = 0xe1c7392a_u256;
constexpr uint256_t c_fc7e286d = 0xfc7e286d_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_53 = 0x627a7a723058_u256;
constexpr uint256_t g_39 = 0x16345785d8a0000_u256;
constexpr uint256_t g_31 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_52 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_MyNewBank::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_78,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_80,
&&__invld,
&&pc_82,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_8e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_ad,
&&__invld,
&&pc_af,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_bb,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c4,
&&__invld,
&&pc_c6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_d2,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_db,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_11d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_125,
&&__invld,
&&pc_127,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_133,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_13c,
&&__invld,
&&pc_13e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_14a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_17f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_195,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1f8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1fd,
&&__invld,
&&pc_1ff,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_25c,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_26b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2f1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2f6,
&&__invld,
&&__invld,
&&__invld,
&&pc_2fa,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_355,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_38e,
&&__invld,
&&pc_390,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3b6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [120] */

/* JUMPI */
/* op_0 = Constant((6, 120)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_78;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [773487949] */

/* EQ */
/* op_0 = Constant((8, 773487949)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_2e1a7d4d, v_6_0);


/* PUSH2 */
/* val = [130] */

/* JUMPI */
/* op_0 = Constant((10, 130)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_82;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1103159733] */

/* EQ */
/* op_0 = Constant((1, 1103159733)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_41c0e1b5, s_0_0);


/* PUSH2 */
/* val = [175] */

/* JUMPI */
/* op_0 = Constant((3, 175)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_af;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2376452955] */

/* EQ */
/* op_0 = Constant((1, 2376452955)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_8da5cb5b, s_0_0);


/* PUSH2 */
/* val = [198] */

/* JUMPI */
/* op_0 = Constant((3, 198)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_c6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3504541104] */

/* EQ */
/* op_0 = Constant((1, 3504541104)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d0e30db0, s_0_0);


/* PUSH2 */
/* val = [285] */

/* JUMPI */
/* op_0 = Constant((3, 285)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_11d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3787929898] */

/* EQ */
/* op_0 = Constant((1, 3787929898)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_e1c7392a, s_0_0);


/* PUSH2 */
/* val = [295] */

/* JUMPI */
/* op_0 = Constant((3, 295)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_127;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4236126317] */

/* EQ */
/* op_0 = Constant((1, 4236126317)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_fc7e286d, s_0_0);


/* PUSH2 */
/* val = [318] */

/* JUMPI */
/* op_0 = Constant((3, 318)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_13e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_78:
{ /* <============ */ 
on_bb_start(120);
/* JUMPDEST */

/* PUSH2 */
/* val = [128] */

/* PUSH2 */
/* val = [405] */

/* JUMP */
/* op_0 = Constant((2, 405)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 128))*/
ctxt->s.push(c_80);

goto pc_195;


}pc_80:
{ /* <============ */ 
on_bb_start(128);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_82:
{ /* <============ */ 
on_bb_start(130);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [142] */

/* JUMPI */
/* op_0 = Constant((4, 142)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_8e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_8a:
{ /* <============ */ 
on_bb_start(138);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_8e:
{ /* <============ */ 
on_bb_start(142);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [173] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((14, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((15, 36)) */
/* op_1 = InstructionRef((12, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((15, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [511] */

/* JUMP */
/* op_0 = Constant((23, 511)) */
/* BB finalizer */
ctxt->s.set(0, c_ad);
/* no pops at end */
/* BB return 0 InstructionRef((12, 0))*/
ctxt->s.push(v_12_0);

goto pc_1ff;


}pc_ad:
{ /* <============ */ 
on_bb_start(173);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_af:
{ /* <============ */ 
on_bb_start(175);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [187] */

/* JUMPI */
/* op_0 = Constant((4, 187)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_bb;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_b7:
{ /* <============ */ 
on_bb_start(183);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_bb:
{ /* <============ */ 
on_bb_start(187);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [196] */

/* PUSH2 */
/* val = [762] */

/* JUMP */
/* op_0 = Constant((3, 762)) */
/* BB finalizer */
ctxt->s.set(0, c_c4);
/* no pops at end */
/* no BB returns */

goto pc_2fa;


}pc_c4:
{ /* <============ */ 
on_bb_start(196);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c6:
{ /* <============ */ 
on_bb_start(198);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [210] */

/* JUMPI */
/* op_0 = Constant((4, 210)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_d2;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_ce:
{ /* <============ */ 
on_bb_start(206);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d2:
{ /* <============ */ 
on_bb_start(210);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [219] */

/* PUSH2 */
/* val = [912] */

/* JUMP */
/* op_0 = Constant((3, 912)) */
/* BB finalizer */
ctxt->s.set(0, c_db);
/* no pops at end */
/* no BB returns */

goto pc_390;


}pc_db:
{ /* <============ */ 
on_bb_start(219);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((5, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_6_0 = and_v(g_31, s_0_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((7, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = and_v(g_31, v_6_0);


/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = InstructionRef((8, 0)) */
mstore_v(v_2_0, v_8_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((11, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_12_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((16, 64)) */
const uint256_t v_17_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((17, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* SUB */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = InstructionRef((17, 0)) */
const uint256_t v_20_0 = sub_v(v_12_0, v_17_0);


/* SWAP1 */
/* op_0 = InstructionRef((20, 0)) */
/* op_1 = InstructionRef((17, 0)) */

/* RETURN */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((20, 0)) */
return_v(v_17_0, v_20_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_11d:
{ /* <============ */ 
on_bb_start(285);
/* JUMPDEST */

/* PUSH2 */
/* val = [293] */

/* PUSH2 */
/* val = [405] */

/* JUMP */
/* op_0 = Constant((2, 405)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 293))*/
ctxt->s.push(c_125);

goto pc_195;


}pc_125:
{ /* <============ */ 
on_bb_start(293);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_127:
{ /* <============ */ 
on_bb_start(295);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [307] */

/* JUMPI */
/* op_0 = Constant((4, 307)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_133;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_12f:
{ /* <============ */ 
on_bb_start(303);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_133:
{ /* <============ */ 
on_bb_start(307);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [316] */

/* PUSH2 */
/* val = [950] */

/* JUMP */
/* op_0 = Constant((3, 950)) */
/* BB finalizer */
ctxt->s.set(0, c_13c);
/* no pops at end */
/* no BB returns */

goto pc_3b6;


}pc_13c:
{ /* <============ */ 
on_bb_start(316);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_13e:
{ /* <============ */ 
on_bb_start(318);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [330] */

/* JUMPI */
/* op_0 = Constant((4, 330)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_14a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_146:
{ /* <============ */ 
on_bb_start(326);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_14a:
{ /* <============ */ 
on_bb_start(330);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [383] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_31, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [1017] */

/* JUMP */
/* op_0 = Constant((25, 1017)) */
/* BB finalizer */
ctxt->s.set(0, c_17f);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_3f9;


}pc_17f:
{ /* <============ */ 
on_bb_start(383);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_195:
{ /* <============ */ 
on_bb_start(405);
/* JUMPDEST */

/* PUSH8 */
/* val = [100000000000000000] */

/* CALLVALUE */
const uint256_t v_2_0 = callvalue_v();


/* LT */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = Constant((1, 100000000000000000)) */
const uint256_t v_3_0 = lt_v(v_2_0, g_39);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [504] */

/* JUMPI */
/* op_0 = Constant((6, 504)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1f8;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a7:
{ /* <============ */ 
on_bb_start(423);
/* CALLVALUE */
const uint256_t v_0_0 = callvalue_v();


/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_31, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_31, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 2)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = InstructionRef((0, 0)) */

/* DUP3 */
/* op_0 = InstructionRef((18, 0)) */

/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_22_0 = sload_v(v_18_0);


/* ADD */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((0, 0)) */
const uint256_t v_23_0 = add_v(v_22_0, v_0_0);


/* SWAP3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((0, 0)) */

/* POP */

/* POP */

/* DUP2 */
/* op_0 = InstructionRef((23, 0)) */

/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((18, 0)) */

/* SSTORE */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = InstructionRef((23, 0)) */
sstore_v(v_18_0, v_23_0);


/* POP */

/* PUSH2 */
/* val = [509] */

/* JUMP */
/* op_0 = Constant((31, 509)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_1fd;


}pc_1f8:
{ /* <============ */ 
on_bb_start(504);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1fd:
{ /* <============ */ 
on_bb_start(509);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_1ff:
{ /* <============ */ 
on_bb_start(511);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_5_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((7, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((8, 1)) */
/* op_1 = InstructionRef((5, 0)) */

/* DIV */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((8, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_12_0 = and_v(g_31, v_5_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_31, v_12_0);


/* CALLER */
const uint256_t v_15_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((15, 0)) */
const uint256_t v_17_0 = and_v(g_31, v_15_0);


/* EQ */
/* op_0 = InstructionRef((17, 0)) */
/* op_1 = InstructionRef((14, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_17_0, v_14_0);
const uint256_t v_18_0 = eq_v(v_17_0, v_14_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* ISZERO */
/* op_0 = InstructionRef((19, 0)) */
const uint256_t v_20_0 = iszero_v(v_19_0);


/* PUSH2 */
/* val = [604] */

/* JUMPI */
/* op_0 = Constant((21, 604)) */
/* op_1 = InstructionRef((20, 0)) */
if ( v_20_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
 
 goto pc_25c;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 0))*/
ctxt->s.push(c_0);
}pc_258:
{ /* <============ */ 
on_bb_start(600);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_25c:
{ /* <============ */ 
on_bb_start(604);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* GT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_3_0 = gt_v(s_0_1, c_0);


/* ISZERO */
/* op_0 = InstructionRef((3, 0)) */
const uint256_t v_4_0 = iszero_v(v_3_0);


/* ISZERO */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = iszero_v(v_4_0);


/* PUSH2 */
/* val = [619] */

/* JUMPI */
/* op_0 = Constant((6, 619)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_26b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_267:
{ /* <============ */ 
on_bb_start(615);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_26b:
{ /* <============ */ 
on_bb_start(619);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [0] */

/* CALLER */
const uint256_t v_3_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((4, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_5_0 = and_v(g_31, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((6, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((5, 0)) */
const uint256_t v_7_0 = and_v(g_31, v_5_0);


/* DUP2 */
/* op_0 = Constant((2, 0)) */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((2, 0)) */
/* op_1 = InstructionRef((7, 0)) */
mstore_v(c_0, v_7_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((10, 32)) */
/* op_1 = Constant((2, 0)) */
/* val = [32] */

/* SWAP1 */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 2)) */

/* DUP2 */
/* op_0 = Constant((11, 32)) */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((11, 32)) */
/* op_1 = Constant((1, 2)) */
mstore_v(c_20, c_2);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((15, 32)) */
/* op_1 = Constant((11, 32)) */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((17, 0)) */
/* op_1 = Constant((16, 64)) */
const uint256_t v_18_0 = sha3_v(c_0, c_40);


/* SLOAD */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = sload_v(v_18_0);


/* SWAP1 */
/* op_0 = InstructionRef((19, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* DUP1 */
/* op_0 = InstructionRef((19, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 1)) */

/* GT */
/* op_0 = StackRef((0, 1)) */
/* op_1 = InstructionRef((19, 0)) */
TRACE_COMP(eevm::Opcode::GT, s_0_1, v_19_0);
const uint256_t v_24_0 = gt_v(s_0_1, v_19_0);


/* ISZERO */
/* op_0 = InstructionRef((24, 0)) */
const uint256_t v_25_0 = iszero_v(v_24_0);


/* ISZERO */
/* op_0 = InstructionRef((25, 0)) */
const uint256_t v_26_0 = iszero_v(v_25_0);


/* PUSH2 */
/* val = [753] */

/* JUMPI */
/* op_0 = Constant((27, 753)) */
/* op_1 = InstructionRef((26, 0)) */
if ( v_26_0 ) { 
 /* BB finalizer */
ctxt->s.set(0, v_19_0);
/* no pops at end */
/* no BB returns */
 
 goto pc_2f1;
 
 }

/* BB finalizer */
ctxt->s.set(0, v_19_0);
/* no pops at end */
/* no BB returns */
}pc_2b7:
{ /* <============ */ 
on_bb_start(695);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* CALLER */
const uint256_t v_0_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((1, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((0, 0)) */
const uint256_t v_2_0 = and_v(g_31, v_0_0);


/* PUSH2 */
/* val = [2300] */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* SWAP1 */
/* op_0 = StackRef((0, 1)) */
/* op_1 = Constant((3, 2300)) */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* ISZERO */
/* op_0 = StackRef((0, 1)) */
const uint256_t v_7_0 = iszero_v(s_0_1);


/* MUL */
/* op_0 = InstructionRef((7, 0)) */
/* op_1 = Constant((3, 2300)) */
const uint256_t v_8_0 = mul_v(v_7_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((10, 64)) */
const uint256_t v_11_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((13, 64)) */
const uint256_t v_14_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((14, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((11, 0)) */

/* SUB */
/* op_0 = InstructionRef((11, 0)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_17_0 = sub_v(v_11_0, v_14_0);


/* DUP2 */
/* op_0 = InstructionRef((14, 0)) */

/* DUP6 */
/* op_0 = StackRef((0, 1)) */

/* DUP9 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((8, 0)) */

/* CALL */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((2, 0)) */
/* op_2 = StackRef((0, 1)) */
/* op_3 = InstructionRef((14, 0)) */
/* op_4 = InstructionRef((17, 0)) */
/* op_5 = InstructionRef((14, 0)) */
/* op_6 = Constant((12, 0)) */
const uint256_t v_22_0 = call_v(v_8_0, v_2_0, s_0_1, v_14_0, v_17_0, v_14_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((2, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [758] */

/* JUMP */
/* op_0 = Constant((29, 758)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */

goto pc_2f6;


}pc_2f1:
{ /* <============ */ 
on_bb_start(753);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2f6:
{ /* <============ */ 
on_bb_start(758);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_2fa:
{ /* <============ */ 
on_bb_start(762);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_31, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_31, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_31, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [853] */

/* JUMPI */
/* op_0 = Constant((20, 853)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_355;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_351:
{ /* <============ */ 
on_bb_start(849);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_355:
{ /* <============ */ 
on_bb_start(853);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* ADDRESS */
const uint256_t v_2_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((3, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_4_0 = and_v(g_31, v_2_0);


/* BALANCE */
/* op_0 = InstructionRef((4, 0)) */
const uint256_t v_5_0 = balance_v(v_4_0);


/* EQ */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((1, 0)) */
const uint256_t v_6_0 = eq_v(v_5_0, c_0);


/* ISZERO */
/* op_0 = InstructionRef((6, 0)) */
const uint256_t v_7_0 = iszero_v(v_6_0);


/* PUSH2 */
/* val = [910] */

/* JUMPI */
/* op_0 = Constant((8, 910)) */
/* op_1 = InstructionRef((7, 0)) */
if ( v_7_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_38e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_376:
{ /* <============ */ 
on_bb_start(886);
/* CALLER */
const uint256_t v_0_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((1, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((0, 0)) */
const uint256_t v_2_0 = and_v(g_31, v_0_0);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((2, 0)) */
selfdestruct_v(v_2_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_38e:
{ /* <============ */ 
on_bb_start(910);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_390:
{ /* <============ */ 
on_bb_start(912);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((2, 0)) */
/* op_1 = Constant((1, 1)) */

/* SLOAD */
/* op_0 = Constant((1, 1)) */
const uint256_t v_4_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((2, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((2, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_31, v_4_0);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((11, 0))*/
ctxt->s.push(v_11_0);

JUMP(s_0_0);


}pc_3b6:
{ /* <============ */ 
on_bb_start(950);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_7_0 = sload_v(c_1);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_52, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_31, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 1)) */

/* SSTORE */
/* op_0 = Constant((2, 1)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_1, v_18_0);


/* POP */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_3f9:
{ /* <============ */ 
on_bb_start(1017);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [32] */

/* MSTORE */
/* op_0 = Constant((2, 32)) */
/* op_1 = Constant((1, 2)) */
mstore_v(c_20, c_2);


/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [0] */

/* MSTORE */
/* op_0 = Constant((5, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(c_0, s_0_0);


/* PUSH1 */
/* val = [64] */

/* PUSH1 */
/* val = [0] */

/* SHA3 */
/* op_0 = Constant((8, 0)) */
/* op_1 = Constant((7, 64)) */
const uint256_t v_9_0 = sha3_v(c_0, c_40);


/* PUSH1 */
/* val = [0] */

/* SWAP2 */
/* op_0 = Constant((10, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* SWAP1 */
/* op_0 = InstructionRef((9, 0)) */
/* op_1 = Constant((10, 0)) */

/* POP */

/* SLOAD */
/* op_0 = InstructionRef((9, 0)) */
const uint256_t v_15_0 = sload_v(v_9_0);


/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
ctxt->s.set(0, v_15_0);
/* no pops at end */
/* no BB returns */

JUMP(s_0_1);


}pc_411:
{ /* <============ */ 
on_bb_start(1041);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_412:
{ /* <============ */ 
on_bb_start(1042);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_6 = ctxt->s.peek(6);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_53, s_0_3);


/* SWAP3 */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 6)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x412 (inst offset 4; byte 0xe7)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_41d:
{ /* <============ */ 
on_bb_start(1053);
/* PUSH30 */
/* val = [1570276725619148802549727876891528871110891642194333264215832047910496768] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x41d (inst offset 1; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x4,0x3d,0x80,0x61,0x0,0x53,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x78,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x2e,0x1a,0x7d,0x4d,0x14,0x61,0x0,0x82,0x57,0x80,0x63,0x41,0xc0,0xe1,0xb5,0x14,0x61,0x0,0xaf,0x57,0x80,0x63,0x8d,0xa5,0xcb,0x5b,0x14,0x61,0x0,0xc6,0x57,0x80,0x63,0xd0,0xe3,0xd,0xb0,0x14,0x61,0x1,0x1d,0x57,0x80,0x63,0xe1,0xc7,0x39,0x2a,0x14,0x61,0x1,0x27,0x57,0x80,0x63,0xfc,0x7e,0x28,0x6d,0x14,0x61,0x1,0x3e,0x57,0x5b,0x61,0x0,0x80,0x61,0x1,0x95,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x8e,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xad,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xff,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xbb,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xc4,0x61,0x2,0xfa,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0xd2,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xdb,0x61,0x3,0x90,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x61,0x1,0x25,0x61,0x1,0x95,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x33,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x3c,0x61,0x3,0xb6,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x4a,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x7f,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x3,0xf9,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x67,0x1,0x63,0x45,0x78,0x5d,0x8a,0x0,0x0,0x34,0x10,0x15,0x15,0x61,0x1,0xf8,0x57,0x34,0x60,0x2,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x60,0x0,0x82,0x82,0x54,0x1,0x92,0x50,0x50,0x81,0x90,0x55,0x50,0x61,0x1,0xfd,0x56,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x56,0x5b,0x60,0x0,0x80,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x2,0x5c,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x82,0x11,0x15,0x15,0x61,0x2,0x6b,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x2,0x60,0x0,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x52,0x60,0x20,0x1,0x90,0x81,0x52,0x60,0x20,0x1,0x60,0x0,0x20,0x54,0x90,0x50,0x80,0x82,0x11,0x15,0x15,0x61,0x2,0xf1,0x57,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x83,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x50,0x61,0x2,0xf6,0x56,0x5b,0x60,0x0,0x80,0xfd,0x5b,0x50,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x3,0x55,0x57,0x60,0x0,0x80,0xfd,0x5b,0x60,0x0,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x14,0x15,0x61,0x3,0x8e,0x57,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x56,0x5b,0x60,0x1,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x81,0x56,0x5b,0x33,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x56,0x5b,0x60,0x2,0x60,0x20,0x52,0x80,0x60,0x0,0x52,0x60,0x40,0x60,0x0,0x20,0x60,0x0,0x91,0x50,0x90,0x50,0x54,0x81,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x92,0xe7,0x7d,0xe3,0x84,0xcd,0x7,0x17,0xc5,0xea,0x4a,0x7,0x92,0xf2,0x1b,0x35,0xd6,0x57,0xed,0xaa,0x3e,0x5d,0x4b,0x48,0x91,0x6b,0x7b,0xf2,0x9c,0x6a,0x19,0xaa,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_MyNewBank::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_MyNewBank::constructor_args() {
    return _constructor_args;
}
