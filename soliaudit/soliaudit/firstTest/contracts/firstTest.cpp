// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/firstTest.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x6d,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x41,0xc0,0xe1,0xb5,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x77,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x4f,0x05,0x75,0x06,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x8e,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0xa6,0xf9,0xda,0xe1,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xb9,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0xd4,0xe9,0x32,0x92,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x00,0xfc,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x80, /* [98'0x62] DUP1 */
0x63, /* [99'0x63] PUSH4 */
0xfd,0x28,0xec,0x3e,/* constant data */
0x14, /* [104'0x68] EQ */
0x61, /* [105'0x69] PUSH2 */
0x01,0x06,/* constant data */
0x57, /* [108'0x6c] JUMPI */
0x5b, /* [109'0x6d] JUMPDEST */
0x61, /* [110'0x6e] PUSH2 */
0x00,0x75,/* constant data */
0x61, /* [113'0x71] PUSH2 */
0x01,0x53,/* constant data */
0x56, /* [116'0x74] JUMP */
0x5b, /* [117'0x75] JUMPDEST */
0x00, /* [118'0x76] STOP */
0x5b, /* [119'0x77] JUMPDEST */
0x34, /* [120'0x78] CALLVALUE */
0x80, /* [121'0x79] DUP1 */
0x15, /* [122'0x7a] ISZERO */
0x61, /* [123'0x7b] PUSH2 */
0x00,0x83,/* constant data */
0x57, /* [126'0x7e] JUMPI */
0x60, /* [127'0x7f] PUSH1 */
0x00,/* constant data */
0x80, /* [129'0x81] DUP1 */
0xfd, /* [130'0x82] REVERT */
0x5b, /* [131'0x83] JUMPDEST */
0x50, /* [132'0x84] POP */
0x61, /* [133'0x85] PUSH2 */
0x00,0x8c,/* constant data */
0x61, /* [136'0x88] PUSH2 */
0x02,0xde,/* constant data */
0x56, /* [139'0x8b] JUMP */
0x5b, /* [140'0x8c] JUMPDEST */
0x00, /* [141'0x8d] STOP */
0x5b, /* [142'0x8e] JUMPDEST */
0x34, /* [143'0x8f] CALLVALUE */
0x80, /* [144'0x90] DUP1 */
0x15, /* [145'0x91] ISZERO */
0x61, /* [146'0x92] PUSH2 */
0x00,0x9a,/* constant data */
0x57, /* [149'0x95] JUMPI */
0x60, /* [150'0x96] PUSH1 */
0x00,/* constant data */
0x80, /* [152'0x98] DUP1 */
0xfd, /* [153'0x99] REVERT */
0x5b, /* [154'0x9a] JUMPDEST */
0x50, /* [155'0x9b] POP */
0x61, /* [156'0x9c] PUSH2 */
0x00,0xa3,/* constant data */
0x61, /* [159'0x9f] PUSH2 */
0x03,0x52,/* constant data */
0x56, /* [162'0xa2] JUMP */
0x5b, /* [163'0xa3] JUMPDEST */
0x60, /* [164'0xa4] PUSH1 */
0x40,/* constant data */
0x51, /* [166'0xa6] MLOAD */
0x80, /* [167'0xa7] DUP1 */
0x82, /* [168'0xa8] DUP3 */
0x81, /* [169'0xa9] DUP2 */
0x52, /* [170'0xaa] MSTORE */
0x60, /* [171'0xab] PUSH1 */
0x20,/* constant data */
0x01, /* [173'0xad] ADD */
0x91, /* [174'0xae] SWAP2 */
0x50, /* [175'0xaf] POP */
0x50, /* [176'0xb0] POP */
0x60, /* [177'0xb1] PUSH1 */
0x40,/* constant data */
0x51, /* [179'0xb3] MLOAD */
0x80, /* [180'0xb4] DUP1 */
0x91, /* [181'0xb5] SWAP2 */
0x03, /* [182'0xb6] SUB */
0x90, /* [183'0xb7] SWAP1 */
0xf3, /* [184'0xb8] RETURN */
0x5b, /* [185'0xb9] JUMPDEST */
0x34, /* [186'0xba] CALLVALUE */
0x80, /* [187'0xbb] DUP1 */
0x15, /* [188'0xbc] ISZERO */
0x61, /* [189'0xbd] PUSH2 */
0x00,0xc5,/* constant data */
0x57, /* [192'0xc0] JUMPI */
0x60, /* [193'0xc1] PUSH1 */
0x00,/* constant data */
0x80, /* [195'0xc3] DUP1 */
0xfd, /* [196'0xc4] REVERT */
0x5b, /* [197'0xc5] JUMPDEST */
0x50, /* [198'0xc6] POP */
0x61, /* [199'0xc7] PUSH2 */
0x00,0xfa,/* constant data */
0x60, /* [202'0xca] PUSH1 */
0x04,/* constant data */
0x80, /* [204'0xcc] DUP1 */
0x36, /* [205'0xcd] CALLDATASIZE */
0x03, /* [206'0xce] SUB */
0x81, /* [207'0xcf] DUP2 */
0x01, /* [208'0xd0] ADD */
0x90, /* [209'0xd1] SWAP1 */
0x80, /* [210'0xd2] DUP1 */
0x80, /* [211'0xd3] DUP1 */
0x35, /* [212'0xd4] CALLDATALOAD */
0x73, /* [213'0xd5] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [234'0xea] AND */
0x90, /* [235'0xeb] SWAP1 */
0x60, /* [236'0xec] PUSH1 */
0x20,/* constant data */
0x01, /* [238'0xee] ADD */
0x90, /* [239'0xef] SWAP1 */
0x92, /* [240'0xf0] SWAP3 */
0x91, /* [241'0xf1] SWAP2 */
0x90, /* [242'0xf2] SWAP1 */
0x50, /* [243'0xf3] POP */
0x50, /* [244'0xf4] POP */
0x50, /* [245'0xf5] POP */
0x61, /* [246'0xf6] PUSH2 */
0x03,0x58,/* constant data */
0x56, /* [249'0xf9] JUMP */
0x5b, /* [250'0xfa] JUMPDEST */
0x00, /* [251'0xfb] STOP */
0x5b, /* [252'0xfc] JUMPDEST */
0x61, /* [253'0xfd] PUSH2 */
0x01,0x04,/* constant data */
0x61, /* [256'0x100] PUSH2 */
0x01,0x53,/* constant data */
0x56, /* [259'0x103] JUMP */
0x5b, /* [260'0x104] JUMPDEST */
0x00, /* [261'0x105] STOP */
0x5b, /* [262'0x106] JUMPDEST */
0x34, /* [263'0x107] CALLVALUE */
0x80, /* [264'0x108] DUP1 */
0x15, /* [265'0x109] ISZERO */
0x61, /* [266'0x10a] PUSH2 */
0x01,0x12,/* constant data */
0x57, /* [269'0x10d] JUMPI */
0x60, /* [270'0x10e] PUSH1 */
0x00,/* constant data */
0x80, /* [272'0x110] DUP1 */
0xfd, /* [273'0x111] REVERT */
0x5b, /* [274'0x112] JUMPDEST */
0x50, /* [275'0x113] POP */
0x61, /* [276'0x114] PUSH2 */
0x01,0x51,/* constant data */
0x60, /* [279'0x117] PUSH1 */
0x04,/* constant data */
0x80, /* [281'0x119] DUP1 */
0x36, /* [282'0x11a] CALLDATASIZE */
0x03, /* [283'0x11b] SUB */
0x81, /* [284'0x11c] DUP2 */
0x01, /* [285'0x11d] ADD */
0x90, /* [286'0x11e] SWAP1 */
0x80, /* [287'0x11f] DUP1 */
0x80, /* [288'0x120] DUP1 */
0x35, /* [289'0x121] CALLDATALOAD */
0x73, /* [290'0x122] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [311'0x137] AND */
0x90, /* [312'0x138] SWAP1 */
0x60, /* [313'0x139] PUSH1 */
0x20,/* constant data */
0x01, /* [315'0x13b] ADD */
0x90, /* [316'0x13c] SWAP1 */
0x92, /* [317'0x13d] SWAP3 */
0x91, /* [318'0x13e] SWAP2 */
0x90, /* [319'0x13f] SWAP1 */
0x80, /* [320'0x140] DUP1 */
0x35, /* [321'0x141] CALLDATALOAD */
0x90, /* [322'0x142] SWAP1 */
0x60, /* [323'0x143] PUSH1 */
0x20,/* constant data */
0x01, /* [325'0x145] ADD */
0x90, /* [326'0x146] SWAP1 */
0x92, /* [327'0x147] SWAP3 */
0x91, /* [328'0x148] SWAP2 */
0x90, /* [329'0x149] SWAP1 */
0x50, /* [330'0x14a] POP */
0x50, /* [331'0x14b] POP */
0x50, /* [332'0x14c] POP */
0x61, /* [333'0x14d] PUSH2 */
0x03,0x5b,/* constant data */
0x56, /* [336'0x150] JUMP */
0x5b, /* [337'0x151] JUMPDEST */
0x00, /* [338'0x152] STOP */
0x5b, /* [339'0x153] JUMPDEST */
0x33, /* [340'0x154] CALLER */
0x60, /* [341'0x155] PUSH1 */
0x02,/* constant data */
0x60, /* [343'0x157] PUSH1 */
0x00,/* constant data */
0x61, /* [345'0x159] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [348'0x15c] EXP */
0x81, /* [349'0x15d] DUP2 */
0x54, /* [350'0x15e] SLOAD */
0x81, /* [351'0x15f] DUP2 */
0x73, /* [352'0x160] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [373'0x175] MUL */
0x19, /* [374'0x176] NOT */
0x16, /* [375'0x177] AND */
0x90, /* [376'0x178] SWAP1 */
0x83, /* [377'0x179] DUP4 */
0x73, /* [378'0x17a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [399'0x18f] AND */
0x02, /* [400'0x190] MUL */
0x17, /* [401'0x191] OR */
0x90, /* [402'0x192] SWAP1 */
0x55, /* [403'0x193] SSTORE */
0x50, /* [404'0x194] POP */
0x60, /* [405'0x195] PUSH1 */
0x03,/* constant data */
0x54, /* [407'0x197] SLOAD */
0x34, /* [408'0x198] CALLVALUE */
0x11, /* [409'0x199] GT */
0x15, /* [410'0x19a] ISZERO */
0x61, /* [411'0x19b] PUSH2 */
0x02,0xdc,/* constant data */
0x57, /* [414'0x19e] JUMPI */
0x60, /* [415'0x19f] PUSH1 */
0x01,/* constant data */
0x60, /* [417'0x1a1] PUSH1 */
0x00,/* constant data */
0x90, /* [419'0x1a3] SWAP1 */
0x54, /* [420'0x1a4] SLOAD */
0x90, /* [421'0x1a5] SWAP1 */
0x61, /* [422'0x1a6] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [425'0x1a9] EXP */
0x90, /* [426'0x1aa] SWAP1 */
0x04, /* [427'0x1ab] DIV */
0x73, /* [428'0x1ac] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [449'0x1c1] AND */
0x73, /* [450'0x1c2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [471'0x1d7] AND */
0x60, /* [472'0x1d8] PUSH1 */
0x40,/* constant data */
0x51, /* [474'0x1da] MLOAD */
0x80, /* [475'0x1db] DUP1 */
0x80, /* [476'0x1dc] DUP1 */
0x7f, /* [477'0x1dd] PUSH32 */
0x6c,0x6f,0x67,0x45,0x76,0x65,0x6e,0x74,0x28,0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x81, /* [510'0x1fe] DUP2 */
0x52, /* [511'0x1ff] MSTORE */
0x50, /* [512'0x200] POP */
0x60, /* [513'0x201] PUSH1 */
0x0a,/* constant data */
0x01, /* [515'0x203] ADD */
0x90, /* [516'0x204] SWAP1 */
0x50, /* [517'0x205] POP */
0x60, /* [518'0x206] PUSH1 */
0x40,/* constant data */
0x51, /* [520'0x208] MLOAD */
0x80, /* [521'0x209] DUP1 */
0x91, /* [522'0x20a] SWAP2 */
0x03, /* [523'0x20b] SUB */
0x90, /* [524'0x20c] SWAP1 */
0x20, /* [525'0x20d] SHA3 */
0x7c, /* [526'0x20e] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [556'0x22c] SWAP1 */
0x04, /* [557'0x22d] DIV */
0x60, /* [558'0x22e] PUSH1 */
0x40,/* constant data */
0x51, /* [560'0x230] MLOAD */
0x81, /* [561'0x231] DUP2 */
0x63, /* [562'0x232] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [567'0x237] AND */
0x7c, /* [568'0x238] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x02, /* [598'0x256] MUL */
0x81, /* [599'0x257] DUP2 */
0x52, /* [600'0x258] MSTORE */
0x60, /* [601'0x259] PUSH1 */
0x04,/* constant data */
0x01, /* [603'0x25b] ADD */
0x60, /* [604'0x25c] PUSH1 */
0x00,/* constant data */
0x60, /* [606'0x25e] PUSH1 */
0x40,/* constant data */
0x51, /* [608'0x260] MLOAD */
0x80, /* [609'0x261] DUP1 */
0x83, /* [610'0x262] DUP4 */
0x03, /* [611'0x263] SUB */
0x81, /* [612'0x264] DUP2 */
0x86, /* [613'0x265] DUP7 */
0x5a, /* [614'0x266] GAS */
0xf4, /* [615'0x267] DELEGATECALL */
0x92, /* [616'0x268] SWAP3 */
0x50, /* [617'0x269] POP */
0x50, /* [618'0x26a] POP */
0x50, /* [619'0x26b] POP */
0x50, /* [620'0x26c] POP */
0x60, /* [621'0x26d] PUSH1 */
0x02,/* constant data */
0x60, /* [623'0x26f] PUSH1 */
0x00,/* constant data */
0x90, /* [625'0x271] SWAP1 */
0x54, /* [626'0x272] SLOAD */
0x90, /* [627'0x273] SWAP1 */
0x61, /* [628'0x274] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [631'0x277] EXP */
0x90, /* [632'0x278] SWAP1 */
0x04, /* [633'0x279] DIV */
0x73, /* [634'0x27a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [655'0x28f] AND */
0x73, /* [656'0x290] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [677'0x2a5] AND */
0x61, /* [678'0x2a6] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [681'0x2a9] ADDRESS */
0x73, /* [682'0x2aa] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [703'0x2bf] AND */
0x31, /* [704'0x2c0] BALANCE */
0x90, /* [705'0x2c1] SWAP1 */
0x81, /* [706'0x2c2] DUP2 */
0x15, /* [707'0x2c3] ISZERO */
0x02, /* [708'0x2c4] MUL */
0x90, /* [709'0x2c5] SWAP1 */
0x60, /* [710'0x2c6] PUSH1 */
0x40,/* constant data */
0x51, /* [712'0x2c8] MLOAD */
0x60, /* [713'0x2c9] PUSH1 */
0x00,/* constant data */
0x60, /* [715'0x2cb] PUSH1 */
0x40,/* constant data */
0x51, /* [717'0x2cd] MLOAD */
0x80, /* [718'0x2ce] DUP1 */
0x83, /* [719'0x2cf] DUP4 */
0x03, /* [720'0x2d0] SUB */
0x81, /* [721'0x2d1] DUP2 */
0x85, /* [722'0x2d2] DUP6 */
0x88, /* [723'0x2d3] DUP9 */
0x88, /* [724'0x2d4] DUP9 */
0xf1, /* [725'0x2d5] CALL */
0x93, /* [726'0x2d6] SWAP4 */
0x50, /* [727'0x2d7] POP */
0x50, /* [728'0x2d8] POP */
0x50, /* [729'0x2d9] POP */
0x50, /* [730'0x2da] POP */
0x50, /* [731'0x2db] POP */
0x5b, /* [732'0x2dc] JUMPDEST */
0x56, /* [733'0x2dd] JUMP */
0x5b, /* [734'0x2de] JUMPDEST */
0x60, /* [735'0x2df] PUSH1 */
0x00,/* constant data */
0x80, /* [737'0x2e1] DUP1 */
0x90, /* [738'0x2e2] SWAP1 */
0x54, /* [739'0x2e3] SLOAD */
0x90, /* [740'0x2e4] SWAP1 */
0x61, /* [741'0x2e5] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [744'0x2e8] EXP */
0x90, /* [745'0x2e9] SWAP1 */
0x04, /* [746'0x2ea] DIV */
0x73, /* [747'0x2eb] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [768'0x300] AND */
0x73, /* [769'0x301] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [790'0x316] AND */
0x33, /* [791'0x317] CALLER */
0x73, /* [792'0x318] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [813'0x32d] AND */
0x14, /* [814'0x32e] EQ */
0x15, /* [815'0x32f] ISZERO */
0x15, /* [816'0x330] ISZERO */
0x61, /* [817'0x331] PUSH2 */
0x03,0x39,/* constant data */
0x57, /* [820'0x334] JUMPI */
0x60, /* [821'0x335] PUSH1 */
0x00,/* constant data */
0x80, /* [823'0x337] DUP1 */
0xfd, /* [824'0x338] REVERT */
0x5b, /* [825'0x339] JUMPDEST */
0x33, /* [826'0x33a] CALLER */
0x73, /* [827'0x33b] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [848'0x350] AND */
0xff, /* [849'0x351] SELFDESTRUCT */
0x5b, /* [850'0x352] JUMPDEST */
0x60, /* [851'0x353] PUSH1 */
0x03,/* constant data */
0x54, /* [853'0x355] SLOAD */
0x81, /* [854'0x356] DUP2 */
0x56, /* [855'0x357] JUMP */
0x5b, /* [856'0x358] JUMPDEST */
0x50, /* [857'0x359] POP */
0x56, /* [858'0x35a] JUMP */
0x5b, /* [859'0x35b] JUMPDEST */
0x60, /* [860'0x35c] PUSH1 */
0x00,/* constant data */
0x80, /* [862'0x35e] DUP1 */
0x90, /* [863'0x35f] SWAP1 */
0x54, /* [864'0x360] SLOAD */
0x90, /* [865'0x361] SWAP1 */
0x61, /* [866'0x362] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [869'0x365] EXP */
0x90, /* [870'0x366] SWAP1 */
0x04, /* [871'0x367] DIV */
0x73, /* [872'0x368] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [893'0x37d] AND */
0x73, /* [894'0x37e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [915'0x393] AND */
0x33, /* [916'0x394] CALLER */
0x73, /* [917'0x395] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [938'0x3aa] AND */
0x14, /* [939'0x3ab] EQ */
0x15, /* [940'0x3ac] ISZERO */
0x15, /* [941'0x3ad] ISZERO */
0x61, /* [942'0x3ae] PUSH2 */
0x03,0xb6,/* constant data */
0x57, /* [945'0x3b1] JUMPI */
0x60, /* [946'0x3b2] PUSH1 */
0x00,/* constant data */
0x80, /* [948'0x3b4] DUP1 */
0xfd, /* [949'0x3b5] REVERT */
0x5b, /* [950'0x3b6] JUMPDEST */
0x80, /* [951'0x3b7] DUP1 */
0x60, /* [952'0x3b8] PUSH1 */
0x03,/* constant data */
0x81, /* [954'0x3ba] DUP2 */
0x90, /* [955'0x3bb] SWAP1 */
0x55, /* [956'0x3bc] SSTORE */
0x50, /* [957'0x3bd] POP */
0x81, /* [958'0x3be] DUP2 */
0x60, /* [959'0x3bf] PUSH1 */
0x01,/* constant data */
0x60, /* [961'0x3c1] PUSH1 */
0x00,/* constant data */
0x61, /* [963'0x3c3] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [966'0x3c6] EXP */
0x81, /* [967'0x3c7] DUP2 */
0x54, /* [968'0x3c8] SLOAD */
0x81, /* [969'0x3c9] DUP2 */
0x73, /* [970'0x3ca] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [991'0x3df] MUL */
0x19, /* [992'0x3e0] NOT */
0x16, /* [993'0x3e1] AND */
0x90, /* [994'0x3e2] SWAP1 */
0x83, /* [995'0x3e3] DUP4 */
0x73, /* [996'0x3e4] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [1017'0x3f9] AND */
0x02, /* [1018'0x3fa] MUL */
0x17, /* [1019'0x3fb] OR */
0x90, /* [1020'0x3fc] SWAP1 */
0x55, /* [1021'0x3fd] SSTORE */
0x50, /* [1022'0x3fe] POP */
0x50, /* [1023'0x3ff] POP */
0x50, /* [1024'0x400] POP */
0x56, /* [1025'0x401] JUMP */
0x00, /* [1026'0x402] STOP */
0xa1, /* [1027'0x403] LOG1 */
0x65, /* [1028'0x404] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [1035'0x40b] SHA3 */
0xb4, /* [1036'0x40c] INVALID' byte */
0x55, /* [1037'0x40d] SSTORE */
0x55, /* [1038'0x40e] SSTORE */
0xd3, /* [1039'0x40f] INVALID' byte */
0x75, /* [1040'0x410] PUSH22 */
0x7a,0xcf,0xab,0x93,0xf1,0x31,0x3a,0x5b,0x34,0x24,0xf5,0xa2,0x89,0xca,0x05,0x07,0x60,0x60,0x55,0xa8,0xa6,0xf5,/* constant data */
0x23, /* [1063'0x427] INVALID' byte */
0xce, /* [1064'0x428] INVALID' byte */
0xd1, /* [1065'0x429] INVALID' byte */
0x52, /* [1066'0x42a] MSTORE */
0x09, /* [1067'0x42b] MULMOD */
0x00, /* [1068'0x42c] STOP */
0x29, /* [1069'0x42d] INVALID' byte */
};

const eevm::Code& eevm::EVM2CPP_firstTest::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_firstTest::_contract_name = "firstTest";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_firstTest> eevm::EVM2CPP_firstTest::reg{};
const std::string& eevm::EVM2CPP_firstTest::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_3 = 0x3_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_a = 0xa_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_6d = 0x6d_u256;
constexpr uint256_t c_75 = 0x75_u256;
constexpr uint256_t c_77 = 0x77_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_83 = 0x83_u256;
constexpr uint256_t c_8c = 0x8c_u256;
constexpr uint256_t c_8e = 0x8e_u256;
constexpr uint256_t c_9a = 0x9a_u256;
constexpr uint256_t c_a3 = 0xa3_u256;
constexpr uint256_t c_b9 = 0xb9_u256;
constexpr uint256_t c_c5 = 0xc5_u256;
constexpr uint256_t c_fa = 0xfa_u256;
constexpr uint256_t c_fc = 0xfc_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_104 = 0x104_u256;
constexpr uint256_t c_106 = 0x106_u256;
constexpr uint256_t c_112 = 0x112_u256;
constexpr uint256_t c_151 = 0x151_u256;
constexpr uint256_t c_153 = 0x153_u256;
constexpr uint256_t c_2dc = 0x2dc_u256;
constexpr uint256_t c_2de = 0x2de_u256;
constexpr uint256_t c_339 = 0x339_u256;
constexpr uint256_t c_352 = 0x352_u256;
constexpr uint256_t c_358 = 0x358_u256;
constexpr uint256_t c_35b = 0x35b_u256;
constexpr uint256_t c_3b6 = 0x3b6_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_41c0e1b5 = 0x41c0e1b5_u256;
constexpr uint256_t c_4f057506 = 0x4f057506_u256;
constexpr uint256_t c_a6f9dae1 = 0xa6f9dae1_u256;
constexpr uint256_t c_d4e93292 = 0xd4e93292_u256;
constexpr uint256_t c_fd28ec3e = 0xfd28ec3e_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_47 = 0x627a7a723058_u256;
constexpr uint256_t g_28 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_42 = 0x6c6f674576656e74282900000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_39 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_firstTest::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6d,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_75,
&&__invld,
&&pc_77,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_83,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_8c,
&&__invld,
&&pc_8e,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_9a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_a3,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b9,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_c5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_fa,
&&__invld,
&&pc_fc,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_104,
&&__invld,
&&pc_106,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_112,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_151,
&&__invld,
&&pc_153,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_2dc,
&&__invld,
&&pc_2de,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_339,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_352,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_358,
&&__invld,
&&__invld,
&&pc_35b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3b6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [109] */

/* JUMPI */
/* op_0 = Constant((6, 109)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_6d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [1103159733] */

/* EQ */
/* op_0 = Constant((8, 1103159733)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_41c0e1b5, v_6_0);


/* PUSH2 */
/* val = [119] */

/* JUMPI */
/* op_0 = Constant((10, 119)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_77;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1325757702] */

/* EQ */
/* op_0 = Constant((1, 1325757702)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_4f057506, s_0_0);


/* PUSH2 */
/* val = [142] */

/* JUMPI */
/* op_0 = Constant((3, 142)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_8e;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2801392353] */

/* EQ */
/* op_0 = Constant((1, 2801392353)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_a6f9dae1, s_0_0);


/* PUSH2 */
/* val = [185] */

/* JUMPI */
/* op_0 = Constant((3, 185)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b9;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3572052626] */

/* EQ */
/* op_0 = Constant((1, 3572052626)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d4e93292, s_0_0);


/* PUSH2 */
/* val = [252] */

/* JUMPI */
/* op_0 = Constant((3, 252)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_fc;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [4247317566] */

/* EQ */
/* op_0 = Constant((1, 4247317566)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_fd28ec3e, s_0_0);


/* PUSH2 */
/* val = [262] */

/* JUMPI */
/* op_0 = Constant((3, 262)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_106;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
/* JUMPDEST */

/* PUSH2 */
/* val = [117] */

/* PUSH2 */
/* val = [339] */

/* JUMP */
/* op_0 = Constant((2, 339)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 117))*/
ctxt->s.push(c_75);

goto pc_153;


}pc_75:
{ /* <============ */ 
on_bb_start(117);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_77:
{ /* <============ */ 
on_bb_start(119);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [131] */

/* JUMPI */
/* op_0 = Constant((4, 131)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_83;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_7f:
{ /* <============ */ 
on_bb_start(127);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_83:
{ /* <============ */ 
on_bb_start(131);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [140] */

/* PUSH2 */
/* val = [734] */

/* JUMP */
/* op_0 = Constant((3, 734)) */
/* BB finalizer */
ctxt->s.set(0, c_8c);
/* no pops at end */
/* no BB returns */

goto pc_2de;


}pc_8c:
{ /* <============ */ 
on_bb_start(140);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_8e:
{ /* <============ */ 
on_bb_start(142);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [154] */

/* JUMPI */
/* op_0 = Constant((4, 154)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_9a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_96:
{ /* <============ */ 
on_bb_start(150);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_9a:
{ /* <============ */ 
on_bb_start(154);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [163] */

/* PUSH2 */
/* val = [850] */

/* JUMP */
/* op_0 = Constant((3, 850)) */
/* BB finalizer */
ctxt->s.set(0, c_a3);
/* no pops at end */
/* no BB returns */

goto pc_352;


}pc_a3:
{ /* <============ */ 
on_bb_start(163);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_b9:
{ /* <============ */ 
on_bb_start(185);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [197] */

/* JUMPI */
/* op_0 = Constant((4, 197)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_c5;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_c1:
{ /* <============ */ 
on_bb_start(193);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_c5:
{ /* <============ */ 
on_bb_start(197);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [250] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_28, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [856] */

/* JUMP */
/* op_0 = Constant((25, 856)) */
/* BB finalizer */
ctxt->s.set(0, c_fa);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_358;


}pc_fa:
{ /* <============ */ 
on_bb_start(250);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_fc:
{ /* <============ */ 
on_bb_start(252);
/* JUMPDEST */

/* PUSH2 */
/* val = [260] */

/* PUSH2 */
/* val = [339] */

/* JUMP */
/* op_0 = Constant((2, 339)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 260))*/
ctxt->s.push(c_104);

goto pc_153;


}pc_104:
{ /* <============ */ 
on_bb_start(260);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_106:
{ /* <============ */ 
on_bb_start(262);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [274] */

/* JUMPI */
/* op_0 = Constant((4, 274)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_112;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_10e:
{ /* <============ */ 
on_bb_start(270);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_112:
{ /* <============ */ 
on_bb_start(274);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [337] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_28, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* DUP1 */
/* op_0 = Constant((17, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((17, 36)) */
const uint256_t v_23_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((17, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((25, 32)) */
/* op_1 = Constant((17, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((26, 68)) */
/* op_1 = InstructionRef((23, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((26, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [859] */

/* JUMP */
/* op_0 = Constant((34, 859)) */
/* BB finalizer */
ctxt->s.set(0, c_151);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);
/* BB return 1 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);

goto pc_35b;


}pc_151:
{ /* <============ */ 
on_bb_start(337);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_153:
{ /* <============ */ 
on_bb_start(339);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 2)) */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((2, 2)) */
const uint256_t v_7_0 = sload_v(c_2);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_39, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_28, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 2)) */

/* SSTORE */
/* op_0 = Constant((2, 2)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_2, v_18_0);


/* POP */

/* PUSH1 */
/* val = [3] */

/* SLOAD */
/* op_0 = Constant((22, 3)) */
const uint256_t v_23_0 = sload_v(c_3);


/* CALLVALUE */
const uint256_t v_24_0 = callvalue_v();


/* GT */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((23, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_24_0, v_23_0);
const uint256_t v_25_0 = gt_v(v_24_0, v_23_0);


/* ISZERO */
/* op_0 = InstructionRef((25, 0)) */
const uint256_t v_26_0 = iszero_v(v_25_0);


/* PUSH2 */
/* val = [732] */

/* JUMPI */
/* op_0 = Constant((27, 732)) */
/* op_1 = InstructionRef((26, 0)) */
if ( v_26_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_2dc;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_19f:
{ /* <============ */ 
on_bb_start(415);
/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((0, 1)) */

/* SLOAD */
/* op_0 = Constant((0, 1)) */
const uint256_t v_3_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((5, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((6, 1)) */
/* op_1 = InstructionRef((3, 0)) */

/* DIV */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((6, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_10_0 = and_v(g_28, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((10, 0)) */
const uint256_t v_12_0 = and_v(g_28, v_10_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((13, 64)) */
const uint256_t v_14_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((14, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((14, 0)) */

/* PUSH32 */
/* val = [49046620423761786965642509377682186787694544534046692956485956219622226132992] */

/* DUP2 */
/* op_0 = InstructionRef((14, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((17, 49046620423761786965642509377682186787694544534046692956485956219622226132992)) */
mstore_v(v_14_0, g_42);


/* POP */

/* PUSH1 */
/* val = [10] */

/* ADD */
/* op_0 = Constant((21, 10)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_22_0 = add_v(c_a, v_14_0);


/* SWAP1 */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((14, 0)) */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((25, 64)) */
const uint256_t v_26_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((26, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((22, 0)) */

/* SUB */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_29_0 = sub_v(v_22_0, v_26_0);


/* SWAP1 */
/* op_0 = InstructionRef((29, 0)) */
/* op_1 = InstructionRef((26, 0)) */

/* SHA3 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = sha3_v(v_26_0, v_29_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((32, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((31, 0)) */

/* DIV */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = Constant((32, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_34_0 = div_v(v_31_0, g_5);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((35, 64)) */
const uint256_t v_36_0 = mload_v(c_40);


/* DUP2 */
/* op_0 = InstructionRef((34, 0)) */

/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((38, 4294967295)) */
/* op_1 = InstructionRef((34, 0)) */
const uint256_t v_39_0 = and_v(c_ffffffff, v_34_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* MUL */
/* op_0 = Constant((40, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((39, 0)) */
const uint256_t v_41_0 = mul_v(g_5, v_39_0);


/* DUP2 */
/* op_0 = InstructionRef((36, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((36, 0)) */
/* op_1 = InstructionRef((41, 0)) */
mstore_v(v_36_0, v_41_0);


/* PUSH1 */
/* val = [4] */

/* ADD */
/* op_0 = Constant((44, 4)) */
/* op_1 = InstructionRef((36, 0)) */
const uint256_t v_45_0 = add_v(c_4, v_36_0);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((47, 64)) */
const uint256_t v_48_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((48, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((45, 0)) */

/* SUB */
/* op_0 = InstructionRef((45, 0)) */
/* op_1 = InstructionRef((48, 0)) */
const uint256_t v_51_0 = sub_v(v_45_0, v_48_0);


/* DUP2 */
/* op_0 = InstructionRef((48, 0)) */

/* DUP7 */
/* op_0 = InstructionRef((12, 0)) */

/* GAS */
const uint256_t v_54_0 = gas_v();


/* DELEGATECALL */
/* op_0 = InstructionRef((54, 0)) */
/* op_1 = InstructionRef((12, 0)) */
/* op_2 = InstructionRef((48, 0)) */
/* op_3 = InstructionRef((51, 0)) */
/* op_4 = InstructionRef((48, 0)) */
/* op_5 = Constant((46, 0)) */
const uint256_t v_55_0 = delegatecall_v(v_54_0, v_12_0, v_48_0, v_51_0, v_48_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP3 */
/* op_0 = InstructionRef((55, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [2] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((62, 0)) */
/* op_1 = Constant((61, 2)) */

/* SLOAD */
/* op_0 = Constant((61, 2)) */
const uint256_t v_64_0 = sload_v(c_2);


/* SWAP1 */
/* op_0 = InstructionRef((64, 0)) */
/* op_1 = Constant((62, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((66, 256)) */
/* op_1 = Constant((62, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((67, 1)) */
/* op_1 = InstructionRef((64, 0)) */

/* DIV */
/* op_0 = InstructionRef((64, 0)) */
/* op_1 = Constant((67, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((70, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((64, 0)) */
const uint256_t v_71_0 = and_v(g_28, v_64_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((72, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((71, 0)) */
const uint256_t v_73_0 = and_v(g_28, v_71_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_75_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((76, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((75, 0)) */
const uint256_t v_77_0 = and_v(g_28, v_75_0);


/* BALANCE */
/* op_0 = InstructionRef((77, 0)) */
const uint256_t v_78_0 = balance_v(v_77_0);


/* SWAP1 */
/* op_0 = InstructionRef((78, 0)) */
/* op_1 = Constant((74, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((78, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((78, 0)) */
const uint256_t v_81_0 = iszero_v(v_78_0);


/* MUL */
/* op_0 = InstructionRef((81, 0)) */
/* op_1 = Constant((74, 2300)) */
const uint256_t v_82_0 = mul_v(v_81_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((82, 0)) */
/* op_1 = InstructionRef((78, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((84, 64)) */
const uint256_t v_85_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((87, 64)) */
const uint256_t v_88_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((88, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((85, 0)) */

/* SUB */
/* op_0 = InstructionRef((85, 0)) */
/* op_1 = InstructionRef((88, 0)) */
const uint256_t v_91_0 = sub_v(v_85_0, v_88_0);


/* DUP2 */
/* op_0 = InstructionRef((88, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((78, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((73, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((82, 0)) */

/* CALL */
/* op_0 = InstructionRef((82, 0)) */
/* op_1 = InstructionRef((73, 0)) */
/* op_2 = InstructionRef((78, 0)) */
/* op_3 = InstructionRef((88, 0)) */
/* op_4 = InstructionRef((91, 0)) */
/* op_5 = InstructionRef((88, 0)) */
/* op_6 = Constant((86, 0)) */
const uint256_t v_96_0 = call_v(v_82_0, v_73_0, v_78_0, v_88_0, v_91_0, v_88_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((96, 0)) */
/* op_1 = InstructionRef((73, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2dc:
{ /* <============ */ 
on_bb_start(732);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_2de:
{ /* <============ */ 
on_bb_start(734);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_28, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_28, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_28, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [825] */

/* JUMPI */
/* op_0 = Constant((20, 825)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_339;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_335:
{ /* <============ */ 
on_bb_start(821);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_339:
{ /* <============ */ 
on_bb_start(825);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_28, v_1_0);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((3, 0)) */
selfdestruct_v(v_3_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_352:
{ /* <============ */ 
on_bb_start(850);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [3] */

/* SLOAD */
/* op_0 = Constant((1, 3)) */
const uint256_t v_2_0 = sload_v(c_3);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);

JUMP(s_0_0);


}pc_358:
{ /* <============ */ 
on_bb_start(856);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_35b:
{ /* <============ */ 
on_bb_start(859);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_28, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_28, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_28, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [950] */

/* JUMPI */
/* op_0 = Constant((20, 950)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_3b6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3b2:
{ /* <============ */ 
on_bb_start(946);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3b6:
{ /* <============ */ 
on_bb_start(950);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [3] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((2, 3)) */

/* SSTORE */
/* op_0 = Constant((2, 3)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(c_3, s_0_0);


/* POP */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((10, 256)) */
/* op_1 = Constant((9, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((8, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((8, 1)) */
const uint256_t v_13_0 = sload_v(c_1);


/* DUP2 */
/* op_0 = Constant((11, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((11, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((17, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_18_0 = and_v(g_39, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((11, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((21, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_22_0 = and_v(g_28, s_0_1);


/* MUL */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = Constant((11, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_24_0 = or_v(v_22_0, v_18_0);


/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = Constant((8, 1)) */

/* SSTORE */
/* op_0 = Constant((8, 1)) */
/* op_1 = InstructionRef((24, 0)) */
sstore_v(c_1, v_24_0);


/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_402:
{ /* <============ */ 
on_bb_start(1026);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_403:
{ /* <============ */ 
on_bb_start(1027);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_47, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x403 (inst offset 3; byte 0xb4)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_40d:
{ /* <============ */ 
on_bb_start(1037);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
/* SSTORE */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
sstore_v(s_0_0, s_0_1);


/* SSTORE */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 3)) */
sstore_v(s_0_2, s_0_3);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x40d (inst offset 2; byte 0xd3)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_410:
{ /* <============ */ 
on_bb_start(1040);
/* PUSH22 */
/* val = [45949129512688424220279621741021399340035161975203573] */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x410 (inst offset 1; byte 0x23)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_428:
{ /* <============ */ 
on_bb_start(1064);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x428 (inst offset 0; byte 0xce)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_429:
{ /* <============ */ 
on_bb_start(1065);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x429 (inst offset 0; byte 0xd1)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_42a:
{ /* <============ */ 
on_bb_start(1066);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* MSTORE */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
mstore_v(s_0_0, s_0_1);


/* MULMOD */
/* op_0 = StackRef((0, 2)) */
/* op_1 = StackRef((0, 3)) */
/* op_2 = StackRef((0, 4)) */
const uint256_t v_1_0 = mulmod_v(s_0_2, s_0_3, s_0_4);


/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
ctxt->s.set(4, v_1_0);
ctxt->s.pop_drop_n(4);
/* no BB returns */
}pc_42d:
{ /* <============ */ 
on_bb_start(1069);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x42d (inst offset 0; byte 0x29)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x73,0x46,0xfe,0xeb,0x38,0x1e,0x90,0xf7,0xe3,0x6,0x35,0xb4,0xf3,0x3c,0xe3,0xf6,0xfa,0x8e,0xa6,0xed,0x9b,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x73,0x25,0xdf,0x6e,0x3d,0xa4,0x9f,0x41,0xef,0x5b,0x99,0xe1,0x39,0xc8,0x7a,0xbc,0x12,0xc3,0x58,0x3d,0x13,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x67,0xd,0xe0,0xb6,0xb3,0xa7,0x64,0x0,0x0,0x60,0x3,0x55,0x34,0x80,0x15,0x61,0x0,0xc5,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x4,0x2e,0x80,0x61,0x0,0xd5,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x6d,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x41,0xc0,0xe1,0xb5,0x14,0x61,0x0,0x77,0x57,0x80,0x63,0x4f,0x5,0x75,0x6,0x14,0x61,0x0,0x8e,0x57,0x80,0x63,0xa6,0xf9,0xda,0xe1,0x14,0x61,0x0,0xb9,0x57,0x80,0x63,0xd4,0xe9,0x32,0x92,0x14,0x61,0x0,0xfc,0x57,0x80,0x63,0xfd,0x28,0xec,0x3e,0x14,0x61,0x1,0x6,0x57,0x5b,0x61,0x0,0x75,0x61,0x1,0x53,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x83,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x8c,0x61,0x2,0xde,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x9a,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xa3,0x61,0x3,0x52,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x0,0xc5,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xfa,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x3,0x58,0x56,0x5b,0x0,0x5b,0x61,0x1,0x4,0x61,0x1,0x53,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0x12,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x51,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x3,0x5b,0x56,0x5b,0x0,0x5b,0x33,0x60,0x2,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x60,0x3,0x54,0x34,0x11,0x15,0x61,0x2,0xdc,0x57,0x60,0x1,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x40,0x51,0x80,0x80,0x7f,0x6c,0x6f,0x67,0x45,0x76,0x65,0x6e,0x74,0x28,0x29,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81,0x52,0x50,0x60,0xa,0x1,0x90,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0x20,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x60,0x40,0x51,0x81,0x63,0xff,0xff,0xff,0xff,0x16,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x81,0x52,0x60,0x4,0x1,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x86,0x5a,0xf4,0x92,0x50,0x50,0x50,0x50,0x60,0x2,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x50,0x5b,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x3,0x39,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x60,0x3,0x54,0x81,0x56,0x5b,0x50,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x3,0xb6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x60,0x3,0x81,0x90,0x55,0x50,0x81,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x50,0x50,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0xb4,0x55,0x55,0xd3,0x75,0x7a,0xcf,0xab,0x93,0xf1,0x31,0x3a,0x5b,0x34,0x24,0xf5,0xa2,0x89,0xca,0x5,0x7,0x60,0x60,0x55,0xa8,0xa6,0xf5,0x23,0xce,0xd1,0x52,0x9,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_firstTest::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_firstTest::constructor_args() {
    return _constructor_args;
}
