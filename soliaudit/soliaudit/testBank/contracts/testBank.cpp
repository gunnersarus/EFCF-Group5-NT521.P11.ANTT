// auto-generated by evm2cpp
    
// associated header file
#include "eEVM/evm2cpp/contracts/testBank.h"

// additional tracing code
#include "eEVM/fuzz/tracecomp.hpp"


// this is generated code and we might have emitted some variables/labels that are not actually used anymore
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"

const eevm::Code _contract_bytecode = {
0x60, /* [0'0x0] PUSH1 */
0x80,/* constant data */
0x60, /* [2'0x2] PUSH1 */
0x40,/* constant data */
0x52, /* [4'0x4] MSTORE */
0x60, /* [5'0x5] PUSH1 */
0x04,/* constant data */
0x36, /* [7'0x7] CALLDATASIZE */
0x10, /* [8'0x8] LT */
0x61, /* [9'0x9] PUSH2 */
0x00,0x6d,/* constant data */
0x57, /* [12'0xc] JUMPI */
0x60, /* [13'0xd] PUSH1 */
0x00,/* constant data */
0x35, /* [15'0xf] CALLDATALOAD */
0x7c, /* [16'0x10] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [46'0x2e] SWAP1 */
0x04, /* [47'0x2f] DIV */
0x63, /* [48'0x30] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [53'0x35] AND */
0x80, /* [54'0x36] DUP1 */
0x63, /* [55'0x37] PUSH4 */
0x41,0xc0,0xe1,0xb5,/* constant data */
0x14, /* [60'0x3c] EQ */
0x61, /* [61'0x3d] PUSH2 */
0x00,0x6f,/* constant data */
0x57, /* [64'0x40] JUMPI */
0x80, /* [65'0x41] DUP1 */
0x63, /* [66'0x42] PUSH4 */
0x4f,0x05,0x75,0x06,/* constant data */
0x14, /* [71'0x47] EQ */
0x61, /* [72'0x48] PUSH2 */
0x00,0x86,/* constant data */
0x57, /* [75'0x4b] JUMPI */
0x80, /* [76'0x4c] DUP1 */
0x63, /* [77'0x4d] PUSH4 */
0x5f,0x66,0xd2,0xa9,/* constant data */
0x14, /* [82'0x52] EQ */
0x61, /* [83'0x53] PUSH2 */
0x00,0xb1,/* constant data */
0x57, /* [86'0x56] JUMPI */
0x80, /* [87'0x57] DUP1 */
0x63, /* [88'0x58] PUSH4 */
0xa6,0xf9,0xda,0xe1,/* constant data */
0x14, /* [93'0x5d] EQ */
0x61, /* [94'0x5e] PUSH2 */
0x00,0xfe,/* constant data */
0x57, /* [97'0x61] JUMPI */
0x80, /* [98'0x62] DUP1 */
0x63, /* [99'0x63] PUSH4 */
0xd4,0xe9,0x32,0x92,/* constant data */
0x14, /* [104'0x68] EQ */
0x61, /* [105'0x69] PUSH2 */
0x01,0x41,/* constant data */
0x57, /* [108'0x6c] JUMPI */
0x5b, /* [109'0x6d] JUMPDEST */
0x00, /* [110'0x6e] STOP */
0x5b, /* [111'0x6f] JUMPDEST */
0x34, /* [112'0x70] CALLVALUE */
0x80, /* [113'0x71] DUP1 */
0x15, /* [114'0x72] ISZERO */
0x61, /* [115'0x73] PUSH2 */
0x00,0x7b,/* constant data */
0x57, /* [118'0x76] JUMPI */
0x60, /* [119'0x77] PUSH1 */
0x00,/* constant data */
0x80, /* [121'0x79] DUP1 */
0xfd, /* [122'0x7a] REVERT */
0x5b, /* [123'0x7b] JUMPDEST */
0x50, /* [124'0x7c] POP */
0x61, /* [125'0x7d] PUSH2 */
0x00,0x84,/* constant data */
0x61, /* [128'0x80] PUSH2 */
0x01,0x4b,/* constant data */
0x56, /* [131'0x83] JUMP */
0x5b, /* [132'0x84] JUMPDEST */
0x00, /* [133'0x85] STOP */
0x5b, /* [134'0x86] JUMPDEST */
0x34, /* [135'0x87] CALLVALUE */
0x80, /* [136'0x88] DUP1 */
0x15, /* [137'0x89] ISZERO */
0x61, /* [138'0x8a] PUSH2 */
0x00,0x92,/* constant data */
0x57, /* [141'0x8d] JUMPI */
0x60, /* [142'0x8e] PUSH1 */
0x00,/* constant data */
0x80, /* [144'0x90] DUP1 */
0xfd, /* [145'0x91] REVERT */
0x5b, /* [146'0x92] JUMPDEST */
0x50, /* [147'0x93] POP */
0x61, /* [148'0x94] PUSH2 */
0x00,0x9b,/* constant data */
0x61, /* [151'0x97] PUSH2 */
0x01,0xbf,/* constant data */
0x56, /* [154'0x9a] JUMP */
0x5b, /* [155'0x9b] JUMPDEST */
0x60, /* [156'0x9c] PUSH1 */
0x40,/* constant data */
0x51, /* [158'0x9e] MLOAD */
0x80, /* [159'0x9f] DUP1 */
0x82, /* [160'0xa0] DUP3 */
0x81, /* [161'0xa1] DUP2 */
0x52, /* [162'0xa2] MSTORE */
0x60, /* [163'0xa3] PUSH1 */
0x20,/* constant data */
0x01, /* [165'0xa5] ADD */
0x91, /* [166'0xa6] SWAP2 */
0x50, /* [167'0xa7] POP */
0x50, /* [168'0xa8] POP */
0x60, /* [169'0xa9] PUSH1 */
0x40,/* constant data */
0x51, /* [171'0xab] MLOAD */
0x80, /* [172'0xac] DUP1 */
0x91, /* [173'0xad] SWAP2 */
0x03, /* [174'0xae] SUB */
0x90, /* [175'0xaf] SWAP1 */
0xf3, /* [176'0xb0] RETURN */
0x5b, /* [177'0xb1] JUMPDEST */
0x34, /* [178'0xb2] CALLVALUE */
0x80, /* [179'0xb3] DUP1 */
0x15, /* [180'0xb4] ISZERO */
0x61, /* [181'0xb5] PUSH2 */
0x00,0xbd,/* constant data */
0x57, /* [184'0xb8] JUMPI */
0x60, /* [185'0xb9] PUSH1 */
0x00,/* constant data */
0x80, /* [187'0xbb] DUP1 */
0xfd, /* [188'0xbc] REVERT */
0x5b, /* [189'0xbd] JUMPDEST */
0x50, /* [190'0xbe] POP */
0x61, /* [191'0xbf] PUSH2 */
0x00,0xfc,/* constant data */
0x60, /* [194'0xc2] PUSH1 */
0x04,/* constant data */
0x80, /* [196'0xc4] DUP1 */
0x36, /* [197'0xc5] CALLDATASIZE */
0x03, /* [198'0xc6] SUB */
0x81, /* [199'0xc7] DUP2 */
0x01, /* [200'0xc8] ADD */
0x90, /* [201'0xc9] SWAP1 */
0x80, /* [202'0xca] DUP1 */
0x80, /* [203'0xcb] DUP1 */
0x35, /* [204'0xcc] CALLDATALOAD */
0x73, /* [205'0xcd] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [226'0xe2] AND */
0x90, /* [227'0xe3] SWAP1 */
0x60, /* [228'0xe4] PUSH1 */
0x20,/* constant data */
0x01, /* [230'0xe6] ADD */
0x90, /* [231'0xe7] SWAP1 */
0x92, /* [232'0xe8] SWAP3 */
0x91, /* [233'0xe9] SWAP2 */
0x90, /* [234'0xea] SWAP1 */
0x80, /* [235'0xeb] DUP1 */
0x35, /* [236'0xec] CALLDATALOAD */
0x90, /* [237'0xed] SWAP1 */
0x60, /* [238'0xee] PUSH1 */
0x20,/* constant data */
0x01, /* [240'0xf0] ADD */
0x90, /* [241'0xf1] SWAP1 */
0x92, /* [242'0xf2] SWAP3 */
0x91, /* [243'0xf3] SWAP2 */
0x90, /* [244'0xf4] SWAP1 */
0x50, /* [245'0xf5] POP */
0x50, /* [246'0xf6] POP */
0x50, /* [247'0xf7] POP */
0x61, /* [248'0xf8] PUSH2 */
0x01,0xc5,/* constant data */
0x56, /* [251'0xfb] JUMP */
0x5b, /* [252'0xfc] JUMPDEST */
0x00, /* [253'0xfd] STOP */
0x5b, /* [254'0xfe] JUMPDEST */
0x34, /* [255'0xff] CALLVALUE */
0x80, /* [256'0x100] DUP1 */
0x15, /* [257'0x101] ISZERO */
0x61, /* [258'0x102] PUSH2 */
0x01,0x0a,/* constant data */
0x57, /* [261'0x105] JUMPI */
0x60, /* [262'0x106] PUSH1 */
0x00,/* constant data */
0x80, /* [264'0x108] DUP1 */
0xfd, /* [265'0x109] REVERT */
0x5b, /* [266'0x10a] JUMPDEST */
0x50, /* [267'0x10b] POP */
0x61, /* [268'0x10c] PUSH2 */
0x01,0x3f,/* constant data */
0x60, /* [271'0x10f] PUSH1 */
0x04,/* constant data */
0x80, /* [273'0x111] DUP1 */
0x36, /* [274'0x112] CALLDATASIZE */
0x03, /* [275'0x113] SUB */
0x81, /* [276'0x114] DUP2 */
0x01, /* [277'0x115] ADD */
0x90, /* [278'0x116] SWAP1 */
0x80, /* [279'0x117] DUP1 */
0x80, /* [280'0x118] DUP1 */
0x35, /* [281'0x119] CALLDATALOAD */
0x73, /* [282'0x11a] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [303'0x12f] AND */
0x90, /* [304'0x130] SWAP1 */
0x60, /* [305'0x131] PUSH1 */
0x20,/* constant data */
0x01, /* [307'0x133] ADD */
0x90, /* [308'0x134] SWAP1 */
0x92, /* [309'0x135] SWAP3 */
0x91, /* [310'0x136] SWAP2 */
0x90, /* [311'0x137] SWAP1 */
0x50, /* [312'0x138] POP */
0x50, /* [313'0x139] POP */
0x50, /* [314'0x13a] POP */
0x61, /* [315'0x13b] PUSH2 */
0x02,0x6c,/* constant data */
0x56, /* [318'0x13e] JUMP */
0x5b, /* [319'0x13f] JUMPDEST */
0x00, /* [320'0x140] STOP */
0x5b, /* [321'0x141] JUMPDEST */
0x61, /* [322'0x142] PUSH2 */
0x01,0x49,/* constant data */
0x61, /* [325'0x145] PUSH2 */
0x02,0x6f,/* constant data */
0x56, /* [328'0x148] JUMP */
0x5b, /* [329'0x149] JUMPDEST */
0x00, /* [330'0x14a] STOP */
0x5b, /* [331'0x14b] JUMPDEST */
0x60, /* [332'0x14c] PUSH1 */
0x00,/* constant data */
0x80, /* [334'0x14e] DUP1 */
0x90, /* [335'0x14f] SWAP1 */
0x54, /* [336'0x150] SLOAD */
0x90, /* [337'0x151] SWAP1 */
0x61, /* [338'0x152] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [341'0x155] EXP */
0x90, /* [342'0x156] SWAP1 */
0x04, /* [343'0x157] DIV */
0x73, /* [344'0x158] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [365'0x16d] AND */
0x73, /* [366'0x16e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [387'0x183] AND */
0x33, /* [388'0x184] CALLER */
0x73, /* [389'0x185] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [410'0x19a] AND */
0x14, /* [411'0x19b] EQ */
0x15, /* [412'0x19c] ISZERO */
0x15, /* [413'0x19d] ISZERO */
0x61, /* [414'0x19e] PUSH2 */
0x01,0xa6,/* constant data */
0x57, /* [417'0x1a1] JUMPI */
0x60, /* [418'0x1a2] PUSH1 */
0x00,/* constant data */
0x80, /* [420'0x1a4] DUP1 */
0xfd, /* [421'0x1a5] REVERT */
0x5b, /* [422'0x1a6] JUMPDEST */
0x33, /* [423'0x1a7] CALLER */
0x73, /* [424'0x1a8] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [445'0x1bd] AND */
0xff, /* [446'0x1be] SELFDESTRUCT */
0x5b, /* [447'0x1bf] JUMPDEST */
0x60, /* [448'0x1c0] PUSH1 */
0x02,/* constant data */
0x54, /* [450'0x1c2] SLOAD */
0x81, /* [451'0x1c3] DUP2 */
0x56, /* [452'0x1c4] JUMP */
0x5b, /* [453'0x1c5] JUMPDEST */
0x60, /* [454'0x1c6] PUSH1 */
0x00,/* constant data */
0x80, /* [456'0x1c8] DUP1 */
0x90, /* [457'0x1c9] SWAP1 */
0x54, /* [458'0x1ca] SLOAD */
0x90, /* [459'0x1cb] SWAP1 */
0x61, /* [460'0x1cc] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [463'0x1cf] EXP */
0x90, /* [464'0x1d0] SWAP1 */
0x04, /* [465'0x1d1] DIV */
0x73, /* [466'0x1d2] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [487'0x1e7] AND */
0x73, /* [488'0x1e8] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [509'0x1fd] AND */
0x33, /* [510'0x1fe] CALLER */
0x73, /* [511'0x1ff] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [532'0x214] AND */
0x14, /* [533'0x215] EQ */
0x15, /* [534'0x216] ISZERO */
0x15, /* [535'0x217] ISZERO */
0x61, /* [536'0x218] PUSH2 */
0x02,0x20,/* constant data */
0x57, /* [539'0x21b] JUMPI */
0x60, /* [540'0x21c] PUSH1 */
0x00,/* constant data */
0x80, /* [542'0x21e] DUP1 */
0xfd, /* [543'0x21f] REVERT */
0x5b, /* [544'0x220] JUMPDEST */
0x80, /* [545'0x221] DUP1 */
0x60, /* [546'0x222] PUSH1 */
0x02,/* constant data */
0x81, /* [548'0x224] DUP2 */
0x90, /* [549'0x225] SWAP1 */
0x55, /* [550'0x226] SSTORE */
0x50, /* [551'0x227] POP */
0x81, /* [552'0x228] DUP2 */
0x60, /* [553'0x229] PUSH1 */
0x03,/* constant data */
0x60, /* [555'0x22b] PUSH1 */
0x00,/* constant data */
0x61, /* [557'0x22d] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [560'0x230] EXP */
0x81, /* [561'0x231] DUP2 */
0x54, /* [562'0x232] SLOAD */
0x81, /* [563'0x233] DUP2 */
0x73, /* [564'0x234] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [585'0x249] MUL */
0x19, /* [586'0x24a] NOT */
0x16, /* [587'0x24b] AND */
0x90, /* [588'0x24c] SWAP1 */
0x83, /* [589'0x24d] DUP4 */
0x73, /* [590'0x24e] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [611'0x263] AND */
0x02, /* [612'0x264] MUL */
0x17, /* [613'0x265] OR */
0x90, /* [614'0x266] SWAP1 */
0x55, /* [615'0x267] SSTORE */
0x50, /* [616'0x268] POP */
0x50, /* [617'0x269] POP */
0x50, /* [618'0x26a] POP */
0x56, /* [619'0x26b] JUMP */
0x5b, /* [620'0x26c] JUMPDEST */
0x50, /* [621'0x26d] POP */
0x56, /* [622'0x26e] JUMP */
0x5b, /* [623'0x26f] JUMPDEST */
0x33, /* [624'0x270] CALLER */
0x60, /* [625'0x271] PUSH1 */
0x01,/* constant data */
0x60, /* [627'0x273] PUSH1 */
0x00,/* constant data */
0x61, /* [629'0x275] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [632'0x278] EXP */
0x81, /* [633'0x279] DUP2 */
0x54, /* [634'0x27a] SLOAD */
0x81, /* [635'0x27b] DUP2 */
0x73, /* [636'0x27c] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x02, /* [657'0x291] MUL */
0x19, /* [658'0x292] NOT */
0x16, /* [659'0x293] AND */
0x90, /* [660'0x294] SWAP1 */
0x83, /* [661'0x295] DUP4 */
0x73, /* [662'0x296] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [683'0x2ab] AND */
0x02, /* [684'0x2ac] MUL */
0x17, /* [685'0x2ad] OR */
0x90, /* [686'0x2ae] SWAP1 */
0x55, /* [687'0x2af] SSTORE */
0x50, /* [688'0x2b0] POP */
0x60, /* [689'0x2b1] PUSH1 */
0x02,/* constant data */
0x54, /* [691'0x2b3] SLOAD */
0x34, /* [692'0x2b4] CALLVALUE */
0x11, /* [693'0x2b5] GT */
0x15, /* [694'0x2b6] ISZERO */
0x61, /* [695'0x2b7] PUSH2 */
0x03,0xf8,/* constant data */
0x57, /* [698'0x2ba] JUMPI */
0x60, /* [699'0x2bb] PUSH1 */
0x03,/* constant data */
0x60, /* [701'0x2bd] PUSH1 */
0x00,/* constant data */
0x90, /* [703'0x2bf] SWAP1 */
0x54, /* [704'0x2c0] SLOAD */
0x90, /* [705'0x2c1] SWAP1 */
0x61, /* [706'0x2c2] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [709'0x2c5] EXP */
0x90, /* [710'0x2c6] SWAP1 */
0x04, /* [711'0x2c7] DIV */
0x73, /* [712'0x2c8] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [733'0x2dd] AND */
0x73, /* [734'0x2de] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [755'0x2f3] AND */
0x60, /* [756'0x2f4] PUSH1 */
0x40,/* constant data */
0x51, /* [758'0x2f6] MLOAD */
0x80, /* [759'0x2f7] DUP1 */
0x80, /* [760'0x2f8] DUP1 */
0x7f, /* [761'0x2f9] PUSH32 */
0x6c,0x6f,0x67,0x45,0x76,0x65,0x6e,0x74,0x28,0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x81, /* [794'0x31a] DUP2 */
0x52, /* [795'0x31b] MSTORE */
0x50, /* [796'0x31c] POP */
0x60, /* [797'0x31d] PUSH1 */
0x0a,/* constant data */
0x01, /* [799'0x31f] ADD */
0x90, /* [800'0x320] SWAP1 */
0x50, /* [801'0x321] POP */
0x60, /* [802'0x322] PUSH1 */
0x40,/* constant data */
0x51, /* [804'0x324] MLOAD */
0x80, /* [805'0x325] DUP1 */
0x91, /* [806'0x326] SWAP2 */
0x03, /* [807'0x327] SUB */
0x90, /* [808'0x328] SWAP1 */
0x20, /* [809'0x329] SHA3 */
0x7c, /* [810'0x32a] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x90, /* [840'0x348] SWAP1 */
0x04, /* [841'0x349] DIV */
0x60, /* [842'0x34a] PUSH1 */
0x40,/* constant data */
0x51, /* [844'0x34c] MLOAD */
0x81, /* [845'0x34d] DUP2 */
0x63, /* [846'0x34e] PUSH4 */
0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [851'0x353] AND */
0x7c, /* [852'0x354] PUSH29 */
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* constant data */
0x02, /* [882'0x372] MUL */
0x81, /* [883'0x373] DUP2 */
0x52, /* [884'0x374] MSTORE */
0x60, /* [885'0x375] PUSH1 */
0x04,/* constant data */
0x01, /* [887'0x377] ADD */
0x60, /* [888'0x378] PUSH1 */
0x00,/* constant data */
0x60, /* [890'0x37a] PUSH1 */
0x40,/* constant data */
0x51, /* [892'0x37c] MLOAD */
0x80, /* [893'0x37d] DUP1 */
0x83, /* [894'0x37e] DUP4 */
0x03, /* [895'0x37f] SUB */
0x81, /* [896'0x380] DUP2 */
0x86, /* [897'0x381] DUP7 */
0x5a, /* [898'0x382] GAS */
0xf4, /* [899'0x383] DELEGATECALL */
0x92, /* [900'0x384] SWAP3 */
0x50, /* [901'0x385] POP */
0x50, /* [902'0x386] POP */
0x50, /* [903'0x387] POP */
0x50, /* [904'0x388] POP */
0x60, /* [905'0x389] PUSH1 */
0x01,/* constant data */
0x60, /* [907'0x38b] PUSH1 */
0x00,/* constant data */
0x90, /* [909'0x38d] SWAP1 */
0x54, /* [910'0x38e] SLOAD */
0x90, /* [911'0x38f] SWAP1 */
0x61, /* [912'0x390] PUSH2 */
0x01,0x00,/* constant data */
0x0a, /* [915'0x393] EXP */
0x90, /* [916'0x394] SWAP1 */
0x04, /* [917'0x395] DIV */
0x73, /* [918'0x396] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [939'0x3ab] AND */
0x73, /* [940'0x3ac] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [961'0x3c1] AND */
0x61, /* [962'0x3c2] PUSH2 */
0x08,0xfc,/* constant data */
0x30, /* [965'0x3c5] ADDRESS */
0x73, /* [966'0x3c6] PUSH20 */
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,/* constant data */
0x16, /* [987'0x3db] AND */
0x31, /* [988'0x3dc] BALANCE */
0x90, /* [989'0x3dd] SWAP1 */
0x81, /* [990'0x3de] DUP2 */
0x15, /* [991'0x3df] ISZERO */
0x02, /* [992'0x3e0] MUL */
0x90, /* [993'0x3e1] SWAP1 */
0x60, /* [994'0x3e2] PUSH1 */
0x40,/* constant data */
0x51, /* [996'0x3e4] MLOAD */
0x60, /* [997'0x3e5] PUSH1 */
0x00,/* constant data */
0x60, /* [999'0x3e7] PUSH1 */
0x40,/* constant data */
0x51, /* [1001'0x3e9] MLOAD */
0x80, /* [1002'0x3ea] DUP1 */
0x83, /* [1003'0x3eb] DUP4 */
0x03, /* [1004'0x3ec] SUB */
0x81, /* [1005'0x3ed] DUP2 */
0x85, /* [1006'0x3ee] DUP6 */
0x88, /* [1007'0x3ef] DUP9 */
0x88, /* [1008'0x3f0] DUP9 */
0xf1, /* [1009'0x3f1] CALL */
0x93, /* [1010'0x3f2] SWAP4 */
0x50, /* [1011'0x3f3] POP */
0x50, /* [1012'0x3f4] POP */
0x50, /* [1013'0x3f5] POP */
0x50, /* [1014'0x3f6] POP */
0x50, /* [1015'0x3f7] POP */
0x5b, /* [1016'0x3f8] JUMPDEST */
0x56, /* [1017'0x3f9] JUMP */
0x00, /* [1018'0x3fa] STOP */
0xa1, /* [1019'0x3fb] LOG1 */
0x65, /* [1020'0x3fc] PUSH6 */
0x62,0x7a,0x7a,0x72,0x30,0x58,/* constant data */
0x20, /* [1027'0x403] SHA3 */
0x57, /* [1028'0x404] JUMPI */
0x0a, /* [1029'0x405] EXP */
0x9e, /* [1030'0x406] SWAP15 */
0xac, /* [1031'0x407] INVALID' byte */
0x2a, /* [1032'0x408] INVALID' byte */
0x3e, /* [1033'0x409] RETURNDATACOPY */
0xb4, /* [1034'0x40a] INVALID' byte */
0x0c, /* [1035'0x40b] INVALID' byte */
0x40, /* [1036'0x40c] BLOCKHASH */
0x82, /* [1037'0x40d] DUP3 */
0x80, /* [1038'0x40e] DUP1 */
0xdf, /* [1039'0x40f] INVALID' byte */
0x5b, /* [1040'0x410] JUMPDEST */
0x0d, /* [1041'0x411] INVALID' byte */
0x7e, /* [1042'0x412] PUSH31 */
0x0a,0xdb,0x94,0xfe,0xd4,0x55,0x76,0x4b,0xa0,0xdb,0x03,0xc3,0x80,0x1d,0x06,0x55,0x94,0x00,0x29,};

const eevm::Code& eevm::EVM2CPP_testBank::bytecode() {
    return _contract_bytecode;
}

const std::string eevm::EVM2CPP_testBank::_contract_name = "testBank";
[[maybe_unused]] const eevm::DerivedRegister<eevm::EVM2CPP_testBank> eevm::EVM2CPP_testBank::reg{};
const std::string& eevm::EVM2CPP_testBank::name() {
    return _contract_name;
}

// interned globals

constexpr uint256_t c_0 = 0x0_u256;
constexpr uint256_t c_1 = 0x1_u256;
constexpr uint256_t c_2 = 0x2_u256;
constexpr uint256_t c_3 = 0x3_u256;
constexpr uint256_t c_4 = 0x4_u256;
constexpr uint256_t c_a = 0xa_u256;
constexpr uint256_t c_20 = 0x20_u256;
constexpr uint256_t c_24 = 0x24_u256;
constexpr uint256_t c_40 = 0x40_u256;
constexpr uint256_t c_44 = 0x44_u256;
constexpr uint256_t c_6d = 0x6d_u256;
constexpr uint256_t c_6f = 0x6f_u256;
constexpr uint256_t c_7b = 0x7b_u256;
constexpr uint256_t c_80 = 0x80_u256;
constexpr uint256_t c_84 = 0x84_u256;
constexpr uint256_t c_86 = 0x86_u256;
constexpr uint256_t c_92 = 0x92_u256;
constexpr uint256_t c_9b = 0x9b_u256;
constexpr uint256_t c_b1 = 0xb1_u256;
constexpr uint256_t c_bd = 0xbd_u256;
constexpr uint256_t c_fc = 0xfc_u256;
constexpr uint256_t c_fe = 0xfe_u256;
constexpr uint256_t c_100 = 0x100_u256;
constexpr uint256_t c_10a = 0x10a_u256;
constexpr uint256_t c_13f = 0x13f_u256;
constexpr uint256_t c_141 = 0x141_u256;
constexpr uint256_t c_149 = 0x149_u256;
constexpr uint256_t c_14b = 0x14b_u256;
constexpr uint256_t c_1a6 = 0x1a6_u256;
constexpr uint256_t c_1bf = 0x1bf_u256;
constexpr uint256_t c_1c5 = 0x1c5_u256;
constexpr uint256_t c_220 = 0x220_u256;
constexpr uint256_t c_26c = 0x26c_u256;
constexpr uint256_t c_26f = 0x26f_u256;
constexpr uint256_t c_3f8 = 0x3f8_u256;
constexpr uint256_t c_8fc = 0x8fc_u256;
constexpr uint256_t c_41c0e1b5 = 0x41c0e1b5_u256;
constexpr uint256_t c_4f057506 = 0x4f057506_u256;
constexpr uint256_t c_5f66d2a9 = 0x5f66d2a9_u256;
constexpr uint256_t c_a6f9dae1 = 0xa6f9dae1_u256;
constexpr uint256_t c_d4e93292 = 0xd4e93292_u256;
constexpr uint256_t c_ffffffff = 0xffffffff_u256;
constexpr uint256_t g_46 = 0x627a7a723058_u256;
constexpr uint256_t g_47 = 0xadb94fed455764ba0db03c3801d0655940029_u256;
constexpr uint256_t g_26 = 0xffffffffffffffffffffffffffffffffffffffff_u256;
constexpr uint256_t g_5 = 0x100000000000000000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_43 = 0x6c6f674576656e74282900000000000000000000000000000000000000000000_u256;
constexpr uint256_t g_41 = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000_u256;

// code
void eevm::EVM2CPP_testBank::dispatch() {
    
static void* _JUMP_TABLE_ARR[] = {&&_evm_start,

    &&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_6d,
&&__invld,
&&pc_6f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_7b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_84,
&&__invld,
&&pc_86,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_92,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_9b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_b1,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_bd,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_fc,
&&__invld,
&&pc_fe,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_10a,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_13f,
&&__invld,
&&pc_141,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_149,
&&__invld,
&&pc_14b,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1a6,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1bf,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_1c5,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_220,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_26c,
&&__invld,
&&__invld,
&&pc_26f,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_3f8,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&pc_410,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,
&&__invld,

};

goto _evm_start;

__invld:
    throw Exception(ET::illegalInstruction, "EVM-level invalid jump target");

#define JUMP(target) { \
    uint64_t _jump_target = static_cast<uint64_t>(target); \
    if (_jump_target < (std::size(_JUMP_TABLE_ARR))) { \
        goto *_JUMP_TABLE_ARR[_jump_target]; \
    } else { goto __invld; }}

_evm_start:
    pc_0:
{ /* <============ */ 
on_bb_start(0);
/* PUSH1 */
/* val = [128] */

/* PUSH1 */
/* val = [64] */

/* MSTORE */
/* op_0 = Constant((1, 64)) */
/* op_1 = Constant((0, 128)) */
mstore_v(c_40, c_80);


/* PUSH1 */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_4_0 = calldatasize_v();


/* LT */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_5_0 = lt_v(v_4_0, c_4);


/* PUSH2 */
/* val = [109] */

/* JUMPI */
/* op_0 = Constant((6, 109)) */
/* op_1 = InstructionRef((5, 0)) */
if ( v_5_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_6d;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_d:
{ /* <============ */ 
on_bb_start(13);
/* PUSH1 */
/* val = [0] */

/* CALLDATALOAD */
/* op_0 = Constant((0, 0)) */
const uint256_t v_1_0 = calldataload_v(c_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((1, 0)) */

/* DIV */
/* op_0 = InstructionRef((1, 0)) */
/* op_1 = Constant((2, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_4_0 = div_v(v_1_0, g_5);


/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((5, 4294967295)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_6_0 = and_v(c_ffffffff, v_4_0);


/* DUP1 */
/* op_0 = InstructionRef((6, 0)) */

/* PUSH4 */
/* val = [1103159733] */

/* EQ */
/* op_0 = Constant((8, 1103159733)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_9_0 = eq_v(c_41c0e1b5, v_6_0);


/* PUSH2 */
/* val = [111] */

/* JUMPI */
/* op_0 = Constant((10, 111)) */
/* op_1 = InstructionRef((9, 0)) */
if ( v_9_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
 
 goto pc_6f;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((6, 0))*/
ctxt->s.push(v_6_0);
}pc_41:
{ /* <============ */ 
on_bb_start(65);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1325757702] */

/* EQ */
/* op_0 = Constant((1, 1325757702)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_4f057506, s_0_0);


/* PUSH2 */
/* val = [134] */

/* JUMPI */
/* op_0 = Constant((3, 134)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_86;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_4c:
{ /* <============ */ 
on_bb_start(76);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [1600574121] */

/* EQ */
/* op_0 = Constant((1, 1600574121)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_5f66d2a9, s_0_0);


/* PUSH2 */
/* val = [177] */

/* JUMPI */
/* op_0 = Constant((3, 177)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_b1;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_57:
{ /* <============ */ 
on_bb_start(87);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [2801392353] */

/* EQ */
/* op_0 = Constant((1, 2801392353)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_a6f9dae1, s_0_0);


/* PUSH2 */
/* val = [254] */

/* JUMPI */
/* op_0 = Constant((3, 254)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_fe;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_62:
{ /* <============ */ 
on_bb_start(98);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH4 */
/* val = [3572052626] */

/* EQ */
/* op_0 = Constant((1, 3572052626)) */
/* op_1 = StackRef((0, 0)) */
const uint256_t v_2_0 = eq_v(c_d4e93292, s_0_0);


/* PUSH2 */
/* val = [321] */

/* JUMPI */
/* op_0 = Constant((3, 321)) */
/* op_1 = InstructionRef((2, 0)) */
if ( v_2_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_141;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6d:
{ /* <============ */ 
on_bb_start(109);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_6f:
{ /* <============ */ 
on_bb_start(111);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [123] */

/* JUMPI */
/* op_0 = Constant((4, 123)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_7b;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_77:
{ /* <============ */ 
on_bb_start(119);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_7b:
{ /* <============ */ 
on_bb_start(123);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [132] */

/* PUSH2 */
/* val = [331] */

/* JUMP */
/* op_0 = Constant((3, 331)) */
/* BB finalizer */
ctxt->s.set(0, c_84);
/* no pops at end */
/* no BB returns */

goto pc_14b;


}pc_84:
{ /* <============ */ 
on_bb_start(132);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_86:
{ /* <============ */ 
on_bb_start(134);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [146] */

/* JUMPI */
/* op_0 = Constant((4, 146)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_92;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_8e:
{ /* <============ */ 
on_bb_start(142);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_92:
{ /* <============ */ 
on_bb_start(146);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [155] */

/* PUSH2 */
/* val = [447] */

/* JUMP */
/* op_0 = Constant((3, 447)) */
/* BB finalizer */
ctxt->s.set(0, c_9b);
/* no pops at end */
/* no BB returns */

goto pc_1bf;


}pc_9b:
{ /* <============ */ 
on_bb_start(155);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((1, 64)) */
const uint256_t v_2_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((2, 0)) */

/* DUP3 */
/* op_0 = StackRef((0, 0)) */

/* DUP2 */
/* op_0 = InstructionRef((2, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 0)) */
mstore_v(v_2_0, s_0_0);


/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((7, 32)) */
/* op_1 = InstructionRef((2, 0)) */
const uint256_t v_8_0 = add_v(c_20, v_2_0);


/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = StackRef((0, 0)) */

/* POP */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((12, 64)) */
const uint256_t v_13_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((13, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SUB */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_16_0 = sub_v(v_8_0, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */

/* RETURN */
/* op_0 = InstructionRef((13, 0)) */
/* op_1 = InstructionRef((16, 0)) */
return_v(v_13_0, v_16_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */
}pc_b1:
{ /* <============ */ 
on_bb_start(177);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [189] */

/* JUMPI */
/* op_0 = Constant((4, 189)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_bd;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_b9:
{ /* <============ */ 
on_bb_start(185);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_bd:
{ /* <============ */ 
on_bb_start(189);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [252] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_26, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* DUP1 */
/* op_0 = Constant((17, 36)) */
/* val = [36] */

/* CALLDATALOAD */
/* op_0 = Constant((17, 36)) */
const uint256_t v_23_0 = calldataload_v(c_24);


/* SWAP1 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = Constant((17, 36)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((25, 32)) */
/* op_1 = Constant((17, 36)) */
/* val = [68] */

/* SWAP1 */
/* op_0 = Constant((26, 68)) */
/* op_1 = InstructionRef((23, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((23, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((26, 68)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [453] */

/* JUMP */
/* op_0 = Constant((34, 453)) */
/* BB finalizer */
ctxt->s.set(0, c_fc);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);
/* BB return 1 InstructionRef((23, 0))*/
ctxt->s.push(v_23_0);

goto pc_1c5;


}pc_fc:
{ /* <============ */ 
on_bb_start(252);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_fe:
{ /* <============ */ 
on_bb_start(254);
/* JUMPDEST */

/* CALLVALUE */
const uint256_t v_1_0 = callvalue_v();


/* DUP1 */
/* op_0 = InstructionRef((1, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = iszero_v(v_1_0);


/* PUSH2 */
/* val = [266] */

/* JUMPI */
/* op_0 = Constant((4, 266)) */
/* op_1 = InstructionRef((3, 0)) */
if ( v_3_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
 
 goto pc_10a;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((1, 0))*/
ctxt->s.push(v_1_0);
}pc_106:
{ /* <============ */ 
on_bb_start(262);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_10a:
{ /* <============ */ 
on_bb_start(266);
/* JUMPDEST */

/* POP */

/* PUSH2 */
/* val = [319] */

/* PUSH1 */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATASIZE */
const uint256_t v_5_0 = calldatasize_v();


/* SUB */
/* op_0 = InstructionRef((5, 0)) */
/* op_1 = Constant((3, 4)) */
const uint256_t v_6_0 = sub_v(v_5_0, c_4);


/* DUP2 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* ADD */
/* op_0 = Constant((3, 4)) */
/* op_1 = InstructionRef((6, 0)) */
const uint256_t v_8_0 = add_v(c_4, v_6_0);


/* SWAP1 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* DUP1 */
/* op_0 = Constant((3, 4)) */
/* val = [4] */

/* CALLDATALOAD */
/* op_0 = Constant((3, 4)) */
const uint256_t v_12_0 = calldataload_v(c_4);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((13, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_14_0 = and_v(g_26, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((3, 4)) */

/* PUSH1 */
/* val = [32] */

/* ADD */
/* op_0 = Constant((16, 32)) */
/* op_1 = Constant((3, 4)) */
/* val = [36] */

/* SWAP1 */
/* op_0 = Constant((17, 36)) */
/* op_1 = InstructionRef((14, 0)) */

/* SWAP3 */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = InstructionRef((8, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((8, 0)) */
/* op_1 = Constant((3, 4)) */

/* SWAP1 */
/* op_0 = Constant((3, 4)) */
/* op_1 = Constant((17, 36)) */

/* POP */

/* POP */

/* POP */

/* PUSH2 */
/* val = [620] */

/* JUMP */
/* op_0 = Constant((25, 620)) */
/* BB finalizer */
ctxt->s.set(0, c_13f);
/* no pops at end */
/* BB return 0 InstructionRef((14, 0))*/
ctxt->s.push(v_14_0);

goto pc_26c;


}pc_13f:
{ /* <============ */ 
on_bb_start(319);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_141:
{ /* <============ */ 
on_bb_start(321);
/* JUMPDEST */

/* PUSH2 */
/* val = [329] */

/* PUSH2 */
/* val = [623] */

/* JUMP */
/* op_0 = Constant((2, 623)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((1, 329))*/
ctxt->s.push(c_149);

goto pc_26f;


}pc_149:
{ /* <============ */ 
on_bb_start(329);
/* JUMPDEST */

/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_14b:
{ /* <============ */ 
on_bb_start(331);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_26, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_26, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_26, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [422] */

/* JUMPI */
/* op_0 = Constant((20, 422)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_1a6;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a2:
{ /* <============ */ 
on_bb_start(418);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1a6:
{ /* <============ */ 
on_bb_start(422);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((2, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_3_0 = and_v(g_26, v_1_0);


/* SELFDESTRUCT */
/* op_0 = InstructionRef((3, 0)) */
selfdestruct_v(v_3_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_1bf:
{ /* <============ */ 
on_bb_start(447);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((1, 2)) */
const uint256_t v_2_0 = sload_v(c_2);


/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 InstructionRef((2, 0))*/
ctxt->s.push(v_2_0);

JUMP(s_0_0);


}pc_1c5:
{ /* <============ */ 
on_bb_start(453);
/* JUMPDEST */

/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((1, 0)) */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((1, 0)) */

/* SLOAD */
/* op_0 = Constant((1, 0)) */
const uint256_t v_4_0 = sload_v(c_0);


/* SWAP1 */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((6, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((7, 1)) */
/* op_1 = InstructionRef((4, 0)) */

/* DIV */
/* op_0 = InstructionRef((4, 0)) */
/* op_1 = Constant((7, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((4, 0)) */
const uint256_t v_11_0 = and_v(g_26, v_4_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((12, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((11, 0)) */
const uint256_t v_13_0 = and_v(g_26, v_11_0);


/* CALLER */
const uint256_t v_14_0 = caller_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_16_0 = and_v(g_26, v_14_0);


/* EQ */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((13, 0)) */
TRACE_COMP(eevm::Opcode::EQ, v_16_0, v_13_0);
const uint256_t v_17_0 = eq_v(v_16_0, v_13_0);


/* ISZERO */
/* op_0 = InstructionRef((17, 0)) */
const uint256_t v_18_0 = iszero_v(v_17_0);


/* ISZERO */
/* op_0 = InstructionRef((18, 0)) */
const uint256_t v_19_0 = iszero_v(v_18_0);


/* PUSH2 */
/* val = [544] */

/* JUMPI */
/* op_0 = Constant((20, 544)) */
/* op_1 = InstructionRef((19, 0)) */
if ( v_19_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_220;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_21c:
{ /* <============ */ 
on_bb_start(540);
/* PUSH1 */
/* val = [0] */

/* DUP1 */
/* op_0 = Constant((0, 0)) */
/* val = [0] */

/* REVERT */
/* op_0 = Constant((0, 0)) */
/* op_1 = Constant((0, 0)) */
revert_v(c_0, c_0);
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_220:
{ /* <============ */ 
on_bb_start(544);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* JUMPDEST */

/* DUP1 */
/* op_0 = StackRef((0, 0)) */

/* PUSH1 */
/* val = [2] */

/* DUP2 */
/* op_0 = StackRef((0, 0)) */

/* SWAP1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = Constant((2, 2)) */

/* SSTORE */
/* op_0 = Constant((2, 2)) */
/* op_1 = StackRef((0, 0)) */
sstore_v(c_2, s_0_0);


/* POP */

/* DUP2 */
/* op_0 = StackRef((0, 1)) */

/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((10, 256)) */
/* op_1 = Constant((9, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((8, 3)) */
/* val = [3] */

/* SLOAD */
/* op_0 = Constant((8, 3)) */
const uint256_t v_13_0 = sload_v(c_3);


/* DUP2 */
/* op_0 = Constant((11, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((11, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((16, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((17, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((13, 0)) */
const uint256_t v_18_0 = and_v(g_41, v_13_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((11, 1)) */

/* DUP4 */
/* op_0 = StackRef((0, 1)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((21, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_22_0 = and_v(g_26, s_0_1);


/* MUL */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = Constant((11, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((18, 0)) */
const uint256_t v_24_0 = or_v(v_22_0, v_18_0);


/* SWAP1 */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = Constant((8, 3)) */

/* SSTORE */
/* op_0 = Constant((8, 3)) */
/* op_1 = InstructionRef((24, 0)) */
sstore_v(c_3, v_24_0);


/* POP */

/* POP */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 2)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(3);
/* no BB returns */

JUMP(s_0_2);


}pc_26c:
{ /* <============ */ 
on_bb_start(620);
const uint256_t s_0_1 = ctxt->s.peek(1);
/* JUMPDEST */

/* POP */

/* JUMP */
/* op_0 = StackRef((0, 1)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(2);
/* no BB returns */

JUMP(s_0_1);


}pc_26f:
{ /* <============ */ 
on_bb_start(623);
/* JUMPDEST */

/* CALLER */
const uint256_t v_1_0 = caller_v();


/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((4, 256)) */
/* op_1 = Constant((3, 0)) */
/* val = [1] */

/* DUP2 */
/* op_0 = Constant((2, 1)) */
/* val = [1] */

/* SLOAD */
/* op_0 = Constant((2, 1)) */
const uint256_t v_7_0 = sload_v(c_1);


/* DUP2 */
/* op_0 = Constant((5, 1)) */
/* val = [1] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* MUL */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = Constant((5, 1)) */
/* val = [1461501637330902918203684832716283019655932542975] */

/* NOT */
/* op_0 = Constant((10, 1461501637330902918203684832716283019655932542975)) */
/* val = [115792089237316195423570985007226406215939081747436879206741300988257197096960] */

/* AND */
/* op_0 = Constant((11, 115792089237316195423570985007226406215939081747436879206741300988257197096960)) */
/* op_1 = InstructionRef((7, 0)) */
const uint256_t v_12_0 = and_v(g_41, v_7_0);


/* SWAP1 */
/* op_0 = InstructionRef((12, 0)) */
/* op_1 = Constant((5, 1)) */

/* DUP4 */
/* op_0 = InstructionRef((1, 0)) */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((15, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((1, 0)) */
const uint256_t v_16_0 = and_v(g_26, v_1_0);


/* MUL */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = Constant((5, 1)) */
/* val = [] */

/* OR */
/* op_0 = InstructionRef((16, 0)) */
/* op_1 = InstructionRef((12, 0)) */
const uint256_t v_18_0 = or_v(v_16_0, v_12_0);


/* SWAP1 */
/* op_0 = InstructionRef((18, 0)) */
/* op_1 = Constant((2, 1)) */

/* SSTORE */
/* op_0 = Constant((2, 1)) */
/* op_1 = InstructionRef((18, 0)) */
sstore_v(c_1, v_18_0);


/* POP */

/* PUSH1 */
/* val = [2] */

/* SLOAD */
/* op_0 = Constant((22, 2)) */
const uint256_t v_23_0 = sload_v(c_2);


/* CALLVALUE */
const uint256_t v_24_0 = callvalue_v();


/* GT */
/* op_0 = InstructionRef((24, 0)) */
/* op_1 = InstructionRef((23, 0)) */
TRACE_COMP(eevm::Opcode::GT, v_24_0, v_23_0);
const uint256_t v_25_0 = gt_v(v_24_0, v_23_0);


/* ISZERO */
/* op_0 = InstructionRef((25, 0)) */
const uint256_t v_26_0 = iszero_v(v_25_0);


/* PUSH2 */
/* val = [1016] */

/* JUMPI */
/* op_0 = Constant((27, 1016)) */
/* op_1 = InstructionRef((26, 0)) */
if ( v_26_0 ) { 
 /* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
 
 goto pc_3f8;
 
 }

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_2bb:
{ /* <============ */ 
on_bb_start(699);
/* PUSH1 */
/* val = [3] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((1, 0)) */
/* op_1 = Constant((0, 3)) */

/* SLOAD */
/* op_0 = Constant((0, 3)) */
const uint256_t v_3_0 = sload_v(c_3);


/* SWAP1 */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((1, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((5, 256)) */
/* op_1 = Constant((1, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((6, 1)) */
/* op_1 = InstructionRef((3, 0)) */

/* DIV */
/* op_0 = InstructionRef((3, 0)) */
/* op_1 = Constant((6, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((9, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((3, 0)) */
const uint256_t v_10_0 = and_v(g_26, v_3_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((11, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((10, 0)) */
const uint256_t v_12_0 = and_v(g_26, v_10_0);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((13, 64)) */
const uint256_t v_14_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((14, 0)) */

/* DUP1 */
/* op_0 = InstructionRef((14, 0)) */

/* PUSH32 */
/* val = [49046620423761786965642509377682186787694544534046692956485956219622226132992] */

/* DUP2 */
/* op_0 = InstructionRef((14, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((14, 0)) */
/* op_1 = Constant((17, 49046620423761786965642509377682186787694544534046692956485956219622226132992)) */
mstore_v(v_14_0, g_43);


/* POP */

/* PUSH1 */
/* val = [10] */

/* ADD */
/* op_0 = Constant((21, 10)) */
/* op_1 = InstructionRef((14, 0)) */
const uint256_t v_22_0 = add_v(c_a, v_14_0);


/* SWAP1 */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((14, 0)) */

/* POP */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((25, 64)) */
const uint256_t v_26_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((26, 0)) */

/* SWAP2 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((22, 0)) */

/* SUB */
/* op_0 = InstructionRef((22, 0)) */
/* op_1 = InstructionRef((26, 0)) */
const uint256_t v_29_0 = sub_v(v_22_0, v_26_0);


/* SWAP1 */
/* op_0 = InstructionRef((29, 0)) */
/* op_1 = InstructionRef((26, 0)) */

/* SHA3 */
/* op_0 = InstructionRef((26, 0)) */
/* op_1 = InstructionRef((29, 0)) */
const uint256_t v_31_0 = sha3_v(v_26_0, v_29_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* SWAP1 */
/* op_0 = Constant((32, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((31, 0)) */

/* DIV */
/* op_0 = InstructionRef((31, 0)) */
/* op_1 = Constant((32, 26959946667150639794667015087019630673637144422540572481103610249216)) */
const uint256_t v_34_0 = div_v(v_31_0, g_5);


/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((35, 64)) */
const uint256_t v_36_0 = mload_v(c_40);


/* DUP2 */
/* op_0 = InstructionRef((34, 0)) */

/* PUSH4 */
/* val = [4294967295] */

/* AND */
/* op_0 = Constant((38, 4294967295)) */
/* op_1 = InstructionRef((34, 0)) */
const uint256_t v_39_0 = and_v(c_ffffffff, v_34_0);


/* PUSH29 */
/* val = [26959946667150639794667015087019630673637144422540572481103610249216] */

/* MUL */
/* op_0 = Constant((40, 26959946667150639794667015087019630673637144422540572481103610249216)) */
/* op_1 = InstructionRef((39, 0)) */
const uint256_t v_41_0 = mul_v(g_5, v_39_0);


/* DUP2 */
/* op_0 = InstructionRef((36, 0)) */

/* MSTORE */
/* op_0 = InstructionRef((36, 0)) */
/* op_1 = InstructionRef((41, 0)) */
mstore_v(v_36_0, v_41_0);


/* PUSH1 */
/* val = [4] */

/* ADD */
/* op_0 = Constant((44, 4)) */
/* op_1 = InstructionRef((36, 0)) */
const uint256_t v_45_0 = add_v(c_4, v_36_0);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((47, 64)) */
const uint256_t v_48_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((48, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((45, 0)) */

/* SUB */
/* op_0 = InstructionRef((45, 0)) */
/* op_1 = InstructionRef((48, 0)) */
const uint256_t v_51_0 = sub_v(v_45_0, v_48_0);


/* DUP2 */
/* op_0 = InstructionRef((48, 0)) */

/* DUP7 */
/* op_0 = InstructionRef((12, 0)) */

/* GAS */
const uint256_t v_54_0 = gas_v();


/* DELEGATECALL */
/* op_0 = InstructionRef((54, 0)) */
/* op_1 = InstructionRef((12, 0)) */
/* op_2 = InstructionRef((48, 0)) */
/* op_3 = InstructionRef((51, 0)) */
/* op_4 = InstructionRef((48, 0)) */
/* op_5 = Constant((46, 0)) */
const uint256_t v_55_0 = delegatecall_v(v_54_0, v_12_0, v_48_0, v_51_0, v_48_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP3 */
/* op_0 = InstructionRef((55, 0)) */
/* op_1 = InstructionRef((12, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* PUSH1 */
/* val = [1] */

/* PUSH1 */
/* val = [0] */

/* SWAP1 */
/* op_0 = Constant((62, 0)) */
/* op_1 = Constant((61, 1)) */

/* SLOAD */
/* op_0 = Constant((61, 1)) */
const uint256_t v_64_0 = sload_v(c_1);


/* SWAP1 */
/* op_0 = InstructionRef((64, 0)) */
/* op_1 = Constant((62, 0)) */

/* PUSH2 */
/* val = [256] */

/* EXP */
/* op_0 = Constant((66, 256)) */
/* op_1 = Constant((62, 0)) */
/* val = [1] */

/* SWAP1 */
/* op_0 = Constant((67, 1)) */
/* op_1 = InstructionRef((64, 0)) */

/* DIV */
/* op_0 = InstructionRef((64, 0)) */
/* op_1 = Constant((67, 1)) */
/* val = [] */

/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((70, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((64, 0)) */
const uint256_t v_71_0 = and_v(g_26, v_64_0);


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((72, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((71, 0)) */
const uint256_t v_73_0 = and_v(g_26, v_71_0);


/* PUSH2 */
/* val = [2300] */

/* ADDRESS */
const uint256_t v_75_0 = address_v();


/* PUSH20 */
/* val = [1461501637330902918203684832716283019655932542975] */

/* AND */
/* op_0 = Constant((76, 1461501637330902918203684832716283019655932542975)) */
/* op_1 = InstructionRef((75, 0)) */
const uint256_t v_77_0 = and_v(g_26, v_75_0);


/* BALANCE */
/* op_0 = InstructionRef((77, 0)) */
const uint256_t v_78_0 = balance_v(v_77_0);


/* SWAP1 */
/* op_0 = InstructionRef((78, 0)) */
/* op_1 = Constant((74, 2300)) */

/* DUP2 */
/* op_0 = InstructionRef((78, 0)) */

/* ISZERO */
/* op_0 = InstructionRef((78, 0)) */
const uint256_t v_81_0 = iszero_v(v_78_0);


/* MUL */
/* op_0 = InstructionRef((81, 0)) */
/* op_1 = Constant((74, 2300)) */
const uint256_t v_82_0 = mul_v(v_81_0, c_8fc);


/* SWAP1 */
/* op_0 = InstructionRef((82, 0)) */
/* op_1 = InstructionRef((78, 0)) */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((84, 64)) */
const uint256_t v_85_0 = mload_v(c_40);


/* PUSH1 */
/* val = [0] */

/* PUSH1 */
/* val = [64] */

/* MLOAD */
/* op_0 = Constant((87, 64)) */
const uint256_t v_88_0 = mload_v(c_40);


/* DUP1 */
/* op_0 = InstructionRef((88, 0)) */

/* DUP4 */
/* op_0 = InstructionRef((85, 0)) */

/* SUB */
/* op_0 = InstructionRef((85, 0)) */
/* op_1 = InstructionRef((88, 0)) */
const uint256_t v_91_0 = sub_v(v_85_0, v_88_0);


/* DUP2 */
/* op_0 = InstructionRef((88, 0)) */

/* DUP6 */
/* op_0 = InstructionRef((78, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((73, 0)) */

/* DUP9 */
/* op_0 = InstructionRef((82, 0)) */

/* CALL */
/* op_0 = InstructionRef((82, 0)) */
/* op_1 = InstructionRef((73, 0)) */
/* op_2 = InstructionRef((78, 0)) */
/* op_3 = InstructionRef((88, 0)) */
/* op_4 = InstructionRef((91, 0)) */
/* op_5 = InstructionRef((88, 0)) */
/* op_6 = Constant((86, 0)) */
const uint256_t v_96_0 = call_v(v_82_0, v_73_0, v_78_0, v_88_0, v_91_0, v_88_0, c_0);
if (ctxt->error) goto exit_label;


/* SWAP4 */
/* op_0 = InstructionRef((96, 0)) */
/* op_1 = InstructionRef((73, 0)) */

/* POP */

/* POP */

/* POP */

/* POP */

/* POP */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3f8:
{ /* <============ */ 
on_bb_start(1016);
const uint256_t s_0_0 = ctxt->s.peek(0);
/* JUMPDEST */

/* JUMP */
/* op_0 = StackRef((0, 0)) */
/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(1);
/* no BB returns */

JUMP(s_0_0);


}pc_3fa:
{ /* <============ */ 
on_bb_start(1018);
/* STOP */
stop_v();
goto exit_label;


/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_3fb:
{ /* <============ */ 
on_bb_start(1019);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
const uint256_t s_0_3 = ctxt->s.peek(3);
const uint256_t s_0_4 = ctxt->s.peek(4);
/* LOG1 */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
log1_v(s_0_0, s_0_1, s_0_2);


/* PUSH6 */
/* val = [108278179835992] */

/* SHA3 */
/* op_0 = Constant((1, 108278179835992)) */
/* op_1 = StackRef((0, 3)) */
const uint256_t v_2_0 = sha3_v(g_46, s_0_3);


/* JUMPI */
/* op_0 = InstructionRef((2, 0)) */
/* op_1 = StackRef((0, 4)) */
if ( s_0_4 ) { 
 /* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
 
 JUMP(v_2_0);
 
 }

/* BB finalizer */
/* no stack sets */
ctxt->s.pop_drop_n(5);
/* no BB returns */
}pc_405:
{ /* <============ */ 
on_bb_start(1029);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_16 = ctxt->s.peek(16);
/* EXP */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
const uint256_t v_0_0 = exp_v(s_0_0, s_0_1);


/* SWAP15 */
/* op_0 = InstructionRef((0, 0)) */
/* op_1 = StackRef((0, 16)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x405 (inst offset 2; byte 0xac)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_408:
{ /* <============ */ 
on_bb_start(1032);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x408 (inst offset 0; byte 0x2a)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_409:
{ /* <============ */ 
on_bb_start(1033);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_1 = ctxt->s.peek(1);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* RETURNDATACOPY */
/* op_0 = StackRef((0, 0)) */
/* op_1 = StackRef((0, 1)) */
/* op_2 = StackRef((0, 2)) */
returndatacopy_v(s_0_0, s_0_1, s_0_2);


throw Exception(ET::illegalInstruction, "invalid instruction @ 0x409 (inst offset 1; byte 0xb4)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_40b:
{ /* <============ */ 
on_bb_start(1035);
throw Exception(ET::illegalInstruction, "invalid instruction @ 0x40b (inst offset 0; byte 0xc)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_40c:
{ /* <============ */ 
on_bb_start(1036);
const uint256_t s_0_0 = ctxt->s.peek(0);
const uint256_t s_0_2 = ctxt->s.peek(2);
/* BLOCKHASH */
/* op_0 = StackRef((0, 0)) */
const uint256_t v_0_0 = blockhash_v(s_0_0);


/* DUP3 */
/* op_0 = StackRef((0, 2)) */

/* DUP1 */
/* op_0 = StackRef((0, 2)) */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x40c (inst offset 3; byte 0xdf)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_410:
{ /* <============ */ 
on_bb_start(1040);
/* JUMPDEST */

throw Exception(ET::illegalInstruction, "invalid instruction @ 0x410 (inst offset 1; byte 0xd)");

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* no BB returns */
}pc_412:
{ /* <============ */ 
on_bb_start(1042);
/* PUSH31 */
/* val = [242135743121077264846900781579261300509507625] */

/* BB finalizer */
/* no stack sets */
/* no pops at end */
/* BB return 0 Constant((0, 242135743121077264846900781579261300509507625))*/
ctxt->s.push(g_47);
}exit_label:
  return;
}

const eevm::Code _constructor_bytecode = {
0x60,0x80,0x60,0x40,0x52,0x67,0xd,0xe0,0xb6,0xb3,0xa7,0x64,0x0,0x0,0x60,0x2,0x55,0x73,0x25,0xdf,0x6e,0x3d,0xa4,0x9f,0x41,0xef,0x5b,0x99,0xe1,0x39,0xc8,0x7a,0xbc,0x12,0xc3,0x58,0x3d,0x13,0x60,0x3,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x34,0x80,0x15,0x61,0x0,0x71,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x33,0x60,0x0,0x80,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x61,0x4,0x26,0x80,0x61,0x0,0xc1,0x60,0x0,0x39,0x60,0x0,0xf3,0x0,0x60,0x80,0x60,0x40,0x52,0x60,0x4,0x36,0x10,0x61,0x0,0x6d,0x57,0x60,0x0,0x35,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x41,0xc0,0xe1,0xb5,0x14,0x61,0x0,0x6f,0x57,0x80,0x63,0x4f,0x5,0x75,0x6,0x14,0x61,0x0,0x86,0x57,0x80,0x63,0x5f,0x66,0xd2,0xa9,0x14,0x61,0x0,0xb1,0x57,0x80,0x63,0xa6,0xf9,0xda,0xe1,0x14,0x61,0x0,0xfe,0x57,0x80,0x63,0xd4,0xe9,0x32,0x92,0x14,0x61,0x1,0x41,0x57,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x7b,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x84,0x61,0x1,0x4b,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x0,0x92,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0x9b,0x61,0x1,0xbf,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x1,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0xf3,0x5b,0x34,0x80,0x15,0x61,0x0,0xbd,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x0,0xfc,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x80,0x35,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x1,0xc5,0x56,0x5b,0x0,0x5b,0x34,0x80,0x15,0x61,0x1,0xa,0x57,0x60,0x0,0x80,0xfd,0x5b,0x50,0x61,0x1,0x3f,0x60,0x4,0x80,0x36,0x3,0x81,0x1,0x90,0x80,0x80,0x35,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x90,0x60,0x20,0x1,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x2,0x6c,0x56,0x5b,0x0,0x5b,0x61,0x1,0x49,0x61,0x2,0x6f,0x56,0x5b,0x0,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x1,0xa6,0x57,0x60,0x0,0x80,0xfd,0x5b,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0xff,0x5b,0x60,0x2,0x54,0x81,0x56,0x5b,0x60,0x0,0x80,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x14,0x15,0x15,0x61,0x2,0x20,0x57,0x60,0x0,0x80,0xfd,0x5b,0x80,0x60,0x2,0x81,0x90,0x55,0x50,0x81,0x60,0x3,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x50,0x50,0x56,0x5b,0x50,0x56,0x5b,0x33,0x60,0x1,0x60,0x0,0x61,0x1,0x0,0xa,0x81,0x54,0x81,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2,0x19,0x16,0x90,0x83,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x2,0x17,0x90,0x55,0x50,0x60,0x2,0x54,0x34,0x11,0x15,0x61,0x3,0xf8,0x57,0x60,0x3,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x60,0x40,0x51,0x80,0x80,0x7f,0x6c,0x6f,0x67,0x45,0x76,0x65,0x6e,0x74,0x28,0x29,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81,0x52,0x50,0x60,0xa,0x1,0x90,0x50,0x60,0x40,0x51,0x80,0x91,0x3,0x90,0x20,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90,0x4,0x60,0x40,0x51,0x81,0x63,0xff,0xff,0xff,0xff,0x16,0x7c,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x81,0x52,0x60,0x4,0x1,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x86,0x5a,0xf4,0x92,0x50,0x50,0x50,0x50,0x60,0x1,0x60,0x0,0x90,0x54,0x90,0x61,0x1,0x0,0xa,0x90,0x4,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x8,0xfc,0x30,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x31,0x90,0x81,0x15,0x2,0x90,0x60,0x40,0x51,0x60,0x0,0x60,0x40,0x51,0x80,0x83,0x3,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x50,0x5b,0x56,0x0,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x57,0xa,0x9e,0xac,0x2a,0x3e,0xb4,0xc,0x40,0x82,0x80,0xdf,0x5b,0xd,0x7e,0xa,0xdb,0x94,0xfe,0xd4,0x55,0x76,0x4b,0xa0,0xdb,0x3,0xc3,0x80,0x1d,0x6,0x55,0x94,0x0,0x29,};


const eevm::Code& eevm::EVM2CPP_testBank::constructor_bytecode() {
    return _constructor_bytecode;
}

// TODO: update this if you want constructor arguments.
const eevm::Code _constructor_args = {};

const eevm::Code& eevm::EVM2CPP_testBank::constructor_args() {
    return _constructor_args;
}
