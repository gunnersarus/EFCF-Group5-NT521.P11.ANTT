[using trimmer code]
[Trimmer Stage: Start]
[Trimmer Stage: Transactions(2)] ❌
[Trimmer Stage: Transactions(1)] ❌
[Trimmer Stage: Transactions(0)] ❌
[Trimmer Stage: TransactionWithValue(0)] ✔️
[Trimmer Stage: TransactionHeader(2, BlockAdvance(0))] ✔️
[Trimmer Stage: TransactionHeader(1, BlockAdvance(0))] ❌
[Trimmer Stage: TransactionHeader(0, CallValue(0))] ❌
[Trimmer Stage: Returns(2, 1)] ❌
[Trimmer Stage: Returns(2, 0)] ❌
[Trimmer Stage: Returns(1, 1)] ❌
[Trimmer Stage: Returns(1, 0)] ❌
[Trimmer Stage: Returns(0, 0)] ❌
[Trimmer Stage: ReturnData(2, 1, 0)] ❌
[Trimmer Stage: ReturnData(2, 0, 0)] ✔️
[Trimmer Stage: ReturnData(1, 1, 0)] ❌
[Trimmer Stage: ReturnData(1, 0, 0)] ✔️
[Trimmer Stage: ReturnData(0, 0, 0)] ❌
[Trimmer Stage: Reenter(2, 1, 0)] ✔️
[Trimmer Stage: Reenter(1, 1, 1)] ✔️
[Trimmer Stage: Reenter(1, 1, 0)] ❌
[Trimmer Stage: Inputs(2, 4)] ❌
[Trimmer Stage: Inputs(2, 0)] ❌
[Trimmer Stage: Inputs(1, 4)] ❌
[Trimmer Stage: Inputs(1, 0)] ❌
[Trimmer Stage: Inputs(0, 164)] ❌
[Trimmer Stage: Inputs(0, 132)] ❌
[Trimmer Stage: Inputs(0, 100)] ❌
[Trimmer Stage: Inputs(0, 68)] ❌
[Trimmer Stage: Inputs(0, 36)] ❌
[Trimmer Stage: Inputs(0, 4)] ❌
[Trimmer Stage: Inputs(0, 0)] ❌
[Trimmer Stage: Sender(2, 0)] ✔️
[Trimmer Stage: Sender(1, 0)] ✔️
[Trimmer Stage: Sender(0, 0)] ✔️
[Trimmer Stage: Receiver(2, 0)] ✔️
[Trimmer Stage: Receiver(1, 0)] ✔️
[Trimmer Stage: Receiver(0, 0)] ✔️
[Trimmer Stage: BlockHeader(Number(0))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(10))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(5))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(2))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(1))] ✔️
[Trimmer Stage: BlockHeader(InitialEther(0))] ❌
[minimizing difficulty]
[ sender/receiver selector TX[0] ]
[ sender/receiver selector TX[1] ]
[ sender/receiver selector TX[2] ]
[ we try sorting the transaction list ]
reduced testcases from 536 to 472 bytes (by 12 %) edit distance 146
=== Before minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 160

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 196; block+=0; #returns=1
  func: createChannel(bytes32,address,uint256,address,uint256[2]) (0xaeba142c)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), uint(8), address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), array2(uint(1), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935), ),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000020
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=1; #returns=2
  func: LCOpenTimeout(bytes32) (0x2e1d7e)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000001
    return val: 1; allows reenter: 2; data: 0x0000000000000000000000000000000000000000000000000000000000000001
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=1; #returns=2
  func: LCOpenTimeout(bytes32) (0x2e1d7e)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000001
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000001
=== After minimizing: ===
Block header:
  number: 0
  difficulty: 0
  gas_limit: 0
  timestamp: 0
  initial_ether: 1

TX[0] with tx_sender[0]; tx_receiver[0]; call_value: 0x1; length: 196; block+=0; #returns=1
  func: createChannel(bytes32,address,uint256,address,uint256[2]) (0xaeba142c)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c), address(0xc4b803ea8bc30894cc4672a9159ca000d377d9a3), uint(8), address(0xc1af1d7e20374a20d4d3914c1a1b0ddfef99cc61), array2(uint(1), uint(115792089237316195423570985008687907853269984665640564039457584007913129639935), ),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000020
TX[1] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=1; #returns=2
  func: LCOpenTimeout(bytes32) (0x2e1d7e)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x
    return val: 1; allows reenter: 1; data: 0x0000000000000000000000000000000000000000000000000000000000000001
TX[2] with tx_sender[0]; tx_receiver[0]; call_value: 0x0; length: 36; block+=0; #returns=2
  func: LCOpenTimeout(bytes32) (0x2e1d7e)
  input: { bytes32(0x3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c),  }
  returns:
    return val: 1; allows reenter: 0; data: 0x
    return val: 1; allows reenter: 0; data: 0x0000000000000000000000000000000000000000000000000000000000000001
